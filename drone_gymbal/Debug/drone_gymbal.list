
drone_gymbal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031c4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003388  08003388  00013388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033a0  080033a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080033a0  080033a0  000133a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033a8  080033a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033a8  080033a8  000133a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033ac  080033ac  000133ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080033b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  2000000c  080033bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  080033bc  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c17e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c74  00000000  00000000  0002c1ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d80  00000000  00000000  0002de30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c98  00000000  00000000  0002ebb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002135b  00000000  00000000  0002f848  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000097b9  00000000  00000000  00050ba3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cce6c  00000000  00000000  0005a35c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001271c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000390c  00000000  00000000  00127244  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003370 	.word	0x08003370

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08003370 	.word	0x08003370

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <HAL_Init+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <HAL_Init+0x40>)
 800050e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000512:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <HAL_Init+0x40>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <HAL_Init+0x40>)
 800051a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <HAL_Init+0x40>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a07      	ldr	r2, [pc, #28]	; (8000544 <HAL_Init+0x40>)
 8000526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800052a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800052c:	2003      	movs	r0, #3
 800052e:	f000 ffa5 	bl	800147c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000532:	2000      	movs	r0, #0
 8000534:	f000 f808 	bl	8000548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000538:	f002 fcf4 	bl	8002f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800053c:	2300      	movs	r3, #0
}
 800053e:	4618      	mov	r0, r3
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40023c00 	.word	0x40023c00

08000548 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <HAL_InitTick+0x54>)
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	4b12      	ldr	r3, [pc, #72]	; (80005a0 <HAL_InitTick+0x58>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4619      	mov	r1, r3
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000562:	fbb2 f3f3 	udiv	r3, r2, r3
 8000566:	4618      	mov	r0, r3
 8000568:	f000 ffbd 	bl	80014e6 <HAL_SYSTICK_Config>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000572:	2301      	movs	r3, #1
 8000574:	e00e      	b.n	8000594 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2b0f      	cmp	r3, #15
 800057a:	d80a      	bhi.n	8000592 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800057c:	2200      	movs	r2, #0
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	f04f 30ff 	mov.w	r0, #4294967295
 8000584:	f000 ff85 	bl	8001492 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000588:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <HAL_InitTick+0x5c>)
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800058e:	2300      	movs	r3, #0
 8000590:	e000      	b.n	8000594 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000008 	.word	0x20000008
 80005a0:	20000004 	.word	0x20000004
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_IncTick+0x20>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x24>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_IncTick+0x24>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000004 	.word	0x20000004
 80005cc:	20000028 	.word	0x20000028

080005d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return uwTick;
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <HAL_GetTick+0x14>)
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000028 	.word	0x20000028

080005e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f0:	f7ff ffee 	bl	80005d0 <HAL_GetTick>
 80005f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000600:	d005      	beq.n	800060e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <HAL_Delay+0x40>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	461a      	mov	r2, r3
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4413      	add	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800060e:	bf00      	nop
 8000610:	f7ff ffde 	bl	80005d0 <HAL_GetTick>
 8000614:	4602      	mov	r2, r0
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	429a      	cmp	r2, r3
 800061e:	d8f7      	bhi.n	8000610 <HAL_Delay+0x28>
  {
  }
}
 8000620:	bf00      	nop
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000004 	.word	0x20000004

0800062c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d101      	bne.n	800063e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800063a:	2301      	movs	r3, #1
 800063c:	e0ed      	b.n	800081a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000644:	b2db      	uxtb	r3, r3
 8000646:	2b00      	cmp	r3, #0
 8000648:	d102      	bne.n	8000650 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	f002 fc92 	bl	8002f74 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f022 0202 	bic.w	r2, r2, #2
 800065e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000660:	f7ff ffb6 	bl	80005d0 <HAL_GetTick>
 8000664:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000666:	e012      	b.n	800068e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000668:	f7ff ffb2 	bl	80005d0 <HAL_GetTick>
 800066c:	4602      	mov	r2, r0
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	2b0a      	cmp	r3, #10
 8000674:	d90b      	bls.n	800068e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800067a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2205      	movs	r2, #5
 8000686:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800068a:	2301      	movs	r3, #1
 800068c:	e0c5      	b.n	800081a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	f003 0302 	and.w	r3, r3, #2
 8000698:	2b00      	cmp	r3, #0
 800069a:	d1e5      	bne.n	8000668 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	f042 0201 	orr.w	r2, r2, #1
 80006aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80006ac:	f7ff ff90 	bl	80005d0 <HAL_GetTick>
 80006b0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006b2:	e012      	b.n	80006da <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80006b4:	f7ff ff8c 	bl	80005d0 <HAL_GetTick>
 80006b8:	4602      	mov	r2, r0
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	2b0a      	cmp	r3, #10
 80006c0:	d90b      	bls.n	80006da <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2205      	movs	r2, #5
 80006d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
 80006d8:	e09f      	b.n	800081a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	f003 0301 	and.w	r3, r3, #1
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d0e5      	beq.n	80006b4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	7e1b      	ldrb	r3, [r3, #24]
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d108      	bne.n	8000702 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	e007      	b.n	8000712 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000710:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	7e5b      	ldrb	r3, [r3, #25]
 8000716:	2b01      	cmp	r3, #1
 8000718:	d108      	bne.n	800072c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	e007      	b.n	800073c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800073a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	7e9b      	ldrb	r3, [r3, #26]
 8000740:	2b01      	cmp	r3, #1
 8000742:	d108      	bne.n	8000756 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f042 0220 	orr.w	r2, r2, #32
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	e007      	b.n	8000766 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f022 0220 	bic.w	r2, r2, #32
 8000764:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	7edb      	ldrb	r3, [r3, #27]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d108      	bne.n	8000780 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f022 0210 	bic.w	r2, r2, #16
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	e007      	b.n	8000790 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f042 0210 	orr.w	r2, r2, #16
 800078e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	7f1b      	ldrb	r3, [r3, #28]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d108      	bne.n	80007aa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f042 0208 	orr.w	r2, r2, #8
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	e007      	b.n	80007ba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f022 0208 	bic.w	r2, r2, #8
 80007b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	7f5b      	ldrb	r3, [r3, #29]
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d108      	bne.n	80007d4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f042 0204 	orr.w	r2, r2, #4
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	e007      	b.n	80007e4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f022 0204 	bic.w	r2, r2, #4
 80007e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	689a      	ldr	r2, [r3, #8]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	431a      	orrs	r2, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	691b      	ldr	r3, [r3, #16]
 80007f2:	431a      	orrs	r2, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	695b      	ldr	r3, [r3, #20]
 80007f8:	ea42 0103 	orr.w	r1, r2, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	1e5a      	subs	r2, r3, #1
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	430a      	orrs	r2, r1
 8000808:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2200      	movs	r2, #0
 800080e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2201      	movs	r2, #1
 8000814:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000818:	2300      	movs	r3, #0
}
 800081a:	4618      	mov	r0, r3
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000824:	b480      	push	{r7}
 8000826:	b087      	sub	sp, #28
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f893 3020 	ldrb.w	r3, [r3, #32]
 800083a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800083c:	7cfb      	ldrb	r3, [r7, #19]
 800083e:	2b01      	cmp	r3, #1
 8000840:	d003      	beq.n	800084a <HAL_CAN_ConfigFilter+0x26>
 8000842:	7cfb      	ldrb	r3, [r7, #19]
 8000844:	2b02      	cmp	r3, #2
 8000846:	f040 80be 	bne.w	80009c6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800084a:	4b65      	ldr	r3, [pc, #404]	; (80009e0 <HAL_CAN_ConfigFilter+0x1bc>)
 800084c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000854:	f043 0201 	orr.w	r2, r3, #1
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000864:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000878:	021b      	lsls	r3, r3, #8
 800087a:	431a      	orrs	r2, r3
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	f003 031f 	and.w	r3, r3, #31
 800088a:	2201      	movs	r2, #1
 800088c:	fa02 f303 	lsl.w	r3, r2, r3
 8000890:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	43db      	mvns	r3, r3
 800089c:	401a      	ands	r2, r3
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	69db      	ldr	r3, [r3, #28]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d123      	bne.n	80008f4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	43db      	mvns	r3, r3
 80008b6:	401a      	ands	r2, r3
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	68db      	ldr	r3, [r3, #12]
 80008c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008ca:	683a      	ldr	r2, [r7, #0]
 80008cc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80008ce:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	3248      	adds	r2, #72	; 0x48
 80008d4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80008e8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80008ea:	6979      	ldr	r1, [r7, #20]
 80008ec:	3348      	adds	r3, #72	; 0x48
 80008ee:	00db      	lsls	r3, r3, #3
 80008f0:	440b      	add	r3, r1
 80008f2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	69db      	ldr	r3, [r3, #28]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d122      	bne.n	8000942 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	431a      	orrs	r2, r3
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000918:	683a      	ldr	r2, [r7, #0]
 800091a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800091c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	3248      	adds	r2, #72	; 0x48
 8000922:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	689b      	ldr	r3, [r3, #8]
 800092a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000936:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000938:	6979      	ldr	r1, [r7, #20]
 800093a:	3348      	adds	r3, #72	; 0x48
 800093c:	00db      	lsls	r3, r3, #3
 800093e:	440b      	add	r3, r1
 8000940:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d109      	bne.n	800095e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	43db      	mvns	r3, r3
 8000954:	401a      	ands	r2, r3
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800095c:	e007      	b.n	800096e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	431a      	orrs	r2, r3
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	691b      	ldr	r3, [r3, #16]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d109      	bne.n	800098a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	43db      	mvns	r3, r3
 8000980:	401a      	ands	r2, r3
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000988:	e007      	b.n	800099a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	431a      	orrs	r2, r3
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	6a1b      	ldr	r3, [r3, #32]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d107      	bne.n	80009b2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	431a      	orrs	r2, r3
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80009b8:	f023 0201 	bic.w	r2, r3, #1
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80009c2:	2300      	movs	r3, #0
 80009c4:	e006      	b.n	80009d4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
  }
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	371c      	adds	r7, #28
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	40006400 	.word	0x40006400

080009e4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b084      	sub	sp, #16
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d12e      	bne.n	8000a56 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2202      	movs	r2, #2
 80009fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f022 0201 	bic.w	r2, r2, #1
 8000a0e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000a10:	f7ff fdde 	bl	80005d0 <HAL_GetTick>
 8000a14:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000a16:	e012      	b.n	8000a3e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a18:	f7ff fdda 	bl	80005d0 <HAL_GetTick>
 8000a1c:	4602      	mov	r2, r0
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	2b0a      	cmp	r3, #10
 8000a24:	d90b      	bls.n	8000a3e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	2205      	movs	r2, #5
 8000a36:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e012      	b.n	8000a64 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	f003 0301 	and.w	r3, r3, #1
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d1e5      	bne.n	8000a18 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000a52:	2300      	movs	r3, #0
 8000a54:	e006      	b.n	8000a64 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a5a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
  }
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b089      	sub	sp, #36	; 0x24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
 8000a78:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a80:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000a8a:	7ffb      	ldrb	r3, [r7, #31]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d003      	beq.n	8000a98 <HAL_CAN_AddTxMessage+0x2c>
 8000a90:	7ffb      	ldrb	r3, [r7, #31]
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	f040 80b8 	bne.w	8000c08 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d10a      	bne.n	8000ab8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d105      	bne.n	8000ab8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000aac:	69bb      	ldr	r3, [r7, #24]
 8000aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	f000 80a0 	beq.w	8000bf8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	0e1b      	lsrs	r3, r3, #24
 8000abc:	f003 0303 	and.w	r3, r3, #3
 8000ac0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	2b02      	cmp	r3, #2
 8000ac6:	d907      	bls.n	8000ad8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000acc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	e09e      	b.n	8000c16 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000ad8:	2201      	movs	r2, #1
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	409a      	lsls	r2, r3
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d10d      	bne.n	8000b06 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000af4:	68f9      	ldr	r1, [r7, #12]
 8000af6:	6809      	ldr	r1, [r1, #0]
 8000af8:	431a      	orrs	r2, r3
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	3318      	adds	r3, #24
 8000afe:	011b      	lsls	r3, r3, #4
 8000b00:	440b      	add	r3, r1
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	e00f      	b.n	8000b26 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b10:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b16:	68f9      	ldr	r1, [r7, #12]
 8000b18:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000b1a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	3318      	adds	r3, #24
 8000b20:	011b      	lsls	r3, r3, #4
 8000b22:	440b      	add	r3, r1
 8000b24:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	6819      	ldr	r1, [r3, #0]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	691a      	ldr	r2, [r3, #16]
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	3318      	adds	r3, #24
 8000b32:	011b      	lsls	r3, r3, #4
 8000b34:	440b      	add	r3, r1
 8000b36:	3304      	adds	r3, #4
 8000b38:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	7d1b      	ldrb	r3, [r3, #20]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d111      	bne.n	8000b66 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	3318      	adds	r3, #24
 8000b4a:	011b      	lsls	r3, r3, #4
 8000b4c:	4413      	add	r3, r2
 8000b4e:	3304      	adds	r3, #4
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	6811      	ldr	r1, [r2, #0]
 8000b56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	3318      	adds	r3, #24
 8000b5e:	011b      	lsls	r3, r3, #4
 8000b60:	440b      	add	r3, r1
 8000b62:	3304      	adds	r3, #4
 8000b64:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	3307      	adds	r3, #7
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	061a      	lsls	r2, r3, #24
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	3306      	adds	r3, #6
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	041b      	lsls	r3, r3, #16
 8000b76:	431a      	orrs	r2, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3305      	adds	r3, #5
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	021b      	lsls	r3, r3, #8
 8000b80:	4313      	orrs	r3, r2
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	3204      	adds	r2, #4
 8000b86:	7812      	ldrb	r2, [r2, #0]
 8000b88:	4610      	mov	r0, r2
 8000b8a:	68fa      	ldr	r2, [r7, #12]
 8000b8c:	6811      	ldr	r1, [r2, #0]
 8000b8e:	ea43 0200 	orr.w	r2, r3, r0
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	011b      	lsls	r3, r3, #4
 8000b96:	440b      	add	r3, r1
 8000b98:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000b9c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	3303      	adds	r3, #3
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	061a      	lsls	r2, r3, #24
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	3302      	adds	r3, #2
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	041b      	lsls	r3, r3, #16
 8000bae:	431a      	orrs	r2, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	021b      	lsls	r3, r3, #8
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	7812      	ldrb	r2, [r2, #0]
 8000bbe:	4610      	mov	r0, r2
 8000bc0:	68fa      	ldr	r2, [r7, #12]
 8000bc2:	6811      	ldr	r1, [r2, #0]
 8000bc4:	ea43 0200 	orr.w	r2, r3, r0
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	011b      	lsls	r3, r3, #4
 8000bcc:	440b      	add	r3, r1
 8000bce:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000bd2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	3318      	adds	r3, #24
 8000bdc:	011b      	lsls	r3, r3, #4
 8000bde:	4413      	add	r3, r2
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	6811      	ldr	r1, [r2, #0]
 8000be6:	f043 0201 	orr.w	r2, r3, #1
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	3318      	adds	r3, #24
 8000bee:	011b      	lsls	r3, r3, #4
 8000bf0:	440b      	add	r3, r1
 8000bf2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	e00e      	b.n	8000c16 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bfc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000c04:	2301      	movs	r3, #1
 8000c06:	e006      	b.n	8000c16 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c0c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
  }
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3724      	adds	r7, #36	; 0x24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8000c22:	b480      	push	{r7}
 8000c24:	b085      	sub	sp, #20
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c34:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8000c36:	7afb      	ldrb	r3, [r7, #11]
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d002      	beq.n	8000c42 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8000c3c:	7afb      	ldrb	r3, [r7, #11]
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d11d      	bne.n	8000c7e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d002      	beq.n	8000c56 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	3301      	adds	r3, #1
 8000c54:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d002      	beq.n	8000c6a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	3301      	adds	r3, #1
 8000c68:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	689b      	ldr	r3, [r3, #8]
 8000c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d002      	beq.n	8000c7e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3714      	adds	r7, #20
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b087      	sub	sp, #28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
 8000c98:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ca0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ca2:	7dfb      	ldrb	r3, [r7, #23]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d003      	beq.n	8000cb0 <HAL_CAN_GetRxMessage+0x24>
 8000ca8:	7dfb      	ldrb	r3, [r7, #23]
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	f040 80f4 	bne.w	8000e98 <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d10e      	bne.n	8000cd4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	f003 0303 	and.w	r3, r3, #3
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d116      	bne.n	8000cf2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e0e8      	b.n	8000ea6 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	691b      	ldr	r3, [r3, #16]
 8000cda:	f003 0303 	and.w	r3, r3, #3
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d107      	bne.n	8000cf2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e0d9      	b.n	8000ea6 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	331b      	adds	r3, #27
 8000cfa:	011b      	lsls	r3, r3, #4
 8000cfc:	4413      	add	r3, r2
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f003 0204 	and.w	r2, r3, #4
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d10c      	bne.n	8000d2a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	331b      	adds	r3, #27
 8000d18:	011b      	lsls	r3, r3, #4
 8000d1a:	4413      	add	r3, r2
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	0d5b      	lsrs	r3, r3, #21
 8000d20:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	e00b      	b.n	8000d42 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	331b      	adds	r3, #27
 8000d32:	011b      	lsls	r3, r3, #4
 8000d34:	4413      	add	r3, r2
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	08db      	lsrs	r3, r3, #3
 8000d3a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	331b      	adds	r3, #27
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	4413      	add	r3, r2
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	085b      	lsrs	r3, r3, #1
 8000d52:	f003 0201 	and.w	r2, r3, #1
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	331b      	adds	r3, #27
 8000d62:	011b      	lsls	r3, r3, #4
 8000d64:	4413      	add	r3, r2
 8000d66:	3304      	adds	r3, #4
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 020f 	and.w	r2, r3, #15
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	331b      	adds	r3, #27
 8000d7a:	011b      	lsls	r3, r3, #4
 8000d7c:	4413      	add	r3, r2
 8000d7e:	3304      	adds	r3, #4
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	0a1b      	lsrs	r3, r3, #8
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	331b      	adds	r3, #27
 8000d92:	011b      	lsls	r3, r3, #4
 8000d94:	4413      	add	r3, r2
 8000d96:	3304      	adds	r3, #4
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	0c1b      	lsrs	r3, r3, #16
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	011b      	lsls	r3, r3, #4
 8000daa:	4413      	add	r3, r2
 8000dac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	011b      	lsls	r3, r3, #4
 8000dc0:	4413      	add	r3, r2
 8000dc2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	0a1a      	lsrs	r2, r3, #8
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	b2d2      	uxtb	r2, r2
 8000dd0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	011b      	lsls	r3, r3, #4
 8000dda:	4413      	add	r3, r2
 8000ddc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	0c1a      	lsrs	r2, r3, #16
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	3302      	adds	r3, #2
 8000de8:	b2d2      	uxtb	r2, r2
 8000dea:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	011b      	lsls	r3, r3, #4
 8000df4:	4413      	add	r3, r2
 8000df6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	0e1a      	lsrs	r2, r3, #24
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	3303      	adds	r3, #3
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	011b      	lsls	r3, r3, #4
 8000e0e:	4413      	add	r3, r2
 8000e10:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	3304      	adds	r3, #4
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	011b      	lsls	r3, r3, #4
 8000e26:	4413      	add	r3, r2
 8000e28:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	0a1a      	lsrs	r2, r3, #8
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	3305      	adds	r3, #5
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	011b      	lsls	r3, r3, #4
 8000e40:	4413      	add	r3, r2
 8000e42:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	0c1a      	lsrs	r2, r3, #16
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	3306      	adds	r3, #6
 8000e4e:	b2d2      	uxtb	r2, r2
 8000e50:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	011b      	lsls	r3, r3, #4
 8000e5a:	4413      	add	r3, r2
 8000e5c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	0e1a      	lsrs	r2, r3, #24
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	3307      	adds	r3, #7
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d108      	bne.n	8000e84 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	68da      	ldr	r2, [r3, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f042 0220 	orr.w	r2, r2, #32
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	e007      	b.n	8000e94 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	691a      	ldr	r2, [r3, #16]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f042 0220 	orr.w	r2, r2, #32
 8000e92:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000e94:	2300      	movs	r3, #0
 8000e96:	e006      	b.n	8000ea6 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
  }
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	371c      	adds	r7, #28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b085      	sub	sp, #20
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
 8000eba:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ec6:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000ec8:	7afb      	ldrb	r3, [r7, #11]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d002      	beq.n	8000ed4 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8000ece:	7afb      	ldrb	r3, [r7, #11]
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d10f      	bne.n	8000ef4 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d106      	bne.n	8000ee8 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	e005      	b.n	8000ef4 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	691b      	ldr	r3, [r3, #16]
 8000eee:	f003 0303 	and.w	r3, r3, #3
 8000ef2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b08a      	sub	sp, #40	; 0x28
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	695b      	ldr	r3, [r3, #20]
 8000f14:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	691b      	ldr	r3, [r3, #16]
 8000f34:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000f3e:	6a3b      	ldr	r3, [r7, #32]
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d07c      	beq.n	8001042 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d023      	beq.n	8000f9a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	2201      	movs	r2, #1
 8000f58:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	f003 0302 	and.w	r3, r3, #2
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f001 fe97 	bl	8002c98 <HAL_CAN_TxMailbox0CompleteCallback>
 8000f6a:	e016      	b.n	8000f9a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	f003 0304 	and.w	r3, r3, #4
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d004      	beq.n	8000f80 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f7e:	e00c      	b.n	8000f9a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	f003 0308 	and.w	r3, r3, #8
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d004      	beq.n	8000f94 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f90:	627b      	str	r3, [r7, #36]	; 0x24
 8000f92:	e002      	b.n	8000f9a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f001 feb5 	bl	8002d04 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d024      	beq.n	8000fee <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fac:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f001 fe7f 	bl	8002cbc <HAL_CAN_TxMailbox1CompleteCallback>
 8000fbe:	e016      	b.n	8000fee <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d004      	beq.n	8000fd4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fcc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8000fd2:	e00c      	b.n	8000fee <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d004      	beq.n	8000fe8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8000fe6:	e002      	b.n	8000fee <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f001 fe9d 	bl	8002d28 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d024      	beq.n	8001042 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001000:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f001 fe67 	bl	8002ce0 <HAL_CAN_TxMailbox2CompleteCallback>
 8001012:	e016      	b.n	8001042 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d004      	beq.n	8001028 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800101e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001020:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
 8001026:	e00c      	b.n	8001042 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d004      	beq.n	800103c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
 800103a:	e002      	b.n	8001042 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f001 fe85 	bl	8002d4c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001042:	6a3b      	ldr	r3, [r7, #32]
 8001044:	f003 0308 	and.w	r3, r3, #8
 8001048:	2b00      	cmp	r3, #0
 800104a:	d00c      	beq.n	8001066 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	f003 0310 	and.w	r3, r3, #16
 8001052:	2b00      	cmp	r3, #0
 8001054:	d007      	beq.n	8001066 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001058:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800105c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2210      	movs	r2, #16
 8001064:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001066:	6a3b      	ldr	r3, [r7, #32]
 8001068:	f003 0304 	and.w	r3, r3, #4
 800106c:	2b00      	cmp	r3, #0
 800106e:	d00b      	beq.n	8001088 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	f003 0308 	and.w	r3, r3, #8
 8001076:	2b00      	cmp	r3, #0
 8001078:	d006      	beq.n	8001088 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2208      	movs	r2, #8
 8001080:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f000 f8f8 	bl	8001278 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001088:	6a3b      	ldr	r3, [r7, #32]
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d009      	beq.n	80010a6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	2b00      	cmp	r3, #0
 800109e:	d002      	beq.n	80010a6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 f8df 	bl	8001264 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80010a6:	6a3b      	ldr	r3, [r7, #32]
 80010a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d00c      	beq.n	80010ca <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	f003 0310 	and.w	r3, r3, #16
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d007      	beq.n	80010ca <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80010ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2210      	movs	r2, #16
 80010c8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80010ca:	6a3b      	ldr	r3, [r7, #32]
 80010cc:	f003 0320 	and.w	r3, r3, #32
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d00b      	beq.n	80010ec <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	f003 0308 	and.w	r3, r3, #8
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d006      	beq.n	80010ec <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2208      	movs	r2, #8
 80010e4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 f8da 	bl	80012a0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80010ec:	6a3b      	ldr	r3, [r7, #32]
 80010ee:	f003 0310 	and.w	r3, r3, #16
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d009      	beq.n	800110a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	691b      	ldr	r3, [r3, #16]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	2b00      	cmp	r3, #0
 8001102:	d002      	beq.n	800110a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f000 f8c1 	bl	800128c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800110a:	6a3b      	ldr	r3, [r7, #32]
 800110c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d00b      	beq.n	800112c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f003 0310 	and.w	r3, r3, #16
 800111a:	2b00      	cmp	r3, #0
 800111c:	d006      	beq.n	800112c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2210      	movs	r2, #16
 8001124:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f000 f8c4 	bl	80012b4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800112c:	6a3b      	ldr	r3, [r7, #32]
 800112e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00b      	beq.n	800114e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	f003 0308 	and.w	r3, r3, #8
 800113c:	2b00      	cmp	r3, #0
 800113e:	d006      	beq.n	800114e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2208      	movs	r2, #8
 8001146:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 f8bd 	bl	80012c8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800114e:	6a3b      	ldr	r3, [r7, #32]
 8001150:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d075      	beq.n	8001244 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f003 0304 	and.w	r3, r3, #4
 800115e:	2b00      	cmp	r3, #0
 8001160:	d06c      	beq.n	800123c <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001162:	6a3b      	ldr	r3, [r7, #32]
 8001164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001168:	2b00      	cmp	r3, #0
 800116a:	d008      	beq.n	800117e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800117e:	6a3b      	ldr	r3, [r7, #32]
 8001180:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001184:	2b00      	cmp	r3, #0
 8001186:	d008      	beq.n	800119a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001194:	f043 0302 	orr.w	r3, r3, #2
 8001198:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800119a:	6a3b      	ldr	r3, [r7, #32]
 800119c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d008      	beq.n	80011b6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	f043 0304 	orr.w	r3, r3, #4
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80011b6:	6a3b      	ldr	r3, [r7, #32]
 80011b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d03d      	beq.n	800123c <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d038      	beq.n	800123c <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80011d0:	2b30      	cmp	r3, #48	; 0x30
 80011d2:	d017      	beq.n	8001204 <HAL_CAN_IRQHandler+0x302>
 80011d4:	2b30      	cmp	r3, #48	; 0x30
 80011d6:	d804      	bhi.n	80011e2 <HAL_CAN_IRQHandler+0x2e0>
 80011d8:	2b10      	cmp	r3, #16
 80011da:	d009      	beq.n	80011f0 <HAL_CAN_IRQHandler+0x2ee>
 80011dc:	2b20      	cmp	r3, #32
 80011de:	d00c      	beq.n	80011fa <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80011e0:	e024      	b.n	800122c <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80011e2:	2b50      	cmp	r3, #80	; 0x50
 80011e4:	d018      	beq.n	8001218 <HAL_CAN_IRQHandler+0x316>
 80011e6:	2b60      	cmp	r3, #96	; 0x60
 80011e8:	d01b      	beq.n	8001222 <HAL_CAN_IRQHandler+0x320>
 80011ea:	2b40      	cmp	r3, #64	; 0x40
 80011ec:	d00f      	beq.n	800120e <HAL_CAN_IRQHandler+0x30c>
            break;
 80011ee:	e01d      	b.n	800122c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80011f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f2:	f043 0308 	orr.w	r3, r3, #8
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80011f8:	e018      	b.n	800122c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80011fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fc:	f043 0310 	orr.w	r3, r3, #16
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001202:	e013      	b.n	800122c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001206:	f043 0320 	orr.w	r3, r3, #32
 800120a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800120c:	e00e      	b.n	800122c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001210:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001216:	e009      	b.n	800122c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001220:	e004      	b.n	800122c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800122a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	699a      	ldr	r2, [r3, #24]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800123a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2204      	movs	r2, #4
 8001242:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001246:	2b00      	cmp	r3, #0
 8001248:	d008      	beq.n	800125c <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800124e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001250:	431a      	orrs	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f001 fd8a 	bl	8002d70 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800125c:	bf00      	nop
 800125e:	3728      	adds	r7, #40	; 0x28
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f8:	4013      	ands	r3, r2
 80012fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001304:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800130c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130e:	4a04      	ldr	r2, [pc, #16]	; (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	60d3      	str	r3, [r2, #12]
}
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <__NVIC_GetPriorityGrouping+0x18>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	f003 0307 	and.w	r3, r3, #7
}
 8001332:	4618      	mov	r0, r3
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	2b00      	cmp	r3, #0
 8001350:	db0b      	blt.n	800136a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	f003 021f 	and.w	r2, r3, #31
 8001358:	4907      	ldr	r1, [pc, #28]	; (8001378 <__NVIC_EnableIRQ+0x38>)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	095b      	lsrs	r3, r3, #5
 8001360:	2001      	movs	r0, #1
 8001362:	fa00 f202 	lsl.w	r2, r0, r2
 8001366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	e000e100 	.word	0xe000e100

0800137c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	6039      	str	r1, [r7, #0]
 8001386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138c:	2b00      	cmp	r3, #0
 800138e:	db0a      	blt.n	80013a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	b2da      	uxtb	r2, r3
 8001394:	490c      	ldr	r1, [pc, #48]	; (80013c8 <__NVIC_SetPriority+0x4c>)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	0112      	lsls	r2, r2, #4
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	440b      	add	r3, r1
 80013a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a4:	e00a      	b.n	80013bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4908      	ldr	r1, [pc, #32]	; (80013cc <__NVIC_SetPriority+0x50>)
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	f003 030f 	and.w	r3, r3, #15
 80013b2:	3b04      	subs	r3, #4
 80013b4:	0112      	lsls	r2, r2, #4
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	440b      	add	r3, r1
 80013ba:	761a      	strb	r2, [r3, #24]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000e100 	.word	0xe000e100
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b089      	sub	sp, #36	; 0x24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f1c3 0307 	rsb	r3, r3, #7
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	bf28      	it	cs
 80013ee:	2304      	movcs	r3, #4
 80013f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3304      	adds	r3, #4
 80013f6:	2b06      	cmp	r3, #6
 80013f8:	d902      	bls.n	8001400 <NVIC_EncodePriority+0x30>
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3b03      	subs	r3, #3
 80013fe:	e000      	b.n	8001402 <NVIC_EncodePriority+0x32>
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001404:	f04f 32ff 	mov.w	r2, #4294967295
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43da      	mvns	r2, r3
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	401a      	ands	r2, r3
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001418:	f04f 31ff 	mov.w	r1, #4294967295
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	fa01 f303 	lsl.w	r3, r1, r3
 8001422:	43d9      	mvns	r1, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	4313      	orrs	r3, r2
         );
}
 800142a:	4618      	mov	r0, r3
 800142c:	3724      	adds	r7, #36	; 0x24
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3b01      	subs	r3, #1
 8001444:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001448:	d301      	bcc.n	800144e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800144a:	2301      	movs	r3, #1
 800144c:	e00f      	b.n	800146e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144e:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <SysTick_Config+0x40>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001456:	210f      	movs	r1, #15
 8001458:	f04f 30ff 	mov.w	r0, #4294967295
 800145c:	f7ff ff8e 	bl	800137c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <SysTick_Config+0x40>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001466:	4b04      	ldr	r3, [pc, #16]	; (8001478 <SysTick_Config+0x40>)
 8001468:	2207      	movs	r2, #7
 800146a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	e000e010 	.word	0xe000e010

0800147c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff ff29 	bl	80012dc <__NVIC_SetPriorityGrouping>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af00      	add	r7, sp, #0
 8001498:	4603      	mov	r3, r0
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a4:	f7ff ff3e 	bl	8001324 <__NVIC_GetPriorityGrouping>
 80014a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	68b9      	ldr	r1, [r7, #8]
 80014ae:	6978      	ldr	r0, [r7, #20]
 80014b0:	f7ff ff8e 	bl	80013d0 <NVIC_EncodePriority>
 80014b4:	4602      	mov	r2, r0
 80014b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ba:	4611      	mov	r1, r2
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff5d 	bl	800137c <__NVIC_SetPriority>
}
 80014c2:	bf00      	nop
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	4603      	mov	r3, r0
 80014d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ff31 	bl	8001340 <__NVIC_EnableIRQ>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff ffa2 	bl	8001438 <SysTick_Config>
 80014f4:	4603      	mov	r3, r0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001500:	b480      	push	{r7}
 8001502:	b089      	sub	sp, #36	; 0x24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001512:	2300      	movs	r3, #0
 8001514:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001516:	2300      	movs	r3, #0
 8001518:	61fb      	str	r3, [r7, #28]
 800151a:	e165      	b.n	80017e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800151c:	2201      	movs	r2, #1
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	4013      	ands	r3, r2
 800152e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	429a      	cmp	r2, r3
 8001536:	f040 8154 	bne.w	80017e2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b02      	cmp	r3, #2
 8001540:	d003      	beq.n	800154a <HAL_GPIO_Init+0x4a>
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b12      	cmp	r3, #18
 8001548:	d123      	bne.n	8001592 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	08da      	lsrs	r2, r3, #3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	3208      	adds	r2, #8
 8001552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001556:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	220f      	movs	r2, #15
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43db      	mvns	r3, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4013      	ands	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	691a      	ldr	r2, [r3, #16]
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	f003 0307 	and.w	r3, r3, #7
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	08da      	lsrs	r2, r3, #3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3208      	adds	r2, #8
 800158c:	69b9      	ldr	r1, [r7, #24]
 800158e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	2203      	movs	r2, #3
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43db      	mvns	r3, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4013      	ands	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 0203 	and.w	r2, r3, #3
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4313      	orrs	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d00b      	beq.n	80015e6 <HAL_GPIO_Init+0xe6>
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d007      	beq.n	80015e6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015da:	2b11      	cmp	r3, #17
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b12      	cmp	r3, #18
 80015e4:	d130      	bne.n	8001648 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	2203      	movs	r2, #3
 80015f2:	fa02 f303 	lsl.w	r3, r2, r3
 80015f6:	43db      	mvns	r3, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4013      	ands	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	68da      	ldr	r2, [r3, #12]
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800161c:	2201      	movs	r2, #1
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4013      	ands	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	091b      	lsrs	r3, r3, #4
 8001632:	f003 0201 	and.w	r2, r3, #1
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	2203      	movs	r2, #3
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4013      	ands	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 80ae 	beq.w	80017e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	4b5c      	ldr	r3, [pc, #368]	; (80017fc <HAL_GPIO_Init+0x2fc>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	4a5b      	ldr	r2, [pc, #364]	; (80017fc <HAL_GPIO_Init+0x2fc>)
 8001690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001694:	6453      	str	r3, [r2, #68]	; 0x44
 8001696:	4b59      	ldr	r3, [pc, #356]	; (80017fc <HAL_GPIO_Init+0x2fc>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016a2:	4a57      	ldr	r2, [pc, #348]	; (8001800 <HAL_GPIO_Init+0x300>)
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	089b      	lsrs	r3, r3, #2
 80016a8:	3302      	adds	r3, #2
 80016aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	220f      	movs	r2, #15
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43db      	mvns	r3, r3
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	4013      	ands	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4a4e      	ldr	r2, [pc, #312]	; (8001804 <HAL_GPIO_Init+0x304>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d025      	beq.n	800171a <HAL_GPIO_Init+0x21a>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4a4d      	ldr	r2, [pc, #308]	; (8001808 <HAL_GPIO_Init+0x308>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d01f      	beq.n	8001716 <HAL_GPIO_Init+0x216>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a4c      	ldr	r2, [pc, #304]	; (800180c <HAL_GPIO_Init+0x30c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d019      	beq.n	8001712 <HAL_GPIO_Init+0x212>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a4b      	ldr	r2, [pc, #300]	; (8001810 <HAL_GPIO_Init+0x310>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d013      	beq.n	800170e <HAL_GPIO_Init+0x20e>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a4a      	ldr	r2, [pc, #296]	; (8001814 <HAL_GPIO_Init+0x314>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d00d      	beq.n	800170a <HAL_GPIO_Init+0x20a>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a49      	ldr	r2, [pc, #292]	; (8001818 <HAL_GPIO_Init+0x318>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d007      	beq.n	8001706 <HAL_GPIO_Init+0x206>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a48      	ldr	r2, [pc, #288]	; (800181c <HAL_GPIO_Init+0x31c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d101      	bne.n	8001702 <HAL_GPIO_Init+0x202>
 80016fe:	2306      	movs	r3, #6
 8001700:	e00c      	b.n	800171c <HAL_GPIO_Init+0x21c>
 8001702:	2307      	movs	r3, #7
 8001704:	e00a      	b.n	800171c <HAL_GPIO_Init+0x21c>
 8001706:	2305      	movs	r3, #5
 8001708:	e008      	b.n	800171c <HAL_GPIO_Init+0x21c>
 800170a:	2304      	movs	r3, #4
 800170c:	e006      	b.n	800171c <HAL_GPIO_Init+0x21c>
 800170e:	2303      	movs	r3, #3
 8001710:	e004      	b.n	800171c <HAL_GPIO_Init+0x21c>
 8001712:	2302      	movs	r3, #2
 8001714:	e002      	b.n	800171c <HAL_GPIO_Init+0x21c>
 8001716:	2301      	movs	r3, #1
 8001718:	e000      	b.n	800171c <HAL_GPIO_Init+0x21c>
 800171a:	2300      	movs	r3, #0
 800171c:	69fa      	ldr	r2, [r7, #28]
 800171e:	f002 0203 	and.w	r2, r2, #3
 8001722:	0092      	lsls	r2, r2, #2
 8001724:	4093      	lsls	r3, r2
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4313      	orrs	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800172c:	4934      	ldr	r1, [pc, #208]	; (8001800 <HAL_GPIO_Init+0x300>)
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	089b      	lsrs	r3, r3, #2
 8001732:	3302      	adds	r3, #2
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800173a:	4b39      	ldr	r3, [pc, #228]	; (8001820 <HAL_GPIO_Init+0x320>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	43db      	mvns	r3, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4013      	ands	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800175e:	4a30      	ldr	r2, [pc, #192]	; (8001820 <HAL_GPIO_Init+0x320>)
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001764:	4b2e      	ldr	r3, [pc, #184]	; (8001820 <HAL_GPIO_Init+0x320>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d003      	beq.n	8001788 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	4313      	orrs	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001788:	4a25      	ldr	r2, [pc, #148]	; (8001820 <HAL_GPIO_Init+0x320>)
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800178e:	4b24      	ldr	r3, [pc, #144]	; (8001820 <HAL_GPIO_Init+0x320>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	43db      	mvns	r3, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4013      	ands	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017b2:	4a1b      	ldr	r2, [pc, #108]	; (8001820 <HAL_GPIO_Init+0x320>)
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017b8:	4b19      	ldr	r3, [pc, #100]	; (8001820 <HAL_GPIO_Init+0x320>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	4313      	orrs	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017dc:	4a10      	ldr	r2, [pc, #64]	; (8001820 <HAL_GPIO_Init+0x320>)
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3301      	adds	r3, #1
 80017e6:	61fb      	str	r3, [r7, #28]
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	2b0f      	cmp	r3, #15
 80017ec:	f67f ae96 	bls.w	800151c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017f0:	bf00      	nop
 80017f2:	3724      	adds	r7, #36	; 0x24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	40023800 	.word	0x40023800
 8001800:	40013800 	.word	0x40013800
 8001804:	40020000 	.word	0x40020000
 8001808:	40020400 	.word	0x40020400
 800180c:	40020800 	.word	0x40020800
 8001810:	40020c00 	.word	0x40020c00
 8001814:	40021000 	.word	0x40021000
 8001818:	40021400 	.word	0x40021400
 800181c:	40021800 	.word	0x40021800
 8001820:	40013c00 	.word	0x40013c00

08001824 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	4b20      	ldr	r3, [pc, #128]	; (80018b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	4a1f      	ldr	r2, [pc, #124]	; (80018b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183c:	6413      	str	r3, [r2, #64]	; 0x40
 800183e:	4b1d      	ldr	r3, [pc, #116]	; (80018b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800184a:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <HAL_PWREx_EnableOverDrive+0x94>)
 800184c:	2201      	movs	r2, #1
 800184e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001850:	f7fe febe 	bl	80005d0 <HAL_GetTick>
 8001854:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001856:	e009      	b.n	800186c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001858:	f7fe feba 	bl	80005d0 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001866:	d901      	bls.n	800186c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e01f      	b.n	80018ac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800186c:	4b13      	ldr	r3, [pc, #76]	; (80018bc <HAL_PWREx_EnableOverDrive+0x98>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001878:	d1ee      	bne.n	8001858 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800187a:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800187c:	2201      	movs	r2, #1
 800187e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001880:	f7fe fea6 	bl	80005d0 <HAL_GetTick>
 8001884:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001886:	e009      	b.n	800189c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001888:	f7fe fea2 	bl	80005d0 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001896:	d901      	bls.n	800189c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e007      	b.n	80018ac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800189c:	4b07      	ldr	r3, [pc, #28]	; (80018bc <HAL_PWREx_EnableOverDrive+0x98>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80018a8:	d1ee      	bne.n	8001888 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40023800 	.word	0x40023800
 80018b8:	420e0040 	.word	0x420e0040
 80018bc:	40007000 	.word	0x40007000
 80018c0:	420e0044 	.word	0x420e0044

080018c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e0ca      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018d8:	4b67      	ldr	r3, [pc, #412]	; (8001a78 <HAL_RCC_ClockConfig+0x1b4>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 030f 	and.w	r3, r3, #15
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d90c      	bls.n	8001900 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e6:	4b64      	ldr	r3, [pc, #400]	; (8001a78 <HAL_RCC_ClockConfig+0x1b4>)
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	b2d2      	uxtb	r2, r2
 80018ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ee:	4b62      	ldr	r3, [pc, #392]	; (8001a78 <HAL_RCC_ClockConfig+0x1b4>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d001      	beq.n	8001900 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e0b6      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0302 	and.w	r3, r3, #2
 8001908:	2b00      	cmp	r3, #0
 800190a:	d020      	beq.n	800194e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	2b00      	cmp	r3, #0
 8001916:	d005      	beq.n	8001924 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001918:	4b58      	ldr	r3, [pc, #352]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	4a57      	ldr	r2, [pc, #348]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 800191e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001922:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0308 	and.w	r3, r3, #8
 800192c:	2b00      	cmp	r3, #0
 800192e:	d005      	beq.n	800193c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001930:	4b52      	ldr	r3, [pc, #328]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4a51      	ldr	r2, [pc, #324]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 8001936:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800193a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800193c:	4b4f      	ldr	r3, [pc, #316]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	494c      	ldr	r1, [pc, #304]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 800194a:	4313      	orrs	r3, r2
 800194c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	2b00      	cmp	r3, #0
 8001958:	d044      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d107      	bne.n	8001972 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001962:	4b46      	ldr	r3, [pc, #280]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d119      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e07d      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b02      	cmp	r3, #2
 8001978:	d003      	beq.n	8001982 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800197e:	2b03      	cmp	r3, #3
 8001980:	d107      	bne.n	8001992 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001982:	4b3e      	ldr	r3, [pc, #248]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d109      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e06d      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001992:	4b3a      	ldr	r3, [pc, #232]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e065      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019a2:	4b36      	ldr	r3, [pc, #216]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f023 0203 	bic.w	r2, r3, #3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	4933      	ldr	r1, [pc, #204]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019b4:	f7fe fe0c 	bl	80005d0 <HAL_GetTick>
 80019b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ba:	e00a      	b.n	80019d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019bc:	f7fe fe08 	bl	80005d0 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e04d      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d2:	4b2a      	ldr	r3, [pc, #168]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 020c 	and.w	r2, r3, #12
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d1eb      	bne.n	80019bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019e4:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <HAL_RCC_ClockConfig+0x1b4>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 030f 	and.w	r3, r3, #15
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d20c      	bcs.n	8001a0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f2:	4b21      	ldr	r3, [pc, #132]	; (8001a78 <HAL_RCC_ClockConfig+0x1b4>)
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fa:	4b1f      	ldr	r3, [pc, #124]	; (8001a78 <HAL_RCC_ClockConfig+0x1b4>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d001      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e030      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d008      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a18:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	4915      	ldr	r1, [pc, #84]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d009      	beq.n	8001a4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a36:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	490d      	ldr	r1, [pc, #52]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a4a:	f000 f851 	bl	8001af0 <HAL_RCC_GetSysClockFreq>
 8001a4e:	4601      	mov	r1, r0
 8001a50:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <HAL_RCC_ClockConfig+0x1b8>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	091b      	lsrs	r3, r3, #4
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	4a09      	ldr	r2, [pc, #36]	; (8001a80 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5c:	5cd3      	ldrb	r3, [r2, r3]
 8001a5e:	fa21 f303 	lsr.w	r3, r1, r3
 8001a62:	4a08      	ldr	r2, [pc, #32]	; (8001a84 <HAL_RCC_ClockConfig+0x1c0>)
 8001a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a66:	2000      	movs	r0, #0
 8001a68:	f7fe fd6e 	bl	8000548 <HAL_InitTick>

  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40023c00 	.word	0x40023c00
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	08003388 	.word	0x08003388
 8001a84:	20000008 	.word	0x20000008

08001a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a8c:	4b03      	ldr	r3, [pc, #12]	; (8001a9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20000008 	.word	0x20000008

08001aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001aa4:	f7ff fff0 	bl	8001a88 <HAL_RCC_GetHCLKFreq>
 8001aa8:	4601      	mov	r1, r0
 8001aaa:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	0a9b      	lsrs	r3, r3, #10
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	4a03      	ldr	r2, [pc, #12]	; (8001ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ab6:	5cd3      	ldrb	r3, [r2, r3]
 8001ab8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	08003398 	.word	0x08003398

08001ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001acc:	f7ff ffdc 	bl	8001a88 <HAL_RCC_GetHCLKFreq>
 8001ad0:	4601      	mov	r1, r0
 8001ad2:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	0b5b      	lsrs	r3, r3, #13
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	4a03      	ldr	r2, [pc, #12]	; (8001aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ade:	5cd3      	ldrb	r3, [r2, r3]
 8001ae0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	08003398 	.word	0x08003398

08001af0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001af2:	b087      	sub	sp, #28
 8001af4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b0a:	4bc6      	ldr	r3, [pc, #792]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x334>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	2b0c      	cmp	r3, #12
 8001b14:	f200 817e 	bhi.w	8001e14 <HAL_RCC_GetSysClockFreq+0x324>
 8001b18:	a201      	add	r2, pc, #4	; (adr r2, 8001b20 <HAL_RCC_GetSysClockFreq+0x30>)
 8001b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1e:	bf00      	nop
 8001b20:	08001b55 	.word	0x08001b55
 8001b24:	08001e15 	.word	0x08001e15
 8001b28:	08001e15 	.word	0x08001e15
 8001b2c:	08001e15 	.word	0x08001e15
 8001b30:	08001b5b 	.word	0x08001b5b
 8001b34:	08001e15 	.word	0x08001e15
 8001b38:	08001e15 	.word	0x08001e15
 8001b3c:	08001e15 	.word	0x08001e15
 8001b40:	08001b61 	.word	0x08001b61
 8001b44:	08001e15 	.word	0x08001e15
 8001b48:	08001e15 	.word	0x08001e15
 8001b4c:	08001e15 	.word	0x08001e15
 8001b50:	08001cbd 	.word	0x08001cbd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b54:	4bb4      	ldr	r3, [pc, #720]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x338>)
 8001b56:	613b      	str	r3, [r7, #16]
       break;
 8001b58:	e15f      	b.n	8001e1a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b5a:	4bb3      	ldr	r3, [pc, #716]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x338>)
 8001b5c:	613b      	str	r3, [r7, #16]
      break;
 8001b5e:	e15c      	b.n	8001e1a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b60:	4bb0      	ldr	r3, [pc, #704]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x334>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b68:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b6a:	4bae      	ldr	r3, [pc, #696]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x334>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d04a      	beq.n	8001c0c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b76:	4bab      	ldr	r3, [pc, #684]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x334>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	099b      	lsrs	r3, r3, #6
 8001b7c:	f04f 0400 	mov.w	r4, #0
 8001b80:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	ea03 0501 	and.w	r5, r3, r1
 8001b8c:	ea04 0602 	and.w	r6, r4, r2
 8001b90:	4629      	mov	r1, r5
 8001b92:	4632      	mov	r2, r6
 8001b94:	f04f 0300 	mov.w	r3, #0
 8001b98:	f04f 0400 	mov.w	r4, #0
 8001b9c:	0154      	lsls	r4, r2, #5
 8001b9e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ba2:	014b      	lsls	r3, r1, #5
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4622      	mov	r2, r4
 8001ba8:	1b49      	subs	r1, r1, r5
 8001baa:	eb62 0206 	sbc.w	r2, r2, r6
 8001bae:	f04f 0300 	mov.w	r3, #0
 8001bb2:	f04f 0400 	mov.w	r4, #0
 8001bb6:	0194      	lsls	r4, r2, #6
 8001bb8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001bbc:	018b      	lsls	r3, r1, #6
 8001bbe:	1a5b      	subs	r3, r3, r1
 8001bc0:	eb64 0402 	sbc.w	r4, r4, r2
 8001bc4:	f04f 0100 	mov.w	r1, #0
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	00e2      	lsls	r2, r4, #3
 8001bce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001bd2:	00d9      	lsls	r1, r3, #3
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4614      	mov	r4, r2
 8001bd8:	195b      	adds	r3, r3, r5
 8001bda:	eb44 0406 	adc.w	r4, r4, r6
 8001bde:	f04f 0100 	mov.w	r1, #0
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	02a2      	lsls	r2, r4, #10
 8001be8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001bec:	0299      	lsls	r1, r3, #10
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4614      	mov	r4, r2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	4621      	mov	r1, r4
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f04f 0400 	mov.w	r4, #0
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4623      	mov	r3, r4
 8001c00:	f7fe fb00 	bl	8000204 <__aeabi_uldivmod>
 8001c04:	4603      	mov	r3, r0
 8001c06:	460c      	mov	r4, r1
 8001c08:	617b      	str	r3, [r7, #20]
 8001c0a:	e049      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c0c:	4b85      	ldr	r3, [pc, #532]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x334>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	099b      	lsrs	r3, r3, #6
 8001c12:	f04f 0400 	mov.w	r4, #0
 8001c16:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	ea03 0501 	and.w	r5, r3, r1
 8001c22:	ea04 0602 	and.w	r6, r4, r2
 8001c26:	4629      	mov	r1, r5
 8001c28:	4632      	mov	r2, r6
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	f04f 0400 	mov.w	r4, #0
 8001c32:	0154      	lsls	r4, r2, #5
 8001c34:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c38:	014b      	lsls	r3, r1, #5
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4622      	mov	r2, r4
 8001c3e:	1b49      	subs	r1, r1, r5
 8001c40:	eb62 0206 	sbc.w	r2, r2, r6
 8001c44:	f04f 0300 	mov.w	r3, #0
 8001c48:	f04f 0400 	mov.w	r4, #0
 8001c4c:	0194      	lsls	r4, r2, #6
 8001c4e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c52:	018b      	lsls	r3, r1, #6
 8001c54:	1a5b      	subs	r3, r3, r1
 8001c56:	eb64 0402 	sbc.w	r4, r4, r2
 8001c5a:	f04f 0100 	mov.w	r1, #0
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	00e2      	lsls	r2, r4, #3
 8001c64:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c68:	00d9      	lsls	r1, r3, #3
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	4614      	mov	r4, r2
 8001c6e:	195b      	adds	r3, r3, r5
 8001c70:	eb44 0406 	adc.w	r4, r4, r6
 8001c74:	f04f 0100 	mov.w	r1, #0
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	02a2      	lsls	r2, r4, #10
 8001c7e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001c82:	0299      	lsls	r1, r3, #10
 8001c84:	460b      	mov	r3, r1
 8001c86:	4614      	mov	r4, r2
 8001c88:	4618      	mov	r0, r3
 8001c8a:	4621      	mov	r1, r4
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f04f 0400 	mov.w	r4, #0
 8001c92:	461a      	mov	r2, r3
 8001c94:	4623      	mov	r3, r4
 8001c96:	f7fe fab5 	bl	8000204 <__aeabi_uldivmod>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	460c      	mov	r4, r1
 8001c9e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ca0:	4b60      	ldr	r3, [pc, #384]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x334>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	0c1b      	lsrs	r3, r3, #16
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	3301      	adds	r3, #1
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb8:	613b      	str	r3, [r7, #16]
      break;
 8001cba:	e0ae      	b.n	8001e1a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cbc:	4b59      	ldr	r3, [pc, #356]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x334>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cc4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cc6:	4b57      	ldr	r3, [pc, #348]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x334>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d04a      	beq.n	8001d68 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cd2:	4b54      	ldr	r3, [pc, #336]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x334>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	099b      	lsrs	r3, r3, #6
 8001cd8:	f04f 0400 	mov.w	r4, #0
 8001cdc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	ea03 0501 	and.w	r5, r3, r1
 8001ce8:	ea04 0602 	and.w	r6, r4, r2
 8001cec:	4629      	mov	r1, r5
 8001cee:	4632      	mov	r2, r6
 8001cf0:	f04f 0300 	mov.w	r3, #0
 8001cf4:	f04f 0400 	mov.w	r4, #0
 8001cf8:	0154      	lsls	r4, r2, #5
 8001cfa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cfe:	014b      	lsls	r3, r1, #5
 8001d00:	4619      	mov	r1, r3
 8001d02:	4622      	mov	r2, r4
 8001d04:	1b49      	subs	r1, r1, r5
 8001d06:	eb62 0206 	sbc.w	r2, r2, r6
 8001d0a:	f04f 0300 	mov.w	r3, #0
 8001d0e:	f04f 0400 	mov.w	r4, #0
 8001d12:	0194      	lsls	r4, r2, #6
 8001d14:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d18:	018b      	lsls	r3, r1, #6
 8001d1a:	1a5b      	subs	r3, r3, r1
 8001d1c:	eb64 0402 	sbc.w	r4, r4, r2
 8001d20:	f04f 0100 	mov.w	r1, #0
 8001d24:	f04f 0200 	mov.w	r2, #0
 8001d28:	00e2      	lsls	r2, r4, #3
 8001d2a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d2e:	00d9      	lsls	r1, r3, #3
 8001d30:	460b      	mov	r3, r1
 8001d32:	4614      	mov	r4, r2
 8001d34:	195b      	adds	r3, r3, r5
 8001d36:	eb44 0406 	adc.w	r4, r4, r6
 8001d3a:	f04f 0100 	mov.w	r1, #0
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	02a2      	lsls	r2, r4, #10
 8001d44:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001d48:	0299      	lsls	r1, r3, #10
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4614      	mov	r4, r2
 8001d4e:	4618      	mov	r0, r3
 8001d50:	4621      	mov	r1, r4
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f04f 0400 	mov.w	r4, #0
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4623      	mov	r3, r4
 8001d5c:	f7fe fa52 	bl	8000204 <__aeabi_uldivmod>
 8001d60:	4603      	mov	r3, r0
 8001d62:	460c      	mov	r4, r1
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	e049      	b.n	8001dfc <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d68:	4b2e      	ldr	r3, [pc, #184]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x334>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	099b      	lsrs	r3, r3, #6
 8001d6e:	f04f 0400 	mov.w	r4, #0
 8001d72:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	ea03 0501 	and.w	r5, r3, r1
 8001d7e:	ea04 0602 	and.w	r6, r4, r2
 8001d82:	4629      	mov	r1, r5
 8001d84:	4632      	mov	r2, r6
 8001d86:	f04f 0300 	mov.w	r3, #0
 8001d8a:	f04f 0400 	mov.w	r4, #0
 8001d8e:	0154      	lsls	r4, r2, #5
 8001d90:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d94:	014b      	lsls	r3, r1, #5
 8001d96:	4619      	mov	r1, r3
 8001d98:	4622      	mov	r2, r4
 8001d9a:	1b49      	subs	r1, r1, r5
 8001d9c:	eb62 0206 	sbc.w	r2, r2, r6
 8001da0:	f04f 0300 	mov.w	r3, #0
 8001da4:	f04f 0400 	mov.w	r4, #0
 8001da8:	0194      	lsls	r4, r2, #6
 8001daa:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001dae:	018b      	lsls	r3, r1, #6
 8001db0:	1a5b      	subs	r3, r3, r1
 8001db2:	eb64 0402 	sbc.w	r4, r4, r2
 8001db6:	f04f 0100 	mov.w	r1, #0
 8001dba:	f04f 0200 	mov.w	r2, #0
 8001dbe:	00e2      	lsls	r2, r4, #3
 8001dc0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001dc4:	00d9      	lsls	r1, r3, #3
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4614      	mov	r4, r2
 8001dca:	195b      	adds	r3, r3, r5
 8001dcc:	eb44 0406 	adc.w	r4, r4, r6
 8001dd0:	f04f 0100 	mov.w	r1, #0
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	02a2      	lsls	r2, r4, #10
 8001dda:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001dde:	0299      	lsls	r1, r3, #10
 8001de0:	460b      	mov	r3, r1
 8001de2:	4614      	mov	r4, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	4621      	mov	r1, r4
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f04f 0400 	mov.w	r4, #0
 8001dee:	461a      	mov	r2, r3
 8001df0:	4623      	mov	r3, r4
 8001df2:	f7fe fa07 	bl	8000204 <__aeabi_uldivmod>
 8001df6:	4603      	mov	r3, r0
 8001df8:	460c      	mov	r4, r1
 8001dfa:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001dfc:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x334>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	0f1b      	lsrs	r3, r3, #28
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e10:	613b      	str	r3, [r7, #16]
      break;
 8001e12:	e002      	b.n	8001e1a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e14:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x338>)
 8001e16:	613b      	str	r3, [r7, #16]
      break;
 8001e18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e1a:	693b      	ldr	r3, [r7, #16]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	371c      	adds	r7, #28
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e24:	40023800 	.word	0x40023800
 8001e28:	00f42400 	.word	0x00f42400

08001e2c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e34:	2300      	movs	r3, #0
 8001e36:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 8083 	beq.w	8001f4c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e46:	4b95      	ldr	r3, [pc, #596]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d019      	beq.n	8001e86 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e52:	4b92      	ldr	r3, [pc, #584]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001e5a:	2b08      	cmp	r3, #8
 8001e5c:	d106      	bne.n	8001e6c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e5e:	4b8f      	ldr	r3, [pc, #572]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e6a:	d00c      	beq.n	8001e86 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e6c:	4b8b      	ldr	r3, [pc, #556]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e74:	2b0c      	cmp	r3, #12
 8001e76:	d112      	bne.n	8001e9e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e78:	4b88      	ldr	r3, [pc, #544]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e84:	d10b      	bne.n	8001e9e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e86:	4b85      	ldr	r3, [pc, #532]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d05b      	beq.n	8001f4a <HAL_RCC_OscConfig+0x11e>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d157      	bne.n	8001f4a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e216      	b.n	80022cc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ea6:	d106      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x8a>
 8001ea8:	4b7c      	ldr	r3, [pc, #496]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a7b      	ldr	r2, [pc, #492]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	e01d      	b.n	8001ef2 <HAL_RCC_OscConfig+0xc6>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ebe:	d10c      	bne.n	8001eda <HAL_RCC_OscConfig+0xae>
 8001ec0:	4b76      	ldr	r3, [pc, #472]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a75      	ldr	r2, [pc, #468]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001ec6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eca:	6013      	str	r3, [r2, #0]
 8001ecc:	4b73      	ldr	r3, [pc, #460]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a72      	ldr	r2, [pc, #456]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed6:	6013      	str	r3, [r2, #0]
 8001ed8:	e00b      	b.n	8001ef2 <HAL_RCC_OscConfig+0xc6>
 8001eda:	4b70      	ldr	r3, [pc, #448]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a6f      	ldr	r2, [pc, #444]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	4b6d      	ldr	r3, [pc, #436]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a6c      	ldr	r2, [pc, #432]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001eec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ef0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d013      	beq.n	8001f22 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efa:	f7fe fb69 	bl	80005d0 <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f02:	f7fe fb65 	bl	80005d0 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b64      	cmp	r3, #100	; 0x64
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e1db      	b.n	80022cc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f14:	4b61      	ldr	r3, [pc, #388]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0f0      	beq.n	8001f02 <HAL_RCC_OscConfig+0xd6>
 8001f20:	e014      	b.n	8001f4c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f22:	f7fe fb55 	bl	80005d0 <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f2a:	f7fe fb51 	bl	80005d0 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b64      	cmp	r3, #100	; 0x64
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e1c7      	b.n	80022cc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3c:	4b57      	ldr	r3, [pc, #348]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1f0      	bne.n	8001f2a <HAL_RCC_OscConfig+0xfe>
 8001f48:	e000      	b.n	8001f4c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f4a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d06f      	beq.n	8002038 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f58:	4b50      	ldr	r3, [pc, #320]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f003 030c 	and.w	r3, r3, #12
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d017      	beq.n	8001f94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f64:	4b4d      	ldr	r3, [pc, #308]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f6c:	2b08      	cmp	r3, #8
 8001f6e:	d105      	bne.n	8001f7c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f70:	4b4a      	ldr	r3, [pc, #296]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d00b      	beq.n	8001f94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f7c:	4b47      	ldr	r3, [pc, #284]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f84:	2b0c      	cmp	r3, #12
 8001f86:	d11c      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f88:	4b44      	ldr	r3, [pc, #272]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d116      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f94:	4b41      	ldr	r3, [pc, #260]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d005      	beq.n	8001fac <HAL_RCC_OscConfig+0x180>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d001      	beq.n	8001fac <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e18f      	b.n	80022cc <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fac:	4b3b      	ldr	r3, [pc, #236]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	4938      	ldr	r1, [pc, #224]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fc0:	e03a      	b.n	8002038 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d020      	beq.n	800200c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fca:	4b35      	ldr	r3, [pc, #212]	; (80020a0 <HAL_RCC_OscConfig+0x274>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd0:	f7fe fafe 	bl	80005d0 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fd8:	f7fe fafa 	bl	80005d0 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e170      	b.n	80022cc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fea:	4b2c      	ldr	r3, [pc, #176]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d0f0      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff6:	4b29      	ldr	r3, [pc, #164]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4925      	ldr	r1, [pc, #148]	; (800209c <HAL_RCC_OscConfig+0x270>)
 8002006:	4313      	orrs	r3, r2
 8002008:	600b      	str	r3, [r1, #0]
 800200a:	e015      	b.n	8002038 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800200c:	4b24      	ldr	r3, [pc, #144]	; (80020a0 <HAL_RCC_OscConfig+0x274>)
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002012:	f7fe fadd 	bl	80005d0 <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800201a:	f7fe fad9 	bl	80005d0 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e14f      	b.n	80022cc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800202c:	4b1b      	ldr	r3, [pc, #108]	; (800209c <HAL_RCC_OscConfig+0x270>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1f0      	bne.n	800201a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0308 	and.w	r3, r3, #8
 8002040:	2b00      	cmp	r3, #0
 8002042:	d037      	beq.n	80020b4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d016      	beq.n	800207a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800204c:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <HAL_RCC_OscConfig+0x278>)
 800204e:	2201      	movs	r2, #1
 8002050:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002052:	f7fe fabd 	bl	80005d0 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800205a:	f7fe fab9 	bl	80005d0 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e12f      	b.n	80022cc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800206c:	4b0b      	ldr	r3, [pc, #44]	; (800209c <HAL_RCC_OscConfig+0x270>)
 800206e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f0      	beq.n	800205a <HAL_RCC_OscConfig+0x22e>
 8002078:	e01c      	b.n	80020b4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800207a:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <HAL_RCC_OscConfig+0x278>)
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002080:	f7fe faa6 	bl	80005d0 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002086:	e00f      	b.n	80020a8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002088:	f7fe faa2 	bl	80005d0 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d908      	bls.n	80020a8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e118      	b.n	80022cc <HAL_RCC_OscConfig+0x4a0>
 800209a:	bf00      	nop
 800209c:	40023800 	.word	0x40023800
 80020a0:	42470000 	.word	0x42470000
 80020a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a8:	4b8a      	ldr	r3, [pc, #552]	; (80022d4 <HAL_RCC_OscConfig+0x4a8>)
 80020aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1e9      	bne.n	8002088 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 8097 	beq.w	80021f0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020c2:	2300      	movs	r3, #0
 80020c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020c6:	4b83      	ldr	r3, [pc, #524]	; (80022d4 <HAL_RCC_OscConfig+0x4a8>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d10f      	bne.n	80020f2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	4b7f      	ldr	r3, [pc, #508]	; (80022d4 <HAL_RCC_OscConfig+0x4a8>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	4a7e      	ldr	r2, [pc, #504]	; (80022d4 <HAL_RCC_OscConfig+0x4a8>)
 80020dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e0:	6413      	str	r3, [r2, #64]	; 0x40
 80020e2:	4b7c      	ldr	r3, [pc, #496]	; (80022d4 <HAL_RCC_OscConfig+0x4a8>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80020ee:	2301      	movs	r3, #1
 80020f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f2:	4b79      	ldr	r3, [pc, #484]	; (80022d8 <HAL_RCC_OscConfig+0x4ac>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d118      	bne.n	8002130 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020fe:	4b76      	ldr	r3, [pc, #472]	; (80022d8 <HAL_RCC_OscConfig+0x4ac>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a75      	ldr	r2, [pc, #468]	; (80022d8 <HAL_RCC_OscConfig+0x4ac>)
 8002104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800210a:	f7fe fa61 	bl	80005d0 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002112:	f7fe fa5d 	bl	80005d0 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e0d3      	b.n	80022cc <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002124:	4b6c      	ldr	r3, [pc, #432]	; (80022d8 <HAL_RCC_OscConfig+0x4ac>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0f0      	beq.n	8002112 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	2b01      	cmp	r3, #1
 8002136:	d106      	bne.n	8002146 <HAL_RCC_OscConfig+0x31a>
 8002138:	4b66      	ldr	r3, [pc, #408]	; (80022d4 <HAL_RCC_OscConfig+0x4a8>)
 800213a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213c:	4a65      	ldr	r2, [pc, #404]	; (80022d4 <HAL_RCC_OscConfig+0x4a8>)
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	6713      	str	r3, [r2, #112]	; 0x70
 8002144:	e01c      	b.n	8002180 <HAL_RCC_OscConfig+0x354>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	2b05      	cmp	r3, #5
 800214c:	d10c      	bne.n	8002168 <HAL_RCC_OscConfig+0x33c>
 800214e:	4b61      	ldr	r3, [pc, #388]	; (80022d4 <HAL_RCC_OscConfig+0x4a8>)
 8002150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002152:	4a60      	ldr	r2, [pc, #384]	; (80022d4 <HAL_RCC_OscConfig+0x4a8>)
 8002154:	f043 0304 	orr.w	r3, r3, #4
 8002158:	6713      	str	r3, [r2, #112]	; 0x70
 800215a:	4b5e      	ldr	r3, [pc, #376]	; (80022d4 <HAL_RCC_OscConfig+0x4a8>)
 800215c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215e:	4a5d      	ldr	r2, [pc, #372]	; (80022d4 <HAL_RCC_OscConfig+0x4a8>)
 8002160:	f043 0301 	orr.w	r3, r3, #1
 8002164:	6713      	str	r3, [r2, #112]	; 0x70
 8002166:	e00b      	b.n	8002180 <HAL_RCC_OscConfig+0x354>
 8002168:	4b5a      	ldr	r3, [pc, #360]	; (80022d4 <HAL_RCC_OscConfig+0x4a8>)
 800216a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216c:	4a59      	ldr	r2, [pc, #356]	; (80022d4 <HAL_RCC_OscConfig+0x4a8>)
 800216e:	f023 0301 	bic.w	r3, r3, #1
 8002172:	6713      	str	r3, [r2, #112]	; 0x70
 8002174:	4b57      	ldr	r3, [pc, #348]	; (80022d4 <HAL_RCC_OscConfig+0x4a8>)
 8002176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002178:	4a56      	ldr	r2, [pc, #344]	; (80022d4 <HAL_RCC_OscConfig+0x4a8>)
 800217a:	f023 0304 	bic.w	r3, r3, #4
 800217e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d015      	beq.n	80021b4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002188:	f7fe fa22 	bl	80005d0 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218e:	e00a      	b.n	80021a6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002190:	f7fe fa1e 	bl	80005d0 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	f241 3288 	movw	r2, #5000	; 0x1388
 800219e:	4293      	cmp	r3, r2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e092      	b.n	80022cc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a6:	4b4b      	ldr	r3, [pc, #300]	; (80022d4 <HAL_RCC_OscConfig+0x4a8>)
 80021a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0ee      	beq.n	8002190 <HAL_RCC_OscConfig+0x364>
 80021b2:	e014      	b.n	80021de <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b4:	f7fe fa0c 	bl	80005d0 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ba:	e00a      	b.n	80021d2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021bc:	f7fe fa08 	bl	80005d0 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e07c      	b.n	80022cc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d2:	4b40      	ldr	r3, [pc, #256]	; (80022d4 <HAL_RCC_OscConfig+0x4a8>)
 80021d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1ee      	bne.n	80021bc <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021de:	7dfb      	ldrb	r3, [r7, #23]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d105      	bne.n	80021f0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e4:	4b3b      	ldr	r3, [pc, #236]	; (80022d4 <HAL_RCC_OscConfig+0x4a8>)
 80021e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e8:	4a3a      	ldr	r2, [pc, #232]	; (80022d4 <HAL_RCC_OscConfig+0x4a8>)
 80021ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d068      	beq.n	80022ca <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021f8:	4b36      	ldr	r3, [pc, #216]	; (80022d4 <HAL_RCC_OscConfig+0x4a8>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 030c 	and.w	r3, r3, #12
 8002200:	2b08      	cmp	r3, #8
 8002202:	d060      	beq.n	80022c6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d145      	bne.n	8002298 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800220c:	4b33      	ldr	r3, [pc, #204]	; (80022dc <HAL_RCC_OscConfig+0x4b0>)
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002212:	f7fe f9dd 	bl	80005d0 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800221a:	f7fe f9d9 	bl	80005d0 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e04f      	b.n	80022cc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800222c:	4b29      	ldr	r3, [pc, #164]	; (80022d4 <HAL_RCC_OscConfig+0x4a8>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1f0      	bne.n	800221a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69da      	ldr	r2, [r3, #28]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	431a      	orrs	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	019b      	lsls	r3, r3, #6
 8002248:	431a      	orrs	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224e:	085b      	lsrs	r3, r3, #1
 8002250:	3b01      	subs	r3, #1
 8002252:	041b      	lsls	r3, r3, #16
 8002254:	431a      	orrs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225a:	061b      	lsls	r3, r3, #24
 800225c:	431a      	orrs	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	071b      	lsls	r3, r3, #28
 8002264:	491b      	ldr	r1, [pc, #108]	; (80022d4 <HAL_RCC_OscConfig+0x4a8>)
 8002266:	4313      	orrs	r3, r2
 8002268:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800226a:	4b1c      	ldr	r3, [pc, #112]	; (80022dc <HAL_RCC_OscConfig+0x4b0>)
 800226c:	2201      	movs	r2, #1
 800226e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002270:	f7fe f9ae 	bl	80005d0 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002278:	f7fe f9aa 	bl	80005d0 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e020      	b.n	80022cc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800228a:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <HAL_RCC_OscConfig+0x4a8>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0f0      	beq.n	8002278 <HAL_RCC_OscConfig+0x44c>
 8002296:	e018      	b.n	80022ca <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002298:	4b10      	ldr	r3, [pc, #64]	; (80022dc <HAL_RCC_OscConfig+0x4b0>)
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229e:	f7fe f997 	bl	80005d0 <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022a6:	f7fe f993 	bl	80005d0 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e009      	b.n	80022cc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <HAL_RCC_OscConfig+0x4a8>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1f0      	bne.n	80022a6 <HAL_RCC_OscConfig+0x47a>
 80022c4:	e001      	b.n	80022ca <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e000      	b.n	80022cc <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40007000 	.word	0x40007000
 80022dc:	42470060 	.word	0x42470060

080022e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e01d      	b.n	800232e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d106      	bne.n	800230c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 fe9c 	bl	8003044 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2202      	movs	r2, #2
 8002310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3304      	adds	r3, #4
 800231c:	4619      	mov	r1, r3
 800231e:	4610      	mov	r0, r2
 8002320:	f000 f80a 	bl	8002338 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a40      	ldr	r2, [pc, #256]	; (800244c <TIM_Base_SetConfig+0x114>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d013      	beq.n	8002378 <TIM_Base_SetConfig+0x40>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002356:	d00f      	beq.n	8002378 <TIM_Base_SetConfig+0x40>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a3d      	ldr	r2, [pc, #244]	; (8002450 <TIM_Base_SetConfig+0x118>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d00b      	beq.n	8002378 <TIM_Base_SetConfig+0x40>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a3c      	ldr	r2, [pc, #240]	; (8002454 <TIM_Base_SetConfig+0x11c>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d007      	beq.n	8002378 <TIM_Base_SetConfig+0x40>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a3b      	ldr	r2, [pc, #236]	; (8002458 <TIM_Base_SetConfig+0x120>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d003      	beq.n	8002378 <TIM_Base_SetConfig+0x40>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a3a      	ldr	r2, [pc, #232]	; (800245c <TIM_Base_SetConfig+0x124>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d108      	bne.n	800238a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800237e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	4313      	orrs	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a2f      	ldr	r2, [pc, #188]	; (800244c <TIM_Base_SetConfig+0x114>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d02b      	beq.n	80023ea <TIM_Base_SetConfig+0xb2>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002398:	d027      	beq.n	80023ea <TIM_Base_SetConfig+0xb2>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a2c      	ldr	r2, [pc, #176]	; (8002450 <TIM_Base_SetConfig+0x118>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d023      	beq.n	80023ea <TIM_Base_SetConfig+0xb2>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a2b      	ldr	r2, [pc, #172]	; (8002454 <TIM_Base_SetConfig+0x11c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d01f      	beq.n	80023ea <TIM_Base_SetConfig+0xb2>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a2a      	ldr	r2, [pc, #168]	; (8002458 <TIM_Base_SetConfig+0x120>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d01b      	beq.n	80023ea <TIM_Base_SetConfig+0xb2>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a29      	ldr	r2, [pc, #164]	; (800245c <TIM_Base_SetConfig+0x124>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d017      	beq.n	80023ea <TIM_Base_SetConfig+0xb2>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a28      	ldr	r2, [pc, #160]	; (8002460 <TIM_Base_SetConfig+0x128>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d013      	beq.n	80023ea <TIM_Base_SetConfig+0xb2>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a27      	ldr	r2, [pc, #156]	; (8002464 <TIM_Base_SetConfig+0x12c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d00f      	beq.n	80023ea <TIM_Base_SetConfig+0xb2>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a26      	ldr	r2, [pc, #152]	; (8002468 <TIM_Base_SetConfig+0x130>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d00b      	beq.n	80023ea <TIM_Base_SetConfig+0xb2>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a25      	ldr	r2, [pc, #148]	; (800246c <TIM_Base_SetConfig+0x134>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d007      	beq.n	80023ea <TIM_Base_SetConfig+0xb2>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a24      	ldr	r2, [pc, #144]	; (8002470 <TIM_Base_SetConfig+0x138>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d003      	beq.n	80023ea <TIM_Base_SetConfig+0xb2>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a23      	ldr	r2, [pc, #140]	; (8002474 <TIM_Base_SetConfig+0x13c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d108      	bne.n	80023fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	4313      	orrs	r3, r2
 8002408:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	68fa      	ldr	r2, [r7, #12]
 800240e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a0a      	ldr	r2, [pc, #40]	; (800244c <TIM_Base_SetConfig+0x114>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d003      	beq.n	8002430 <TIM_Base_SetConfig+0xf8>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a0c      	ldr	r2, [pc, #48]	; (800245c <TIM_Base_SetConfig+0x124>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d103      	bne.n	8002438 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	691a      	ldr	r2, [r3, #16]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	615a      	str	r2, [r3, #20]
}
 800243e:	bf00      	nop
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40010000 	.word	0x40010000
 8002450:	40000400 	.word	0x40000400
 8002454:	40000800 	.word	0x40000800
 8002458:	40000c00 	.word	0x40000c00
 800245c:	40010400 	.word	0x40010400
 8002460:	40014000 	.word	0x40014000
 8002464:	40014400 	.word	0x40014400
 8002468:	40014800 	.word	0x40014800
 800246c:	40001800 	.word	0x40001800
 8002470:	40001c00 	.word	0x40001c00
 8002474:	40002000 	.word	0x40002000

08002478 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002488:	2b01      	cmp	r3, #1
 800248a:	d101      	bne.n	8002490 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800248c:	2302      	movs	r3, #2
 800248e:	e032      	b.n	80024f6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2202      	movs	r2, #2
 800249c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	4313      	orrs	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024c8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68ba      	ldr	r2, [r7, #8]
 80024e2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d101      	bne.n	8002514 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e03f      	b.n	8002594 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b00      	cmp	r3, #0
 800251e:	d106      	bne.n	800252e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 fdc3 	bl	80030b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2224      	movs	r2, #36	; 0x24
 8002532:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68da      	ldr	r2, [r3, #12]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002544:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f828 	bl	800259c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691a      	ldr	r2, [r3, #16]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800255a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695a      	ldr	r2, [r3, #20]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800256a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800257a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2220      	movs	r2, #32
 8002586:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2220      	movs	r2, #32
 800258e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800259c:	b5b0      	push	{r4, r5, r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689a      	ldr	r2, [r3, #8]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691b      	ldr	r3, [r3, #16]
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	431a      	orrs	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80025dc:	f023 030c 	bic.w	r3, r3, #12
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	68f9      	ldr	r1, [r7, #12]
 80025e6:	430b      	orrs	r3, r1
 80025e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	699a      	ldr	r2, [r3, #24]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	430a      	orrs	r2, r1
 80025fe:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002608:	f040 80e4 	bne.w	80027d4 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4aab      	ldr	r2, [pc, #684]	; (80028c0 <UART_SetConfig+0x324>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d004      	beq.n	8002620 <UART_SetConfig+0x84>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4aaa      	ldr	r2, [pc, #680]	; (80028c4 <UART_SetConfig+0x328>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d16c      	bne.n	80026fa <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002620:	f7ff fa52 	bl	8001ac8 <HAL_RCC_GetPCLK2Freq>
 8002624:	4602      	mov	r2, r0
 8002626:	4613      	mov	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	009a      	lsls	r2, r3, #2
 800262e:	441a      	add	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	fbb2 f3f3 	udiv	r3, r2, r3
 800263a:	4aa3      	ldr	r2, [pc, #652]	; (80028c8 <UART_SetConfig+0x32c>)
 800263c:	fba2 2303 	umull	r2, r3, r2, r3
 8002640:	095b      	lsrs	r3, r3, #5
 8002642:	011c      	lsls	r4, r3, #4
 8002644:	f7ff fa40 	bl	8001ac8 <HAL_RCC_GetPCLK2Freq>
 8002648:	4602      	mov	r2, r0
 800264a:	4613      	mov	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4413      	add	r3, r2
 8002650:	009a      	lsls	r2, r3, #2
 8002652:	441a      	add	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	fbb2 f5f3 	udiv	r5, r2, r3
 800265e:	f7ff fa33 	bl	8001ac8 <HAL_RCC_GetPCLK2Freq>
 8002662:	4602      	mov	r2, r0
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	009a      	lsls	r2, r3, #2
 800266c:	441a      	add	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	fbb2 f3f3 	udiv	r3, r2, r3
 8002678:	4a93      	ldr	r2, [pc, #588]	; (80028c8 <UART_SetConfig+0x32c>)
 800267a:	fba2 2303 	umull	r2, r3, r2, r3
 800267e:	095b      	lsrs	r3, r3, #5
 8002680:	2264      	movs	r2, #100	; 0x64
 8002682:	fb02 f303 	mul.w	r3, r2, r3
 8002686:	1aeb      	subs	r3, r5, r3
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	3332      	adds	r3, #50	; 0x32
 800268c:	4a8e      	ldr	r2, [pc, #568]	; (80028c8 <UART_SetConfig+0x32c>)
 800268e:	fba2 2303 	umull	r2, r3, r2, r3
 8002692:	095b      	lsrs	r3, r3, #5
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800269a:	441c      	add	r4, r3
 800269c:	f7ff fa14 	bl	8001ac8 <HAL_RCC_GetPCLK2Freq>
 80026a0:	4602      	mov	r2, r0
 80026a2:	4613      	mov	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	009a      	lsls	r2, r3, #2
 80026aa:	441a      	add	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	fbb2 f5f3 	udiv	r5, r2, r3
 80026b6:	f7ff fa07 	bl	8001ac8 <HAL_RCC_GetPCLK2Freq>
 80026ba:	4602      	mov	r2, r0
 80026bc:	4613      	mov	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4413      	add	r3, r2
 80026c2:	009a      	lsls	r2, r3, #2
 80026c4:	441a      	add	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d0:	4a7d      	ldr	r2, [pc, #500]	; (80028c8 <UART_SetConfig+0x32c>)
 80026d2:	fba2 2303 	umull	r2, r3, r2, r3
 80026d6:	095b      	lsrs	r3, r3, #5
 80026d8:	2264      	movs	r2, #100	; 0x64
 80026da:	fb02 f303 	mul.w	r3, r2, r3
 80026de:	1aeb      	subs	r3, r5, r3
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	3332      	adds	r3, #50	; 0x32
 80026e4:	4a78      	ldr	r2, [pc, #480]	; (80028c8 <UART_SetConfig+0x32c>)
 80026e6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	f003 0207 	and.w	r2, r3, #7
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4422      	add	r2, r4
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	e154      	b.n	80029a4 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80026fa:	f7ff f9d1 	bl	8001aa0 <HAL_RCC_GetPCLK1Freq>
 80026fe:	4602      	mov	r2, r0
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	009a      	lsls	r2, r3, #2
 8002708:	441a      	add	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	fbb2 f3f3 	udiv	r3, r2, r3
 8002714:	4a6c      	ldr	r2, [pc, #432]	; (80028c8 <UART_SetConfig+0x32c>)
 8002716:	fba2 2303 	umull	r2, r3, r2, r3
 800271a:	095b      	lsrs	r3, r3, #5
 800271c:	011c      	lsls	r4, r3, #4
 800271e:	f7ff f9bf 	bl	8001aa0 <HAL_RCC_GetPCLK1Freq>
 8002722:	4602      	mov	r2, r0
 8002724:	4613      	mov	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	009a      	lsls	r2, r3, #2
 800272c:	441a      	add	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	fbb2 f5f3 	udiv	r5, r2, r3
 8002738:	f7ff f9b2 	bl	8001aa0 <HAL_RCC_GetPCLK1Freq>
 800273c:	4602      	mov	r2, r0
 800273e:	4613      	mov	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	009a      	lsls	r2, r3, #2
 8002746:	441a      	add	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002752:	4a5d      	ldr	r2, [pc, #372]	; (80028c8 <UART_SetConfig+0x32c>)
 8002754:	fba2 2303 	umull	r2, r3, r2, r3
 8002758:	095b      	lsrs	r3, r3, #5
 800275a:	2264      	movs	r2, #100	; 0x64
 800275c:	fb02 f303 	mul.w	r3, r2, r3
 8002760:	1aeb      	subs	r3, r5, r3
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	3332      	adds	r3, #50	; 0x32
 8002766:	4a58      	ldr	r2, [pc, #352]	; (80028c8 <UART_SetConfig+0x32c>)
 8002768:	fba2 2303 	umull	r2, r3, r2, r3
 800276c:	095b      	lsrs	r3, r3, #5
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002774:	441c      	add	r4, r3
 8002776:	f7ff f993 	bl	8001aa0 <HAL_RCC_GetPCLK1Freq>
 800277a:	4602      	mov	r2, r0
 800277c:	4613      	mov	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	4413      	add	r3, r2
 8002782:	009a      	lsls	r2, r3, #2
 8002784:	441a      	add	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	fbb2 f5f3 	udiv	r5, r2, r3
 8002790:	f7ff f986 	bl	8001aa0 <HAL_RCC_GetPCLK1Freq>
 8002794:	4602      	mov	r2, r0
 8002796:	4613      	mov	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	009a      	lsls	r2, r3, #2
 800279e:	441a      	add	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027aa:	4a47      	ldr	r2, [pc, #284]	; (80028c8 <UART_SetConfig+0x32c>)
 80027ac:	fba2 2303 	umull	r2, r3, r2, r3
 80027b0:	095b      	lsrs	r3, r3, #5
 80027b2:	2264      	movs	r2, #100	; 0x64
 80027b4:	fb02 f303 	mul.w	r3, r2, r3
 80027b8:	1aeb      	subs	r3, r5, r3
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	3332      	adds	r3, #50	; 0x32
 80027be:	4a42      	ldr	r2, [pc, #264]	; (80028c8 <UART_SetConfig+0x32c>)
 80027c0:	fba2 2303 	umull	r2, r3, r2, r3
 80027c4:	095b      	lsrs	r3, r3, #5
 80027c6:	f003 0207 	and.w	r2, r3, #7
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4422      	add	r2, r4
 80027d0:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80027d2:	e0e7      	b.n	80029a4 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a39      	ldr	r2, [pc, #228]	; (80028c0 <UART_SetConfig+0x324>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d004      	beq.n	80027e8 <UART_SetConfig+0x24c>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a38      	ldr	r2, [pc, #224]	; (80028c4 <UART_SetConfig+0x328>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d171      	bne.n	80028cc <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80027e8:	f7ff f96e 	bl	8001ac8 <HAL_RCC_GetPCLK2Freq>
 80027ec:	4602      	mov	r2, r0
 80027ee:	4613      	mov	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	4413      	add	r3, r2
 80027f4:	009a      	lsls	r2, r3, #2
 80027f6:	441a      	add	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002802:	4a31      	ldr	r2, [pc, #196]	; (80028c8 <UART_SetConfig+0x32c>)
 8002804:	fba2 2303 	umull	r2, r3, r2, r3
 8002808:	095b      	lsrs	r3, r3, #5
 800280a:	011c      	lsls	r4, r3, #4
 800280c:	f7ff f95c 	bl	8001ac8 <HAL_RCC_GetPCLK2Freq>
 8002810:	4602      	mov	r2, r0
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	009a      	lsls	r2, r3, #2
 800281a:	441a      	add	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	fbb2 f5f3 	udiv	r5, r2, r3
 8002826:	f7ff f94f 	bl	8001ac8 <HAL_RCC_GetPCLK2Freq>
 800282a:	4602      	mov	r2, r0
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	009a      	lsls	r2, r3, #2
 8002834:	441a      	add	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002840:	4a21      	ldr	r2, [pc, #132]	; (80028c8 <UART_SetConfig+0x32c>)
 8002842:	fba2 2303 	umull	r2, r3, r2, r3
 8002846:	095b      	lsrs	r3, r3, #5
 8002848:	2264      	movs	r2, #100	; 0x64
 800284a:	fb02 f303 	mul.w	r3, r2, r3
 800284e:	1aeb      	subs	r3, r5, r3
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	3332      	adds	r3, #50	; 0x32
 8002854:	4a1c      	ldr	r2, [pc, #112]	; (80028c8 <UART_SetConfig+0x32c>)
 8002856:	fba2 2303 	umull	r2, r3, r2, r3
 800285a:	095b      	lsrs	r3, r3, #5
 800285c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002860:	441c      	add	r4, r3
 8002862:	f7ff f931 	bl	8001ac8 <HAL_RCC_GetPCLK2Freq>
 8002866:	4602      	mov	r2, r0
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	009a      	lsls	r2, r3, #2
 8002870:	441a      	add	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	fbb2 f5f3 	udiv	r5, r2, r3
 800287c:	f7ff f924 	bl	8001ac8 <HAL_RCC_GetPCLK2Freq>
 8002880:	4602      	mov	r2, r0
 8002882:	4613      	mov	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	009a      	lsls	r2, r3, #2
 800288a:	441a      	add	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	fbb2 f3f3 	udiv	r3, r2, r3
 8002896:	4a0c      	ldr	r2, [pc, #48]	; (80028c8 <UART_SetConfig+0x32c>)
 8002898:	fba2 2303 	umull	r2, r3, r2, r3
 800289c:	095b      	lsrs	r3, r3, #5
 800289e:	2264      	movs	r2, #100	; 0x64
 80028a0:	fb02 f303 	mul.w	r3, r2, r3
 80028a4:	1aeb      	subs	r3, r5, r3
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	3332      	adds	r3, #50	; 0x32
 80028aa:	4a07      	ldr	r2, [pc, #28]	; (80028c8 <UART_SetConfig+0x32c>)
 80028ac:	fba2 2303 	umull	r2, r3, r2, r3
 80028b0:	095b      	lsrs	r3, r3, #5
 80028b2:	f003 020f 	and.w	r2, r3, #15
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4422      	add	r2, r4
 80028bc:	609a      	str	r2, [r3, #8]
 80028be:	e071      	b.n	80029a4 <UART_SetConfig+0x408>
 80028c0:	40011000 	.word	0x40011000
 80028c4:	40011400 	.word	0x40011400
 80028c8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80028cc:	f7ff f8e8 	bl	8001aa0 <HAL_RCC_GetPCLK1Freq>
 80028d0:	4602      	mov	r2, r0
 80028d2:	4613      	mov	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	009a      	lsls	r2, r3, #2
 80028da:	441a      	add	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e6:	4a31      	ldr	r2, [pc, #196]	; (80029ac <UART_SetConfig+0x410>)
 80028e8:	fba2 2303 	umull	r2, r3, r2, r3
 80028ec:	095b      	lsrs	r3, r3, #5
 80028ee:	011c      	lsls	r4, r3, #4
 80028f0:	f7ff f8d6 	bl	8001aa0 <HAL_RCC_GetPCLK1Freq>
 80028f4:	4602      	mov	r2, r0
 80028f6:	4613      	mov	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	009a      	lsls	r2, r3, #2
 80028fe:	441a      	add	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	fbb2 f5f3 	udiv	r5, r2, r3
 800290a:	f7ff f8c9 	bl	8001aa0 <HAL_RCC_GetPCLK1Freq>
 800290e:	4602      	mov	r2, r0
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	009a      	lsls	r2, r3, #2
 8002918:	441a      	add	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	fbb2 f3f3 	udiv	r3, r2, r3
 8002924:	4a21      	ldr	r2, [pc, #132]	; (80029ac <UART_SetConfig+0x410>)
 8002926:	fba2 2303 	umull	r2, r3, r2, r3
 800292a:	095b      	lsrs	r3, r3, #5
 800292c:	2264      	movs	r2, #100	; 0x64
 800292e:	fb02 f303 	mul.w	r3, r2, r3
 8002932:	1aeb      	subs	r3, r5, r3
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	3332      	adds	r3, #50	; 0x32
 8002938:	4a1c      	ldr	r2, [pc, #112]	; (80029ac <UART_SetConfig+0x410>)
 800293a:	fba2 2303 	umull	r2, r3, r2, r3
 800293e:	095b      	lsrs	r3, r3, #5
 8002940:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002944:	441c      	add	r4, r3
 8002946:	f7ff f8ab 	bl	8001aa0 <HAL_RCC_GetPCLK1Freq>
 800294a:	4602      	mov	r2, r0
 800294c:	4613      	mov	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	009a      	lsls	r2, r3, #2
 8002954:	441a      	add	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	fbb2 f5f3 	udiv	r5, r2, r3
 8002960:	f7ff f89e 	bl	8001aa0 <HAL_RCC_GetPCLK1Freq>
 8002964:	4602      	mov	r2, r0
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	009a      	lsls	r2, r3, #2
 800296e:	441a      	add	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	fbb2 f3f3 	udiv	r3, r2, r3
 800297a:	4a0c      	ldr	r2, [pc, #48]	; (80029ac <UART_SetConfig+0x410>)
 800297c:	fba2 2303 	umull	r2, r3, r2, r3
 8002980:	095b      	lsrs	r3, r3, #5
 8002982:	2264      	movs	r2, #100	; 0x64
 8002984:	fb02 f303 	mul.w	r3, r2, r3
 8002988:	1aeb      	subs	r3, r5, r3
 800298a:	011b      	lsls	r3, r3, #4
 800298c:	3332      	adds	r3, #50	; 0x32
 800298e:	4a07      	ldr	r2, [pc, #28]	; (80029ac <UART_SetConfig+0x410>)
 8002990:	fba2 2303 	umull	r2, r3, r2, r3
 8002994:	095b      	lsrs	r3, r3, #5
 8002996:	f003 020f 	and.w	r2, r3, #15
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4422      	add	r2, r4
 80029a0:	609a      	str	r2, [r3, #8]
}
 80029a2:	e7ff      	b.n	80029a4 <UART_SetConfig+0x408>
 80029a4:	bf00      	nop
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bdb0      	pop	{r4, r5, r7, pc}
 80029ac:	51eb851f 	.word	0x51eb851f

080029b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b092      	sub	sp, #72	; 0x48
 80029b4:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029b6:	f7fd fda5 	bl	8000504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029ba:	f000 f817 	bl	80029ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029be:	f000 f943 	bl	8002c48 <MX_GPIO_Init>
  //MX_CAN1_Init();
  MX_TIM6_Init();
 80029c2:	f000 f885 	bl	8002ad0 <MX_TIM6_Init>
  MX_TIM7_Init();
 80029c6:	f000 f8b7 	bl	8002b38 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80029ca:	f000 f8e9 	bl	8002ba0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80029ce:	f000 f911 	bl	8002bf4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  if(CAN_Polling() == HAL_OK)
 80029d2:	f000 f9df 	bl	8002d94 <CAN_Polling>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d103      	bne.n	80029e4 <main+0x34>
  {
	  while(1)
	  {
		  HAL_Delay(10);
 80029dc:	200a      	movs	r0, #10
 80029de:	f7fd fe03 	bl	80005e8 <HAL_Delay>
 80029e2:	e7fb      	b.n	80029dc <main+0x2c>
  }
  else
  {
	  while(1)
	  {
		  HAL_Delay(10);
 80029e4:	200a      	movs	r0, #10
 80029e6:	f7fd fdff 	bl	80005e8 <HAL_Delay>
 80029ea:	e7fb      	b.n	80029e4 <main+0x34>

080029ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b094      	sub	sp, #80	; 0x50
 80029f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029f2:	f107 031c 	add.w	r3, r7, #28
 80029f6:	2234      	movs	r2, #52	; 0x34
 80029f8:	2100      	movs	r1, #0
 80029fa:	4618      	mov	r0, r3
 80029fc:	f000 fcb0 	bl	8003360 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a00:	f107 0308 	add.w	r3, r7, #8
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	605a      	str	r2, [r3, #4]
 8002a0a:	609a      	str	r2, [r3, #8]
 8002a0c:	60da      	str	r2, [r3, #12]
 8002a0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a10:	2300      	movs	r3, #0
 8002a12:	607b      	str	r3, [r7, #4]
 8002a14:	4b2c      	ldr	r3, [pc, #176]	; (8002ac8 <SystemClock_Config+0xdc>)
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	4a2b      	ldr	r2, [pc, #172]	; (8002ac8 <SystemClock_Config+0xdc>)
 8002a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a1e:	6413      	str	r3, [r2, #64]	; 0x40
 8002a20:	4b29      	ldr	r3, [pc, #164]	; (8002ac8 <SystemClock_Config+0xdc>)
 8002a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a28:	607b      	str	r3, [r7, #4]
 8002a2a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	603b      	str	r3, [r7, #0]
 8002a30:	4b26      	ldr	r3, [pc, #152]	; (8002acc <SystemClock_Config+0xe0>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a25      	ldr	r2, [pc, #148]	; (8002acc <SystemClock_Config+0xe0>)
 8002a36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a3a:	6013      	str	r3, [r2, #0]
 8002a3c:	4b23      	ldr	r3, [pc, #140]	; (8002acc <SystemClock_Config+0xe0>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a44:	603b      	str	r3, [r7, #0]
 8002a46:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a50:	2310      	movs	r3, #16
 8002a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a54:	2302      	movs	r3, #2
 8002a56:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002a5c:	2308      	movs	r3, #8
 8002a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002a60:	23b4      	movs	r3, #180	; 0xb4
 8002a62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a64:	2302      	movs	r3, #2
 8002a66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a70:	f107 031c 	add.w	r3, r7, #28
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff f9d9 	bl	8001e2c <HAL_RCC_OscConfig>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002a80:	f000 fa48 	bl	8002f14 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002a84:	f7fe fece 	bl	8001824 <HAL_PWREx_EnableOverDrive>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002a8e:	f000 fa41 	bl	8002f14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a92:	230f      	movs	r3, #15
 8002a94:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a96:	2302      	movs	r3, #2
 8002a98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002a9e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002aa2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002aa8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002aaa:	f107 0308 	add.w	r3, r7, #8
 8002aae:	2105      	movs	r1, #5
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fe ff07 	bl	80018c4 <HAL_RCC_ClockConfig>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002abc:	f000 fa2a 	bl	8002f14 <Error_Handler>
  }
}
 8002ac0:	bf00      	nop
 8002ac2:	3750      	adds	r7, #80	; 0x50
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	40007000 	.word	0x40007000

08002ad0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ad6:	463b      	mov	r3, r7
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002ade:	4b14      	ldr	r3, [pc, #80]	; (8002b30 <MX_TIM6_Init+0x60>)
 8002ae0:	4a14      	ldr	r2, [pc, #80]	; (8002b34 <MX_TIM6_Init+0x64>)
 8002ae2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002ae4:	4b12      	ldr	r3, [pc, #72]	; (8002b30 <MX_TIM6_Init+0x60>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aea:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <MX_TIM6_Init+0x60>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0;
 8002af0:	4b0f      	ldr	r3, [pc, #60]	; (8002b30 <MX_TIM6_Init+0x60>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002af6:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <MX_TIM6_Init+0x60>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002afc:	480c      	ldr	r0, [pc, #48]	; (8002b30 <MX_TIM6_Init+0x60>)
 8002afe:	f7ff fbef 	bl	80022e0 <HAL_TIM_Base_Init>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d001      	beq.n	8002b0c <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8002b08:	f000 fa04 	bl	8002f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b10:	2300      	movs	r3, #0
 8002b12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002b14:	463b      	mov	r3, r7
 8002b16:	4619      	mov	r1, r3
 8002b18:	4805      	ldr	r0, [pc, #20]	; (8002b30 <MX_TIM6_Init+0x60>)
 8002b1a:	f7ff fcad 	bl	8002478 <HAL_TIMEx_MasterConfigSynchronization>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8002b24:	f000 f9f6 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002b28:	bf00      	nop
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	20000090 	.word	0x20000090
 8002b34:	40001000 	.word	0x40001000

08002b38 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b3e:	463b      	mov	r3, r7
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002b46:	4b14      	ldr	r3, [pc, #80]	; (8002b98 <MX_TIM7_Init+0x60>)
 8002b48:	4a14      	ldr	r2, [pc, #80]	; (8002b9c <MX_TIM7_Init+0x64>)
 8002b4a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8002b4c:	4b12      	ldr	r3, [pc, #72]	; (8002b98 <MX_TIM7_Init+0x60>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b52:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <MX_TIM7_Init+0x60>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0;
 8002b58:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <MX_TIM7_Init+0x60>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b5e:	4b0e      	ldr	r3, [pc, #56]	; (8002b98 <MX_TIM7_Init+0x60>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002b64:	480c      	ldr	r0, [pc, #48]	; (8002b98 <MX_TIM7_Init+0x60>)
 8002b66:	f7ff fbbb 	bl	80022e0 <HAL_TIM_Base_Init>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8002b70:	f000 f9d0 	bl	8002f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b74:	2300      	movs	r3, #0
 8002b76:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002b7c:	463b      	mov	r3, r7
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4805      	ldr	r0, [pc, #20]	; (8002b98 <MX_TIM7_Init+0x60>)
 8002b82:	f7ff fc79 	bl	8002478 <HAL_TIMEx_MasterConfigSynchronization>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8002b8c:	f000 f9c2 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002b90:	bf00      	nop
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	20000178 	.word	0x20000178
 8002b9c:	40001400 	.word	0x40001400

08002ba0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ba4:	4b11      	ldr	r3, [pc, #68]	; (8002bec <MX_USART1_UART_Init+0x4c>)
 8002ba6:	4a12      	ldr	r2, [pc, #72]	; (8002bf0 <MX_USART1_UART_Init+0x50>)
 8002ba8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002baa:	4b10      	ldr	r3, [pc, #64]	; (8002bec <MX_USART1_UART_Init+0x4c>)
 8002bac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bb0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bb2:	4b0e      	ldr	r3, [pc, #56]	; (8002bec <MX_USART1_UART_Init+0x4c>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002bb8:	4b0c      	ldr	r3, [pc, #48]	; (8002bec <MX_USART1_UART_Init+0x4c>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002bbe:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <MX_USART1_UART_Init+0x4c>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002bc4:	4b09      	ldr	r3, [pc, #36]	; (8002bec <MX_USART1_UART_Init+0x4c>)
 8002bc6:	220c      	movs	r2, #12
 8002bc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bca:	4b08      	ldr	r3, [pc, #32]	; (8002bec <MX_USART1_UART_Init+0x4c>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bd0:	4b06      	ldr	r3, [pc, #24]	; (8002bec <MX_USART1_UART_Init+0x4c>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002bd6:	4805      	ldr	r0, [pc, #20]	; (8002bec <MX_USART1_UART_Init+0x4c>)
 8002bd8:	f7ff fc93 	bl	8002502 <HAL_UART_Init>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002be2:	f000 f997 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002be6:	bf00      	nop
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	2000002c 	.word	0x2000002c
 8002bf0:	40011000 	.word	0x40011000

08002bf4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002bf8:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <MX_USART2_UART_Init+0x4c>)
 8002bfa:	4a12      	ldr	r2, [pc, #72]	; (8002c44 <MX_USART2_UART_Init+0x50>)
 8002bfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002bfe:	4b10      	ldr	r3, [pc, #64]	; (8002c40 <MX_USART2_UART_Init+0x4c>)
 8002c00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c06:	4b0e      	ldr	r3, [pc, #56]	; (8002c40 <MX_USART2_UART_Init+0x4c>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c0c:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <MX_USART2_UART_Init+0x4c>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c12:	4b0b      	ldr	r3, [pc, #44]	; (8002c40 <MX_USART2_UART_Init+0x4c>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c18:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <MX_USART2_UART_Init+0x4c>)
 8002c1a:	220c      	movs	r2, #12
 8002c1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c1e:	4b08      	ldr	r3, [pc, #32]	; (8002c40 <MX_USART2_UART_Init+0x4c>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c24:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <MX_USART2_UART_Init+0x4c>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c2a:	4805      	ldr	r0, [pc, #20]	; (8002c40 <MX_USART2_UART_Init+0x4c>)
 8002c2c:	f7ff fc69 	bl	8002502 <HAL_UART_Init>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002c36:	f000 f96d 	bl	8002f14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c3a:	bf00      	nop
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	200000dc 	.word	0x200000dc
 8002c44:	40004400 	.word	0x40004400

08002c48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	607b      	str	r3, [r7, #4]
 8002c52:	4b10      	ldr	r3, [pc, #64]	; (8002c94 <MX_GPIO_Init+0x4c>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	4a0f      	ldr	r2, [pc, #60]	; (8002c94 <MX_GPIO_Init+0x4c>)
 8002c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5e:	4b0d      	ldr	r3, [pc, #52]	; (8002c94 <MX_GPIO_Init+0x4c>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c66:	607b      	str	r3, [r7, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	603b      	str	r3, [r7, #0]
 8002c6e:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <MX_GPIO_Init+0x4c>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	4a08      	ldr	r2, [pc, #32]	; (8002c94 <MX_GPIO_Init+0x4c>)
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	6313      	str	r3, [r2, #48]	; 0x30
 8002c7a:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <MX_GPIO_Init+0x4c>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	603b      	str	r3, [r7, #0]
 8002c84:	683b      	ldr	r3, [r7, #0]

}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	40023800 	.word	0x40023800

08002c98 <HAL_CAN_TxMailbox0CompleteCallback>:
	uint32_t tx2abortcplt;
	uint32_t error;
}callbackchecker;
callbackchecker checker;
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
	checker.tx0cplt++;
 8002ca0:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <HAL_CAN_TxMailbox0CompleteCallback+0x20>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	4a04      	ldr	r2, [pc, #16]	; (8002cb8 <HAL_CAN_TxMailbox0CompleteCallback+0x20>)
 8002ca8:	6013      	str	r3, [r2, #0]
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	2000006c 	.word	0x2000006c

08002cbc <HAL_CAN_TxMailbox1CompleteCallback>:
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
	checker.tx1cplt++;
 8002cc4:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <HAL_CAN_TxMailbox1CompleteCallback+0x20>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	4a04      	ldr	r2, [pc, #16]	; (8002cdc <HAL_CAN_TxMailbox1CompleteCallback+0x20>)
 8002ccc:	6053      	str	r3, [r2, #4]
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	2000006c 	.word	0x2000006c

08002ce0 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
	checker.tx2cplt++;
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <HAL_CAN_TxMailbox2CompleteCallback+0x20>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	3301      	adds	r3, #1
 8002cee:	4a04      	ldr	r2, [pc, #16]	; (8002d00 <HAL_CAN_TxMailbox2CompleteCallback+0x20>)
 8002cf0:	6093      	str	r3, [r2, #8]
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	2000006c 	.word	0x2000006c

08002d04 <HAL_CAN_TxMailbox0AbortCallback>:
void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
	checker.tx0abortcplt++;
 8002d0c:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <HAL_CAN_TxMailbox0AbortCallback+0x20>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	3301      	adds	r3, #1
 8002d12:	4a04      	ldr	r2, [pc, #16]	; (8002d24 <HAL_CAN_TxMailbox0AbortCallback+0x20>)
 8002d14:	60d3      	str	r3, [r2, #12]
}
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	2000006c 	.word	0x2000006c

08002d28 <HAL_CAN_TxMailbox1AbortCallback>:
void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
	checker.tx1abortcplt++;
 8002d30:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <HAL_CAN_TxMailbox1AbortCallback+0x20>)
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	3301      	adds	r3, #1
 8002d36:	4a04      	ldr	r2, [pc, #16]	; (8002d48 <HAL_CAN_TxMailbox1AbortCallback+0x20>)
 8002d38:	6113      	str	r3, [r2, #16]
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	2000006c 	.word	0x2000006c

08002d4c <HAL_CAN_TxMailbox2AbortCallback>:
void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
	checker.tx2abortcplt++;
 8002d54:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <HAL_CAN_TxMailbox2AbortCallback+0x20>)
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	4a04      	ldr	r2, [pc, #16]	; (8002d6c <HAL_CAN_TxMailbox2AbortCallback+0x20>)
 8002d5c:	6153      	str	r3, [r2, #20]
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	2000006c 	.word	0x2000006c

08002d70 <HAL_CAN_ErrorCallback>:
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
	checker.error++;
 8002d78:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <HAL_CAN_ErrorCallback+0x20>)
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	4a04      	ldr	r2, [pc, #16]	; (8002d90 <HAL_CAN_ErrorCallback+0x20>)
 8002d80:	6193      	str	r3, [r2, #24]
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	2000006c 	.word	0x2000006c

08002d94 <CAN_Polling>:

HAL_StatusTypeDef CAN_Polling(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b08a      	sub	sp, #40	; 0x28
 8002d98:	af00      	add	r7, sp, #0
  CAN_FilterTypeDef  sFilterConfig;

  /*##-1- Configure the CAN peripheral #######################################*/
  hcan1.Instance = CAN1;
 8002d9a:	4b57      	ldr	r3, [pc, #348]	; (8002ef8 <CAN_Polling+0x164>)
 8002d9c:	4a57      	ldr	r2, [pc, #348]	; (8002efc <CAN_Polling+0x168>)
 8002d9e:	601a      	str	r2, [r3, #0]

  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002da0:	4b55      	ldr	r3, [pc, #340]	; (8002ef8 <CAN_Polling+0x164>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002da6:	4b54      	ldr	r3, [pc, #336]	; (8002ef8 <CAN_Polling+0x164>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002dac:	4b52      	ldr	r3, [pc, #328]	; (8002ef8 <CAN_Polling+0x164>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8002db2:	4b51      	ldr	r3, [pc, #324]	; (8002ef8 <CAN_Polling+0x164>)
 8002db4:	2201      	movs	r2, #1
 8002db6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002db8:	4b4f      	ldr	r3, [pc, #316]	; (8002ef8 <CAN_Polling+0x164>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002dbe:	4b4e      	ldr	r3, [pc, #312]	; (8002ef8 <CAN_Polling+0x164>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	775a      	strb	r2, [r3, #29]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002dc4:	4b4c      	ldr	r3, [pc, #304]	; (8002ef8 <CAN_Polling+0x164>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002dca:	4b4b      	ldr	r3, [pc, #300]	; (8002ef8 <CAN_Polling+0x164>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8002dd0:	4b49      	ldr	r3, [pc, #292]	; (8002ef8 <CAN_Polling+0x164>)
 8002dd2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002dd6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002dd8:	4b47      	ldr	r3, [pc, #284]	; (8002ef8 <CAN_Polling+0x164>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	615a      	str	r2, [r3, #20]
  hcan1.Init.Prescaler = 9;
 8002dde:	4b46      	ldr	r3, [pc, #280]	; (8002ef8 <CAN_Polling+0x164>)
 8002de0:	2209      	movs	r2, #9
 8002de2:	605a      	str	r2, [r3, #4]

  if(HAL_CAN_Init(&hcan1) != HAL_OK)
 8002de4:	4844      	ldr	r0, [pc, #272]	; (8002ef8 <CAN_Polling+0x164>)
 8002de6:	f7fd fc21 	bl	800062c <HAL_CAN_Init>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <CAN_Polling+0x60>
  {
    /* Initialization Error */
    Error_Handler();
 8002df0:	f000 f890 	bl	8002f14 <Error_Handler>
  }

  /*##-2- Configure the CAN Filter ###########################################*/
  sFilterConfig.FilterBank = 0;
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8002e00:	2300      	movs	r3, #0
 8002e02:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8002e04:	2300      	movs	r3, #0
 8002e06:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002e10:	2300      	movs	r3, #0
 8002e12:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8002e14:	2301      	movs	r3, #1
 8002e16:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 14;
 8002e18:	230e      	movs	r3, #14
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24

  if(HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8002e1c:	463b      	mov	r3, r7
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4835      	ldr	r0, [pc, #212]	; (8002ef8 <CAN_Polling+0x164>)
 8002e22:	f7fd fcff 	bl	8000824 <HAL_CAN_ConfigFilter>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <CAN_Polling+0x9c>
  {
    /* Filter configuration Error */
    Error_Handler();
 8002e2c:	f000 f872 	bl	8002f14 <Error_Handler>
  }

  /*##-3- Start the CAN peripheral ###########################################*/
  if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8002e30:	4831      	ldr	r0, [pc, #196]	; (8002ef8 <CAN_Polling+0x164>)
 8002e32:	f7fd fdd7 	bl	80009e4 <HAL_CAN_Start>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <CAN_Polling+0xac>
  {
    /* Start Error */
    Error_Handler();
 8002e3c:	f000 f86a 	bl	8002f14 <Error_Handler>
  }

  /*##-4- Start the Transmission process #####################################*/
  TxHeader.StdId = 0x11;
 8002e40:	4b2f      	ldr	r3, [pc, #188]	; (8002f00 <CAN_Polling+0x16c>)
 8002e42:	2211      	movs	r2, #17
 8002e44:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 8002e46:	4b2e      	ldr	r3, [pc, #184]	; (8002f00 <CAN_Polling+0x16c>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 8002e4c:	4b2c      	ldr	r3, [pc, #176]	; (8002f00 <CAN_Polling+0x16c>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 2;
 8002e52:	4b2b      	ldr	r3, [pc, #172]	; (8002f00 <CAN_Polling+0x16c>)
 8002e54:	2202      	movs	r2, #2
 8002e56:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8002e58:	4b29      	ldr	r3, [pc, #164]	; (8002f00 <CAN_Polling+0x16c>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	751a      	strb	r2, [r3, #20]
  TxData[0] = 0xCA;
 8002e5e:	4b29      	ldr	r3, [pc, #164]	; (8002f04 <CAN_Polling+0x170>)
 8002e60:	22ca      	movs	r2, #202	; 0xca
 8002e62:	701a      	strb	r2, [r3, #0]
  TxData[1] = 0xFE;
 8002e64:	4b27      	ldr	r3, [pc, #156]	; (8002f04 <CAN_Polling+0x170>)
 8002e66:	22fe      	movs	r2, #254	; 0xfe
 8002e68:	705a      	strb	r2, [r3, #1]

  /* Request transmission */
  if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8002e6a:	4b27      	ldr	r3, [pc, #156]	; (8002f08 <CAN_Polling+0x174>)
 8002e6c:	4a25      	ldr	r2, [pc, #148]	; (8002f04 <CAN_Polling+0x170>)
 8002e6e:	4924      	ldr	r1, [pc, #144]	; (8002f00 <CAN_Polling+0x16c>)
 8002e70:	4821      	ldr	r0, [pc, #132]	; (8002ef8 <CAN_Polling+0x164>)
 8002e72:	f7fd fdfb 	bl	8000a6c <HAL_CAN_AddTxMessage>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <CAN_Polling+0xec>
  {
    /* Transmission request Error */
    Error_Handler();
 8002e7c:	f000 f84a 	bl	8002f14 <Error_Handler>
  }

  /* Wait transmission complete */
  while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) != 3) {}
 8002e80:	bf00      	nop
 8002e82:	481d      	ldr	r0, [pc, #116]	; (8002ef8 <CAN_Polling+0x164>)
 8002e84:	f7fd fecd 	bl	8000c22 <HAL_CAN_GetTxMailboxesFreeLevel>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	d1f9      	bne.n	8002e82 <CAN_Polling+0xee>

  /*##-5- Start the Reception process ########################################*/
  if(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 1)
 8002e8e:	2100      	movs	r1, #0
 8002e90:	4819      	ldr	r0, [pc, #100]	; (8002ef8 <CAN_Polling+0x164>)
 8002e92:	f7fe f80e 	bl	8000eb2 <HAL_CAN_GetRxFifoFillLevel>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d001      	beq.n	8002ea0 <CAN_Polling+0x10c>
  {
    /* Reception Missing */
    Error_Handler();
 8002e9c:	f000 f83a 	bl	8002f14 <Error_Handler>
  }

  if(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8002ea0:	4b1a      	ldr	r3, [pc, #104]	; (8002f0c <CAN_Polling+0x178>)
 8002ea2:	4a1b      	ldr	r2, [pc, #108]	; (8002f10 <CAN_Polling+0x17c>)
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	4814      	ldr	r0, [pc, #80]	; (8002ef8 <CAN_Polling+0x164>)
 8002ea8:	f7fd fef0 	bl	8000c8c <HAL_CAN_GetRxMessage>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <CAN_Polling+0x122>
  {
    /* Reception Error */
    Error_Handler();
 8002eb2:	f000 f82f 	bl	8002f14 <Error_Handler>
  }

  if((RxHeader.StdId != 0x11)                     ||
 8002eb6:	4b16      	ldr	r3, [pc, #88]	; (8002f10 <CAN_Polling+0x17c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2b11      	cmp	r3, #17
 8002ebc:	d115      	bne.n	8002eea <CAN_Polling+0x156>
     (RxHeader.RTR != CAN_RTR_DATA)               ||
 8002ebe:	4b14      	ldr	r3, [pc, #80]	; (8002f10 <CAN_Polling+0x17c>)
 8002ec0:	68db      	ldr	r3, [r3, #12]
  if((RxHeader.StdId != 0x11)                     ||
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d111      	bne.n	8002eea <CAN_Polling+0x156>
     (RxHeader.IDE != CAN_ID_STD)                 ||
 8002ec6:	4b12      	ldr	r3, [pc, #72]	; (8002f10 <CAN_Polling+0x17c>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
     (RxHeader.RTR != CAN_RTR_DATA)               ||
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10d      	bne.n	8002eea <CAN_Polling+0x156>
     (RxHeader.DLC != 2)                          ||
 8002ece:	4b10      	ldr	r3, [pc, #64]	; (8002f10 <CAN_Polling+0x17c>)
 8002ed0:	691b      	ldr	r3, [r3, #16]
     (RxHeader.IDE != CAN_ID_STD)                 ||
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d109      	bne.n	8002eea <CAN_Polling+0x156>
     ((RxData[0]<<8 | RxData[1]) != 0xCAFE))
 8002ed6:	4b0d      	ldr	r3, [pc, #52]	; (8002f0c <CAN_Polling+0x178>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	021b      	lsls	r3, r3, #8
 8002edc:	4a0b      	ldr	r2, [pc, #44]	; (8002f0c <CAN_Polling+0x178>)
 8002ede:	7852      	ldrb	r2, [r2, #1]
 8002ee0:	4313      	orrs	r3, r2
     (RxHeader.DLC != 2)                          ||
 8002ee2:	f64c 22fe 	movw	r2, #51966	; 0xcafe
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d001      	beq.n	8002eee <CAN_Polling+0x15a>
  {
    /* Rx message Error */
    return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e000      	b.n	8002ef0 <CAN_Polling+0x15c>
  }

  return HAL_OK; /* Test Passed */
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3728      	adds	r7, #40	; 0x28
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	2000011c 	.word	0x2000011c
 8002efc:	40006400 	.word	0x40006400
 8002f00:	20000144 	.word	0x20000144
 8002f04:	20000088 	.word	0x20000088
 8002f08:	200000d0 	.word	0x200000d0
 8002f0c:	200000d4 	.word	0x200000d4
 8002f10:	2000015c 	.word	0x2000015c

08002f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002f18:	bf00      	nop
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
	...

08002f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	607b      	str	r3, [r7, #4]
 8002f2e:	4b10      	ldr	r3, [pc, #64]	; (8002f70 <HAL_MspInit+0x4c>)
 8002f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f32:	4a0f      	ldr	r2, [pc, #60]	; (8002f70 <HAL_MspInit+0x4c>)
 8002f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f38:	6453      	str	r3, [r2, #68]	; 0x44
 8002f3a:	4b0d      	ldr	r3, [pc, #52]	; (8002f70 <HAL_MspInit+0x4c>)
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f42:	607b      	str	r3, [r7, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	603b      	str	r3, [r7, #0]
 8002f4a:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <HAL_MspInit+0x4c>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	4a08      	ldr	r2, [pc, #32]	; (8002f70 <HAL_MspInit+0x4c>)
 8002f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f54:	6413      	str	r3, [r2, #64]	; 0x40
 8002f56:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <HAL_MspInit+0x4c>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5e:	603b      	str	r3, [r7, #0]
 8002f60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40023800 	.word	0x40023800

08002f74 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b08a      	sub	sp, #40	; 0x28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f7c:	f107 0314 	add.w	r3, r7, #20
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	605a      	str	r2, [r3, #4]
 8002f86:	609a      	str	r2, [r3, #8]
 8002f88:	60da      	str	r2, [r3, #12]
 8002f8a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a29      	ldr	r2, [pc, #164]	; (8003038 <HAL_CAN_MspInit+0xc4>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d14c      	bne.n	8003030 <HAL_CAN_MspInit+0xbc>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002f96:	2300      	movs	r3, #0
 8002f98:	613b      	str	r3, [r7, #16]
 8002f9a:	4b28      	ldr	r3, [pc, #160]	; (800303c <HAL_CAN_MspInit+0xc8>)
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	4a27      	ldr	r2, [pc, #156]	; (800303c <HAL_CAN_MspInit+0xc8>)
 8002fa0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fa6:	4b25      	ldr	r3, [pc, #148]	; (800303c <HAL_CAN_MspInit+0xc8>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fae:	613b      	str	r3, [r7, #16]
 8002fb0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60fb      	str	r3, [r7, #12]
 8002fb6:	4b21      	ldr	r3, [pc, #132]	; (800303c <HAL_CAN_MspInit+0xc8>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	4a20      	ldr	r2, [pc, #128]	; (800303c <HAL_CAN_MspInit+0xc8>)
 8002fbc:	f043 0301 	orr.w	r3, r3, #1
 8002fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc2:	4b1e      	ldr	r3, [pc, #120]	; (800303c <HAL_CAN_MspInit+0xc8>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002fce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002fe0:	2309      	movs	r3, #9
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe4:	f107 0314 	add.w	r3, r7, #20
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4815      	ldr	r0, [pc, #84]	; (8003040 <HAL_CAN_MspInit+0xcc>)
 8002fec:	f7fe fa88 	bl	8001500 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	2013      	movs	r0, #19
 8002ff6:	f7fe fa4c 	bl	8001492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002ffa:	2013      	movs	r0, #19
 8002ffc:	f7fe fa65 	bl	80014ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8003000:	2200      	movs	r2, #0
 8003002:	2100      	movs	r1, #0
 8003004:	2014      	movs	r0, #20
 8003006:	f7fe fa44 	bl	8001492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800300a:	2014      	movs	r0, #20
 800300c:	f7fe fa5d 	bl	80014ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8003010:	2200      	movs	r2, #0
 8003012:	2100      	movs	r1, #0
 8003014:	2015      	movs	r0, #21
 8003016:	f7fe fa3c 	bl	8001492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800301a:	2015      	movs	r0, #21
 800301c:	f7fe fa55 	bl	80014ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8003020:	2200      	movs	r2, #0
 8003022:	2100      	movs	r1, #0
 8003024:	2016      	movs	r0, #22
 8003026:	f7fe fa34 	bl	8001492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800302a:	2016      	movs	r0, #22
 800302c:	f7fe fa4d 	bl	80014ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003030:	bf00      	nop
 8003032:	3728      	adds	r7, #40	; 0x28
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40006400 	.word	0x40006400
 800303c:	40023800 	.word	0x40023800
 8003040:	40020000 	.word	0x40020000

08003044 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a15      	ldr	r2, [pc, #84]	; (80030a8 <HAL_TIM_Base_MspInit+0x64>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d10e      	bne.n	8003074 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	4b14      	ldr	r3, [pc, #80]	; (80030ac <HAL_TIM_Base_MspInit+0x68>)
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	4a13      	ldr	r2, [pc, #76]	; (80030ac <HAL_TIM_Base_MspInit+0x68>)
 8003060:	f043 0310 	orr.w	r3, r3, #16
 8003064:	6413      	str	r3, [r2, #64]	; 0x40
 8003066:	4b11      	ldr	r3, [pc, #68]	; (80030ac <HAL_TIM_Base_MspInit+0x68>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	f003 0310 	and.w	r3, r3, #16
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003072:	e012      	b.n	800309a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM7)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a0d      	ldr	r2, [pc, #52]	; (80030b0 <HAL_TIM_Base_MspInit+0x6c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d10d      	bne.n	800309a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	60bb      	str	r3, [r7, #8]
 8003082:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <HAL_TIM_Base_MspInit+0x68>)
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	4a09      	ldr	r2, [pc, #36]	; (80030ac <HAL_TIM_Base_MspInit+0x68>)
 8003088:	f043 0320 	orr.w	r3, r3, #32
 800308c:	6413      	str	r3, [r2, #64]	; 0x40
 800308e:	4b07      	ldr	r3, [pc, #28]	; (80030ac <HAL_TIM_Base_MspInit+0x68>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	f003 0320 	and.w	r3, r3, #32
 8003096:	60bb      	str	r3, [r7, #8]
 8003098:	68bb      	ldr	r3, [r7, #8]
}
 800309a:	bf00      	nop
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	40001000 	.word	0x40001000
 80030ac:	40023800 	.word	0x40023800
 80030b0:	40001400 	.word	0x40001400

080030b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08c      	sub	sp, #48	; 0x30
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030bc:	f107 031c 	add.w	r3, r7, #28
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	605a      	str	r2, [r3, #4]
 80030c6:	609a      	str	r2, [r3, #8]
 80030c8:	60da      	str	r2, [r3, #12]
 80030ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a32      	ldr	r2, [pc, #200]	; (800319c <HAL_UART_MspInit+0xe8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d12d      	bne.n	8003132 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80030d6:	2300      	movs	r3, #0
 80030d8:	61bb      	str	r3, [r7, #24]
 80030da:	4b31      	ldr	r3, [pc, #196]	; (80031a0 <HAL_UART_MspInit+0xec>)
 80030dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030de:	4a30      	ldr	r2, [pc, #192]	; (80031a0 <HAL_UART_MspInit+0xec>)
 80030e0:	f043 0310 	orr.w	r3, r3, #16
 80030e4:	6453      	str	r3, [r2, #68]	; 0x44
 80030e6:	4b2e      	ldr	r3, [pc, #184]	; (80031a0 <HAL_UART_MspInit+0xec>)
 80030e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ea:	f003 0310 	and.w	r3, r3, #16
 80030ee:	61bb      	str	r3, [r7, #24]
 80030f0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	4b2a      	ldr	r3, [pc, #168]	; (80031a0 <HAL_UART_MspInit+0xec>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	4a29      	ldr	r2, [pc, #164]	; (80031a0 <HAL_UART_MspInit+0xec>)
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	6313      	str	r3, [r2, #48]	; 0x30
 8003102:	4b27      	ldr	r3, [pc, #156]	; (80031a0 <HAL_UART_MspInit+0xec>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	617b      	str	r3, [r7, #20]
 800310c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800310e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003114:	2302      	movs	r3, #2
 8003116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003118:	2301      	movs	r3, #1
 800311a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800311c:	2303      	movs	r3, #3
 800311e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003120:	2307      	movs	r3, #7
 8003122:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003124:	f107 031c 	add.w	r3, r7, #28
 8003128:	4619      	mov	r1, r3
 800312a:	481e      	ldr	r0, [pc, #120]	; (80031a4 <HAL_UART_MspInit+0xf0>)
 800312c:	f7fe f9e8 	bl	8001500 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003130:	e030      	b.n	8003194 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a1c      	ldr	r2, [pc, #112]	; (80031a8 <HAL_UART_MspInit+0xf4>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d12b      	bne.n	8003194 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800313c:	2300      	movs	r3, #0
 800313e:	613b      	str	r3, [r7, #16]
 8003140:	4b17      	ldr	r3, [pc, #92]	; (80031a0 <HAL_UART_MspInit+0xec>)
 8003142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003144:	4a16      	ldr	r2, [pc, #88]	; (80031a0 <HAL_UART_MspInit+0xec>)
 8003146:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800314a:	6413      	str	r3, [r2, #64]	; 0x40
 800314c:	4b14      	ldr	r3, [pc, #80]	; (80031a0 <HAL_UART_MspInit+0xec>)
 800314e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003158:	2300      	movs	r3, #0
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	4b10      	ldr	r3, [pc, #64]	; (80031a0 <HAL_UART_MspInit+0xec>)
 800315e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003160:	4a0f      	ldr	r2, [pc, #60]	; (80031a0 <HAL_UART_MspInit+0xec>)
 8003162:	f043 0301 	orr.w	r3, r3, #1
 8003166:	6313      	str	r3, [r2, #48]	; 0x30
 8003168:	4b0d      	ldr	r3, [pc, #52]	; (80031a0 <HAL_UART_MspInit+0xec>)
 800316a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003174:	230c      	movs	r3, #12
 8003176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003178:	2302      	movs	r3, #2
 800317a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800317c:	2301      	movs	r3, #1
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003180:	2303      	movs	r3, #3
 8003182:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003184:	2307      	movs	r3, #7
 8003186:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003188:	f107 031c 	add.w	r3, r7, #28
 800318c:	4619      	mov	r1, r3
 800318e:	4805      	ldr	r0, [pc, #20]	; (80031a4 <HAL_UART_MspInit+0xf0>)
 8003190:	f7fe f9b6 	bl	8001500 <HAL_GPIO_Init>
}
 8003194:	bf00      	nop
 8003196:	3730      	adds	r7, #48	; 0x30
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40011000 	.word	0x40011000
 80031a0:	40023800 	.word	0x40023800
 80031a4:	40020000 	.word	0x40020000
 80031a8:	40004400 	.word	0x40004400

080031ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80031b0:	bf00      	nop
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031ba:	b480      	push	{r7}
 80031bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031be:	e7fe      	b.n	80031be <HardFault_Handler+0x4>

080031c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031c4:	e7fe      	b.n	80031c4 <MemManage_Handler+0x4>

080031c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031c6:	b480      	push	{r7}
 80031c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031ca:	e7fe      	b.n	80031ca <BusFault_Handler+0x4>

080031cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031d0:	e7fe      	b.n	80031d0 <UsageFault_Handler+0x4>

080031d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031d2:	b480      	push	{r7}
 80031d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031d6:	bf00      	nop
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031e4:	bf00      	nop
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031ee:	b480      	push	{r7}
 80031f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031f2:	bf00      	nop
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003200:	f7fd f9d2 	bl	80005a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003204:	bf00      	nop
 8003206:	bd80      	pop	{r7, pc}

08003208 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800320c:	4802      	ldr	r0, [pc, #8]	; (8003218 <CAN1_TX_IRQHandler+0x10>)
 800320e:	f7fd fe78 	bl	8000f02 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8003212:	bf00      	nop
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	2000011c 	.word	0x2000011c

0800321c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003220:	4802      	ldr	r0, [pc, #8]	; (800322c <CAN1_RX0_IRQHandler+0x10>)
 8003222:	f7fd fe6e 	bl	8000f02 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003226:	bf00      	nop
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	2000011c 	.word	0x2000011c

08003230 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003234:	4802      	ldr	r0, [pc, #8]	; (8003240 <CAN1_RX1_IRQHandler+0x10>)
 8003236:	f7fd fe64 	bl	8000f02 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800323a:	bf00      	nop
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	2000011c 	.word	0x2000011c

08003244 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003248:	4802      	ldr	r0, [pc, #8]	; (8003254 <CAN1_SCE_IRQHandler+0x10>)
 800324a:	f7fd fe5a 	bl	8000f02 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800324e:	bf00      	nop
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	2000011c 	.word	0x2000011c

08003258 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800325c:	4b16      	ldr	r3, [pc, #88]	; (80032b8 <SystemInit+0x60>)
 800325e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003262:	4a15      	ldr	r2, [pc, #84]	; (80032b8 <SystemInit+0x60>)
 8003264:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003268:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800326c:	4b13      	ldr	r3, [pc, #76]	; (80032bc <SystemInit+0x64>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a12      	ldr	r2, [pc, #72]	; (80032bc <SystemInit+0x64>)
 8003272:	f043 0301 	orr.w	r3, r3, #1
 8003276:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003278:	4b10      	ldr	r3, [pc, #64]	; (80032bc <SystemInit+0x64>)
 800327a:	2200      	movs	r2, #0
 800327c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800327e:	4b0f      	ldr	r3, [pc, #60]	; (80032bc <SystemInit+0x64>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a0e      	ldr	r2, [pc, #56]	; (80032bc <SystemInit+0x64>)
 8003284:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800328c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800328e:	4b0b      	ldr	r3, [pc, #44]	; (80032bc <SystemInit+0x64>)
 8003290:	4a0b      	ldr	r2, [pc, #44]	; (80032c0 <SystemInit+0x68>)
 8003292:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003294:	4b09      	ldr	r3, [pc, #36]	; (80032bc <SystemInit+0x64>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a08      	ldr	r2, [pc, #32]	; (80032bc <SystemInit+0x64>)
 800329a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800329e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80032a0:	4b06      	ldr	r3, [pc, #24]	; (80032bc <SystemInit+0x64>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80032a6:	4b04      	ldr	r3, [pc, #16]	; (80032b8 <SystemInit+0x60>)
 80032a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032ac:	609a      	str	r2, [r3, #8]
#endif
}
 80032ae:	bf00      	nop
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	e000ed00 	.word	0xe000ed00
 80032bc:	40023800 	.word	0x40023800
 80032c0:	24003010 	.word	0x24003010

080032c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80032c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80032c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80032ca:	e003      	b.n	80032d4 <LoopCopyDataInit>

080032cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80032cc:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80032ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80032d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80032d2:	3104      	adds	r1, #4

080032d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80032d4:	480b      	ldr	r0, [pc, #44]	; (8003304 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80032d6:	4b0c      	ldr	r3, [pc, #48]	; (8003308 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80032d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80032da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80032dc:	d3f6      	bcc.n	80032cc <CopyDataInit>
  ldr  r2, =_sbss
 80032de:	4a0b      	ldr	r2, [pc, #44]	; (800330c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80032e0:	e002      	b.n	80032e8 <LoopFillZerobss>

080032e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80032e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80032e4:	f842 3b04 	str.w	r3, [r2], #4

080032e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80032e8:	4b09      	ldr	r3, [pc, #36]	; (8003310 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80032ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80032ec:	d3f9      	bcc.n	80032e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80032ee:	f7ff ffb3 	bl	8003258 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032f2:	f000 f811 	bl	8003318 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032f6:	f7ff fb5b 	bl	80029b0 <main>
  bx  lr    
 80032fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80032fc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003300:	080033b0 	.word	0x080033b0
  ldr  r0, =_sdata
 8003304:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003308:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800330c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8003310:	200001b8 	.word	0x200001b8

08003314 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003314:	e7fe      	b.n	8003314 <ADC_IRQHandler>
	...

08003318 <__libc_init_array>:
 8003318:	b570      	push	{r4, r5, r6, lr}
 800331a:	4e0d      	ldr	r6, [pc, #52]	; (8003350 <__libc_init_array+0x38>)
 800331c:	4c0d      	ldr	r4, [pc, #52]	; (8003354 <__libc_init_array+0x3c>)
 800331e:	1ba4      	subs	r4, r4, r6
 8003320:	10a4      	asrs	r4, r4, #2
 8003322:	2500      	movs	r5, #0
 8003324:	42a5      	cmp	r5, r4
 8003326:	d109      	bne.n	800333c <__libc_init_array+0x24>
 8003328:	4e0b      	ldr	r6, [pc, #44]	; (8003358 <__libc_init_array+0x40>)
 800332a:	4c0c      	ldr	r4, [pc, #48]	; (800335c <__libc_init_array+0x44>)
 800332c:	f000 f820 	bl	8003370 <_init>
 8003330:	1ba4      	subs	r4, r4, r6
 8003332:	10a4      	asrs	r4, r4, #2
 8003334:	2500      	movs	r5, #0
 8003336:	42a5      	cmp	r5, r4
 8003338:	d105      	bne.n	8003346 <__libc_init_array+0x2e>
 800333a:	bd70      	pop	{r4, r5, r6, pc}
 800333c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003340:	4798      	blx	r3
 8003342:	3501      	adds	r5, #1
 8003344:	e7ee      	b.n	8003324 <__libc_init_array+0xc>
 8003346:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800334a:	4798      	blx	r3
 800334c:	3501      	adds	r5, #1
 800334e:	e7f2      	b.n	8003336 <__libc_init_array+0x1e>
 8003350:	080033a8 	.word	0x080033a8
 8003354:	080033a8 	.word	0x080033a8
 8003358:	080033a8 	.word	0x080033a8
 800335c:	080033ac 	.word	0x080033ac

08003360 <memset>:
 8003360:	4402      	add	r2, r0
 8003362:	4603      	mov	r3, r0
 8003364:	4293      	cmp	r3, r2
 8003366:	d100      	bne.n	800336a <memset+0xa>
 8003368:	4770      	bx	lr
 800336a:	f803 1b01 	strb.w	r1, [r3], #1
 800336e:	e7f9      	b.n	8003364 <memset+0x4>

08003370 <_init>:
 8003370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003372:	bf00      	nop
 8003374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003376:	bc08      	pop	{r3}
 8003378:	469e      	mov	lr, r3
 800337a:	4770      	bx	lr

0800337c <_fini>:
 800337c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800337e:	bf00      	nop
 8003380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003382:	bc08      	pop	{r3}
 8003384:	469e      	mov	lr, r3
 8003386:	4770      	bx	lr
