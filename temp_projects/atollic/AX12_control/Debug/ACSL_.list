
ACSL_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d94  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002f5c  08002f5c  00012f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002f94  08002f94  00012f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002f9c  08002f9c  00012f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002fa0  08002fa0  00012fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  08002fa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000244  20000004  08002fa8  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000248  08002fa8  00020248  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016894  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002b3a  00000000  00000000  000368c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006f28  00000000  00000000  00039402  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000009c8  00000000  00000000  00040330  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000c68  00000000  00000000  00040cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006417  00000000  00000000  00041960  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000451d  00000000  00000000  00047d77  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004c294  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001de0  00000000  00000000  0004c310  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000004 	.word	0x20000004
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08002f44 	.word	0x08002f44

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000008 	.word	0x20000008
 8000204:	08002f44 	.word	0x08002f44

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f092 0f00 	teq	r2, #0
 80004f2:	bf14      	ite	ne
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e720      	b.n	800034c <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aedc 	beq.w	80002fa <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6c1      	b.n	80002fa <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__aeabi_d2uiz>:
 800099c:	004a      	lsls	r2, r1, #1
 800099e:	d211      	bcs.n	80009c4 <__aeabi_d2uiz+0x28>
 80009a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009a4:	d211      	bcs.n	80009ca <__aeabi_d2uiz+0x2e>
 80009a6:	d50d      	bpl.n	80009c4 <__aeabi_d2uiz+0x28>
 80009a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b0:	d40e      	bmi.n	80009d0 <__aeabi_d2uiz+0x34>
 80009b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009be:	fa23 f002 	lsr.w	r0, r3, r2
 80009c2:	4770      	bx	lr
 80009c4:	f04f 0000 	mov.w	r0, #0
 80009c8:	4770      	bx	lr
 80009ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ce:	d102      	bne.n	80009d6 <__aeabi_d2uiz+0x3a>
 80009d0:	f04f 30ff 	mov.w	r0, #4294967295
 80009d4:	4770      	bx	lr
 80009d6:	f04f 0000 	mov.w	r0, #0
 80009da:	4770      	bx	lr

080009dc <__aeabi_uldivmod>:
 80009dc:	b953      	cbnz	r3, 80009f4 <__aeabi_uldivmod+0x18>
 80009de:	b94a      	cbnz	r2, 80009f4 <__aeabi_uldivmod+0x18>
 80009e0:	2900      	cmp	r1, #0
 80009e2:	bf08      	it	eq
 80009e4:	2800      	cmpeq	r0, #0
 80009e6:	bf1c      	itt	ne
 80009e8:	f04f 31ff 	movne.w	r1, #4294967295
 80009ec:	f04f 30ff 	movne.w	r0, #4294967295
 80009f0:	f000 b97a 	b.w	8000ce8 <__aeabi_idiv0>
 80009f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009fc:	f000 f806 	bl	8000a0c <__udivmoddi4>
 8000a00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a08:	b004      	add	sp, #16
 8000a0a:	4770      	bx	lr

08000a0c <__udivmoddi4>:
 8000a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a10:	468c      	mov	ip, r1
 8000a12:	460d      	mov	r5, r1
 8000a14:	4604      	mov	r4, r0
 8000a16:	9e08      	ldr	r6, [sp, #32]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d151      	bne.n	8000ac0 <__udivmoddi4+0xb4>
 8000a1c:	428a      	cmp	r2, r1
 8000a1e:	4617      	mov	r7, r2
 8000a20:	d96d      	bls.n	8000afe <__udivmoddi4+0xf2>
 8000a22:	fab2 fe82 	clz	lr, r2
 8000a26:	f1be 0f00 	cmp.w	lr, #0
 8000a2a:	d00b      	beq.n	8000a44 <__udivmoddi4+0x38>
 8000a2c:	f1ce 0c20 	rsb	ip, lr, #32
 8000a30:	fa01 f50e 	lsl.w	r5, r1, lr
 8000a34:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000a38:	fa02 f70e 	lsl.w	r7, r2, lr
 8000a3c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000a40:	fa00 f40e 	lsl.w	r4, r0, lr
 8000a44:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000a48:	0c25      	lsrs	r5, r4, #16
 8000a4a:	fbbc f8fa 	udiv	r8, ip, sl
 8000a4e:	fa1f f987 	uxth.w	r9, r7
 8000a52:	fb0a cc18 	mls	ip, sl, r8, ip
 8000a56:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000a5a:	fb08 f309 	mul.w	r3, r8, r9
 8000a5e:	42ab      	cmp	r3, r5
 8000a60:	d90a      	bls.n	8000a78 <__udivmoddi4+0x6c>
 8000a62:	19ed      	adds	r5, r5, r7
 8000a64:	f108 32ff 	add.w	r2, r8, #4294967295
 8000a68:	f080 8123 	bcs.w	8000cb2 <__udivmoddi4+0x2a6>
 8000a6c:	42ab      	cmp	r3, r5
 8000a6e:	f240 8120 	bls.w	8000cb2 <__udivmoddi4+0x2a6>
 8000a72:	f1a8 0802 	sub.w	r8, r8, #2
 8000a76:	443d      	add	r5, r7
 8000a78:	1aed      	subs	r5, r5, r3
 8000a7a:	b2a4      	uxth	r4, r4
 8000a7c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000a80:	fb0a 5510 	mls	r5, sl, r0, r5
 8000a84:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a88:	fb00 f909 	mul.w	r9, r0, r9
 8000a8c:	45a1      	cmp	r9, r4
 8000a8e:	d909      	bls.n	8000aa4 <__udivmoddi4+0x98>
 8000a90:	19e4      	adds	r4, r4, r7
 8000a92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a96:	f080 810a 	bcs.w	8000cae <__udivmoddi4+0x2a2>
 8000a9a:	45a1      	cmp	r9, r4
 8000a9c:	f240 8107 	bls.w	8000cae <__udivmoddi4+0x2a2>
 8000aa0:	3802      	subs	r0, #2
 8000aa2:	443c      	add	r4, r7
 8000aa4:	eba4 0409 	sub.w	r4, r4, r9
 8000aa8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000aac:	2100      	movs	r1, #0
 8000aae:	2e00      	cmp	r6, #0
 8000ab0:	d061      	beq.n	8000b76 <__udivmoddi4+0x16a>
 8000ab2:	fa24 f40e 	lsr.w	r4, r4, lr
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	6034      	str	r4, [r6, #0]
 8000aba:	6073      	str	r3, [r6, #4]
 8000abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ac0:	428b      	cmp	r3, r1
 8000ac2:	d907      	bls.n	8000ad4 <__udivmoddi4+0xc8>
 8000ac4:	2e00      	cmp	r6, #0
 8000ac6:	d054      	beq.n	8000b72 <__udivmoddi4+0x166>
 8000ac8:	2100      	movs	r1, #0
 8000aca:	e886 0021 	stmia.w	r6, {r0, r5}
 8000ace:	4608      	mov	r0, r1
 8000ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad4:	fab3 f183 	clz	r1, r3
 8000ad8:	2900      	cmp	r1, #0
 8000ada:	f040 808e 	bne.w	8000bfa <__udivmoddi4+0x1ee>
 8000ade:	42ab      	cmp	r3, r5
 8000ae0:	d302      	bcc.n	8000ae8 <__udivmoddi4+0xdc>
 8000ae2:	4282      	cmp	r2, r0
 8000ae4:	f200 80fa 	bhi.w	8000cdc <__udivmoddi4+0x2d0>
 8000ae8:	1a84      	subs	r4, r0, r2
 8000aea:	eb65 0503 	sbc.w	r5, r5, r3
 8000aee:	2001      	movs	r0, #1
 8000af0:	46ac      	mov	ip, r5
 8000af2:	2e00      	cmp	r6, #0
 8000af4:	d03f      	beq.n	8000b76 <__udivmoddi4+0x16a>
 8000af6:	e886 1010 	stmia.w	r6, {r4, ip}
 8000afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afe:	b912      	cbnz	r2, 8000b06 <__udivmoddi4+0xfa>
 8000b00:	2701      	movs	r7, #1
 8000b02:	fbb7 f7f2 	udiv	r7, r7, r2
 8000b06:	fab7 fe87 	clz	lr, r7
 8000b0a:	f1be 0f00 	cmp.w	lr, #0
 8000b0e:	d134      	bne.n	8000b7a <__udivmoddi4+0x16e>
 8000b10:	1beb      	subs	r3, r5, r7
 8000b12:	0c3a      	lsrs	r2, r7, #16
 8000b14:	fa1f fc87 	uxth.w	ip, r7
 8000b18:	2101      	movs	r1, #1
 8000b1a:	fbb3 f8f2 	udiv	r8, r3, r2
 8000b1e:	0c25      	lsrs	r5, r4, #16
 8000b20:	fb02 3318 	mls	r3, r2, r8, r3
 8000b24:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000b28:	fb0c f308 	mul.w	r3, ip, r8
 8000b2c:	42ab      	cmp	r3, r5
 8000b2e:	d907      	bls.n	8000b40 <__udivmoddi4+0x134>
 8000b30:	19ed      	adds	r5, r5, r7
 8000b32:	f108 30ff 	add.w	r0, r8, #4294967295
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x132>
 8000b38:	42ab      	cmp	r3, r5
 8000b3a:	f200 80d1 	bhi.w	8000ce0 <__udivmoddi4+0x2d4>
 8000b3e:	4680      	mov	r8, r0
 8000b40:	1aed      	subs	r5, r5, r3
 8000b42:	b2a3      	uxth	r3, r4
 8000b44:	fbb5 f0f2 	udiv	r0, r5, r2
 8000b48:	fb02 5510 	mls	r5, r2, r0, r5
 8000b4c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000b50:	fb0c fc00 	mul.w	ip, ip, r0
 8000b54:	45a4      	cmp	ip, r4
 8000b56:	d907      	bls.n	8000b68 <__udivmoddi4+0x15c>
 8000b58:	19e4      	adds	r4, r4, r7
 8000b5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b5e:	d202      	bcs.n	8000b66 <__udivmoddi4+0x15a>
 8000b60:	45a4      	cmp	ip, r4
 8000b62:	f200 80b8 	bhi.w	8000cd6 <__udivmoddi4+0x2ca>
 8000b66:	4618      	mov	r0, r3
 8000b68:	eba4 040c 	sub.w	r4, r4, ip
 8000b6c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b70:	e79d      	b.n	8000aae <__udivmoddi4+0xa2>
 8000b72:	4631      	mov	r1, r6
 8000b74:	4630      	mov	r0, r6
 8000b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7a:	f1ce 0420 	rsb	r4, lr, #32
 8000b7e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000b82:	fa07 f70e 	lsl.w	r7, r7, lr
 8000b86:	fa20 f804 	lsr.w	r8, r0, r4
 8000b8a:	0c3a      	lsrs	r2, r7, #16
 8000b8c:	fa25 f404 	lsr.w	r4, r5, r4
 8000b90:	ea48 0803 	orr.w	r8, r8, r3
 8000b94:	fbb4 f1f2 	udiv	r1, r4, r2
 8000b98:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000b9c:	fb02 4411 	mls	r4, r2, r1, r4
 8000ba0:	fa1f fc87 	uxth.w	ip, r7
 8000ba4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000ba8:	fb01 f30c 	mul.w	r3, r1, ip
 8000bac:	42ab      	cmp	r3, r5
 8000bae:	fa00 f40e 	lsl.w	r4, r0, lr
 8000bb2:	d909      	bls.n	8000bc8 <__udivmoddi4+0x1bc>
 8000bb4:	19ed      	adds	r5, r5, r7
 8000bb6:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bba:	f080 808a 	bcs.w	8000cd2 <__udivmoddi4+0x2c6>
 8000bbe:	42ab      	cmp	r3, r5
 8000bc0:	f240 8087 	bls.w	8000cd2 <__udivmoddi4+0x2c6>
 8000bc4:	3902      	subs	r1, #2
 8000bc6:	443d      	add	r5, r7
 8000bc8:	1aeb      	subs	r3, r5, r3
 8000bca:	fa1f f588 	uxth.w	r5, r8
 8000bce:	fbb3 f0f2 	udiv	r0, r3, r2
 8000bd2:	fb02 3310 	mls	r3, r2, r0, r3
 8000bd6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000bda:	fb00 f30c 	mul.w	r3, r0, ip
 8000bde:	42ab      	cmp	r3, r5
 8000be0:	d907      	bls.n	8000bf2 <__udivmoddi4+0x1e6>
 8000be2:	19ed      	adds	r5, r5, r7
 8000be4:	f100 38ff 	add.w	r8, r0, #4294967295
 8000be8:	d26f      	bcs.n	8000cca <__udivmoddi4+0x2be>
 8000bea:	42ab      	cmp	r3, r5
 8000bec:	d96d      	bls.n	8000cca <__udivmoddi4+0x2be>
 8000bee:	3802      	subs	r0, #2
 8000bf0:	443d      	add	r5, r7
 8000bf2:	1aeb      	subs	r3, r5, r3
 8000bf4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bf8:	e78f      	b.n	8000b1a <__udivmoddi4+0x10e>
 8000bfa:	f1c1 0720 	rsb	r7, r1, #32
 8000bfe:	fa22 f807 	lsr.w	r8, r2, r7
 8000c02:	408b      	lsls	r3, r1
 8000c04:	fa05 f401 	lsl.w	r4, r5, r1
 8000c08:	ea48 0303 	orr.w	r3, r8, r3
 8000c0c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000c10:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000c14:	40fd      	lsrs	r5, r7
 8000c16:	ea4e 0e04 	orr.w	lr, lr, r4
 8000c1a:	fbb5 f9fc 	udiv	r9, r5, ip
 8000c1e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000c22:	fb0c 5519 	mls	r5, ip, r9, r5
 8000c26:	fa1f f883 	uxth.w	r8, r3
 8000c2a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000c2e:	fb09 f408 	mul.w	r4, r9, r8
 8000c32:	42ac      	cmp	r4, r5
 8000c34:	fa02 f201 	lsl.w	r2, r2, r1
 8000c38:	fa00 fa01 	lsl.w	sl, r0, r1
 8000c3c:	d908      	bls.n	8000c50 <__udivmoddi4+0x244>
 8000c3e:	18ed      	adds	r5, r5, r3
 8000c40:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c44:	d243      	bcs.n	8000cce <__udivmoddi4+0x2c2>
 8000c46:	42ac      	cmp	r4, r5
 8000c48:	d941      	bls.n	8000cce <__udivmoddi4+0x2c2>
 8000c4a:	f1a9 0902 	sub.w	r9, r9, #2
 8000c4e:	441d      	add	r5, r3
 8000c50:	1b2d      	subs	r5, r5, r4
 8000c52:	fa1f fe8e 	uxth.w	lr, lr
 8000c56:	fbb5 f0fc 	udiv	r0, r5, ip
 8000c5a:	fb0c 5510 	mls	r5, ip, r0, r5
 8000c5e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000c62:	fb00 f808 	mul.w	r8, r0, r8
 8000c66:	45a0      	cmp	r8, r4
 8000c68:	d907      	bls.n	8000c7a <__udivmoddi4+0x26e>
 8000c6a:	18e4      	adds	r4, r4, r3
 8000c6c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000c70:	d229      	bcs.n	8000cc6 <__udivmoddi4+0x2ba>
 8000c72:	45a0      	cmp	r8, r4
 8000c74:	d927      	bls.n	8000cc6 <__udivmoddi4+0x2ba>
 8000c76:	3802      	subs	r0, #2
 8000c78:	441c      	add	r4, r3
 8000c7a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c7e:	eba4 0408 	sub.w	r4, r4, r8
 8000c82:	fba0 8902 	umull	r8, r9, r0, r2
 8000c86:	454c      	cmp	r4, r9
 8000c88:	46c6      	mov	lr, r8
 8000c8a:	464d      	mov	r5, r9
 8000c8c:	d315      	bcc.n	8000cba <__udivmoddi4+0x2ae>
 8000c8e:	d012      	beq.n	8000cb6 <__udivmoddi4+0x2aa>
 8000c90:	b156      	cbz	r6, 8000ca8 <__udivmoddi4+0x29c>
 8000c92:	ebba 030e 	subs.w	r3, sl, lr
 8000c96:	eb64 0405 	sbc.w	r4, r4, r5
 8000c9a:	fa04 f707 	lsl.w	r7, r4, r7
 8000c9e:	40cb      	lsrs	r3, r1
 8000ca0:	431f      	orrs	r7, r3
 8000ca2:	40cc      	lsrs	r4, r1
 8000ca4:	6037      	str	r7, [r6, #0]
 8000ca6:	6074      	str	r4, [r6, #4]
 8000ca8:	2100      	movs	r1, #0
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	e6f8      	b.n	8000aa4 <__udivmoddi4+0x98>
 8000cb2:	4690      	mov	r8, r2
 8000cb4:	e6e0      	b.n	8000a78 <__udivmoddi4+0x6c>
 8000cb6:	45c2      	cmp	sl, r8
 8000cb8:	d2ea      	bcs.n	8000c90 <__udivmoddi4+0x284>
 8000cba:	ebb8 0e02 	subs.w	lr, r8, r2
 8000cbe:	eb69 0503 	sbc.w	r5, r9, r3
 8000cc2:	3801      	subs	r0, #1
 8000cc4:	e7e4      	b.n	8000c90 <__udivmoddi4+0x284>
 8000cc6:	4628      	mov	r0, r5
 8000cc8:	e7d7      	b.n	8000c7a <__udivmoddi4+0x26e>
 8000cca:	4640      	mov	r0, r8
 8000ccc:	e791      	b.n	8000bf2 <__udivmoddi4+0x1e6>
 8000cce:	4681      	mov	r9, r0
 8000cd0:	e7be      	b.n	8000c50 <__udivmoddi4+0x244>
 8000cd2:	4601      	mov	r1, r0
 8000cd4:	e778      	b.n	8000bc8 <__udivmoddi4+0x1bc>
 8000cd6:	3802      	subs	r0, #2
 8000cd8:	443c      	add	r4, r7
 8000cda:	e745      	b.n	8000b68 <__udivmoddi4+0x15c>
 8000cdc:	4608      	mov	r0, r1
 8000cde:	e708      	b.n	8000af2 <__udivmoddi4+0xe6>
 8000ce0:	f1a8 0802 	sub.w	r8, r8, #2
 8000ce4:	443d      	add	r5, r7
 8000ce6:	e72b      	b.n	8000b40 <__udivmoddi4+0x134>

08000ce8 <__aeabi_idiv0>:
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop

08000cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cec:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000cee:	4b08      	ldr	r3, [pc, #32]	; (8000d10 <HAL_InitTick+0x24>)
{
 8000cf0:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000cf2:	6818      	ldr	r0, [r3, #0]
 8000cf4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf8:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cfc:	f000 fc44 	bl	8001588 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d00:	2200      	movs	r2, #0
 8000d02:	4621      	mov	r1, r4
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	f000 fbfe 	bl	8001508 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	bd10      	pop	{r4, pc}
 8000d10:	20000000 	.word	0x20000000

08000d14 <HAL_Init>:
{
 8000d14:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d16:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <HAL_Init+0x30>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d1e:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d26:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d2e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d30:	2003      	movs	r0, #3
 8000d32:	f000 fbd7 	bl	80014e4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d36:	2000      	movs	r0, #0
 8000d38:	f7ff ffd8 	bl	8000cec <HAL_InitTick>
  HAL_MspInit();
 8000d3c:	f001 feca 	bl	8002ad4 <HAL_MspInit>
}
 8000d40:	2000      	movs	r0, #0
 8000d42:	bd08      	pop	{r3, pc}
 8000d44:	40023c00 	.word	0x40023c00

08000d48 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000d48:	4a02      	ldr	r2, [pc, #8]	; (8000d54 <HAL_IncTick+0xc>)
 8000d4a:	6813      	ldr	r3, [r2, #0]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	6013      	str	r3, [r2, #0]
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	200000f0 	.word	0x200000f0

08000d58 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d58:	4b01      	ldr	r3, [pc, #4]	; (8000d60 <HAL_GetTick+0x8>)
 8000d5a:	6818      	ldr	r0, [r3, #0]
}
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	200000f0 	.word	0x200000f0

08000d64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000d64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000d66:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d68:	f7ff fff6 	bl	8000d58 <HAL_GetTick>
  uint32_t wait = Delay;
 8000d6c:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d6e:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000d70:	4605      	mov	r5, r0
  {
     wait++;
 8000d72:	bf18      	it	ne
 8000d74:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d76:	f7ff ffef 	bl	8000d58 <HAL_GetTick>
 8000d7a:	1b40      	subs	r0, r0, r5
 8000d7c:	42a0      	cmp	r0, r4
 8000d7e:	d3fa      	bcc.n	8000d76 <HAL_Delay+0x12>
  {
  }
}
 8000d80:	b003      	add	sp, #12
 8000d82:	bd30      	pop	{r4, r5, pc}

08000d84 <HAL_CAN_ConfigFilter>:
  assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
  assert_param(IS_CAN_BANKNUMBER(sFilterConfig->BankNumber));
  
  filternbrbitpos = 1U << sFilterConfig->FilterNumber;
 8000d84:	694a      	ldr	r2, [r1, #20]
 8000d86:	2301      	movs	r3, #1
{
 8000d88:	b530      	push	{r4, r5, lr}
  filternbrbitpos = 1U << sFilterConfig->FilterNumber;
 8000d8a:	fa03 f502 	lsl.w	r5, r3, r2
#else
  can_ip = CAN1;
#endif
  
  /* Initialisation mode for the filter */
  can_ip->FMR |= (uint32_t)CAN_FMR_FINIT;
 8000d8e:	4b3c      	ldr	r3, [pc, #240]	; (8000e80 <HAL_CAN_ConfigFilter+0xfc>)
 8000d90:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
 8000d94:	f040 0001 	orr.w	r0, r0, #1
 8000d98:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200

#if defined (CAN2)  
  /* Select the start slave bank */
  can_ip->FMR &= ~((uint32_t)CAN_FMR_CAN2SB);
 8000d9c:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
 8000da0:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 8000da4:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
  can_ip->FMR |= (uint32_t)(sFilterConfig->BankNumber << 8U);
 8000da8:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
 8000dac:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8000dae:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 8000db2:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
#endif
     
  /* Filter Deactivation */
  can_ip->FA1R &= ~(uint32_t)filternbrbitpos;
 8000db6:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
 8000dba:	43ec      	mvns	r4, r5
 8000dbc:	4020      	ands	r0, r4
 8000dbe:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c

  /* Filter Scale */
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000dc2:	69c8      	ldr	r0, [r1, #28]
 8000dc4:	2800      	cmp	r0, #0
 8000dc6:	d136      	bne.n	8000e36 <HAL_CAN_ConfigFilter+0xb2>
  {
    /* 16-bit scale for the filter */
    can_ip->FS1R &= ~(uint32_t)filternbrbitpos;
 8000dc8:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 8000dcc:	4020      	ands	r0, r4
 8000dce:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
 8000dd2:	00d2      	lsls	r2, r2, #3

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    can_ip->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000dd4:	68c8      	ldr	r0, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000dd6:	888b      	ldrh	r3, [r1, #4]
 8000dd8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8000ddc:	f502 42c8 	add.w	r2, r2, #25600	; 0x6400
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000de0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    can_ip->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8000de4:	f8c2 3240 	str.w	r3, [r2, #576]	; 0x240

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    can_ip->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000de8:	6888      	ldr	r0, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000dea:	880b      	ldrh	r3, [r1, #0]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000dec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    can_ip->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 8000df0:	f8c2 3244 	str.w	r3, [r2, #580]	; 0x244
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
  }

  /* Filter Mode */
  if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000df4:	698b      	ldr	r3, [r1, #24]
 8000df6:	4822      	ldr	r0, [pc, #136]	; (8000e80 <HAL_CAN_ConfigFilter+0xfc>)
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d135      	bne.n	8000e68 <HAL_CAN_ConfigFilter+0xe4>
  {
    /*Id/Mask mode for the filter*/
    can_ip->FM1R &= ~(uint32_t)filternbrbitpos;
 8000dfc:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8000e00:	4023      	ands	r3, r4
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    can_ip->FM1R |= (uint32_t)filternbrbitpos;
 8000e02:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000e06:	690b      	ldr	r3, [r1, #16]
 8000e08:	4a1d      	ldr	r2, [pc, #116]	; (8000e80 <HAL_CAN_ConfigFilter+0xfc>)
 8000e0a:	bb8b      	cbnz	r3, 8000e70 <HAL_CAN_ConfigFilter+0xec>
  {
    /* FIFO 0 assignation for the filter */
    can_ip->FFA1R &= ~(uint32_t)filternbrbitpos;
 8000e0c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8000e10:	401c      	ands	r4, r3
 8000e12:	f8c0 4214 	str.w	r4, [r0, #532]	; 0x214
    /* FIFO 1 assignation for the filter */
    can_ip->FFA1R |= (uint32_t)filternbrbitpos;
  }
  
  /* Filter activation */
  if (sFilterConfig->FilterActivation == ENABLE)
 8000e16:	6a0b      	ldr	r3, [r1, #32]
 8000e18:	2b01      	cmp	r3, #1
  {
    can_ip->FA1R |= filternbrbitpos;
 8000e1a:	bf02      	ittt	eq
 8000e1c:	f8d2 321c 	ldreq.w	r3, [r2, #540]	; 0x21c
 8000e20:	432b      	orreq	r3, r5
 8000e22:	f8c2 321c 	streq.w	r3, [r2, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  can_ip->FMR &= ~((uint32_t)CAN_FMR_FINIT);
 8000e26:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8000e2a:	f023 0301 	bic.w	r3, r3, #1
 8000e2e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  
  /* Return function status */
  return HAL_OK;
}
 8000e32:	2000      	movs	r0, #0
 8000e34:	bd30      	pop	{r4, r5, pc}
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000e36:	2801      	cmp	r0, #1
 8000e38:	d1dc      	bne.n	8000df4 <HAL_CAN_ConfigFilter+0x70>
    can_ip->FS1R |= filternbrbitpos;
 8000e3a:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 8000e3e:	4328      	orrs	r0, r5
 8000e40:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e44:	680b      	ldr	r3, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e46:	8888      	ldrh	r0, [r1, #4]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e48:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e4c:	00d3      	lsls	r3, r2, #3
 8000e4e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e52:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000e56:	898a      	ldrh	r2, [r1, #12]
    can_ip->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8000e58:	f8c3 0240 	str.w	r0, [r3, #576]	; 0x240
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e5c:	6888      	ldr	r0, [r1, #8]
 8000e5e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    can_ip->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 8000e62:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 8000e66:	e7c5      	b.n	8000df4 <HAL_CAN_ConfigFilter+0x70>
    can_ip->FM1R |= (uint32_t)filternbrbitpos;
 8000e68:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8000e6c:	432b      	orrs	r3, r5
 8000e6e:	e7c8      	b.n	8000e02 <HAL_CAN_ConfigFilter+0x7e>
  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO1)
 8000e70:	2b01      	cmp	r3, #1
    can_ip->FFA1R |= (uint32_t)filternbrbitpos;
 8000e72:	bf02      	ittt	eq
 8000e74:	f8d2 3214 	ldreq.w	r3, [r2, #532]	; 0x214
 8000e78:	432b      	orreq	r3, r5
 8000e7a:	f8c2 3214 	streq.w	r3, [r2, #532]	; 0x214
 8000e7e:	e7ca      	b.n	8000e16 <HAL_CAN_ConfigFilter+0x92>
 8000e80:	40006400 	.word	0x40006400

08000e84 <HAL_CAN_Init>:
{
 8000e84:	b570      	push	{r4, r5, r6, lr}
  if(hcan == NULL)
 8000e86:	4604      	mov	r4, r0
 8000e88:	2800      	cmp	r0, #0
 8000e8a:	d072      	beq.n	8000f72 <HAL_CAN_Init+0xee>
  if(hcan->State == HAL_CAN_STATE_RESET)
 8000e8c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000e90:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e94:	b91b      	cbnz	r3, 8000e9e <HAL_CAN_Init+0x1a>
    hcan->Lock = HAL_UNLOCKED;
 8000e96:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    HAL_CAN_MspInit(hcan);
 8000e9a:	f001 fe53 	bl	8002b44 <HAL_CAN_MspInit>
  hcan->State = HAL_CAN_STATE_BUSY;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  hcan->Instance->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 8000ea4:	6823      	ldr	r3, [r4, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	f022 0202 	bic.w	r2, r2, #2
 8000eac:	601a      	str	r2, [r3, #0]
  hcan->Instance->MCR |= CAN_MCR_INRQ ;
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	f042 0201 	orr.w	r2, r2, #1
 8000eb4:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000eb6:	f7ff ff4f 	bl	8000d58 <HAL_GetTick>
 8000eba:	4606      	mov	r6, r0
  while((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8000ebc:	6823      	ldr	r3, [r4, #0]
 8000ebe:	685d      	ldr	r5, [r3, #4]
 8000ec0:	f015 0501 	ands.w	r5, r5, #1
 8000ec4:	d057      	beq.n	8000f76 <HAL_CAN_Init+0xf2>
  if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000ec6:	685a      	ldr	r2, [r3, #4]
 8000ec8:	07d1      	lsls	r1, r2, #31
 8000eca:	d54f      	bpl.n	8000f6c <HAL_CAN_Init+0xe8>
    if (hcan->Init.TTCM == ENABLE)
 8000ecc:	69a2      	ldr	r2, [r4, #24]
 8000ece:	2a01      	cmp	r2, #1
      hcan->Instance->MCR |= CAN_MCR_TTCM;
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	bf0c      	ite	eq
 8000ed4:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 8000ed8:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8000edc:	601a      	str	r2, [r3, #0]
    if (hcan->Init.ABOM == ENABLE)
 8000ede:	69e2      	ldr	r2, [r4, #28]
 8000ee0:	2a01      	cmp	r2, #1
      hcan->Instance->MCR |= CAN_MCR_ABOM;
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	bf0c      	ite	eq
 8000ee6:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 8000eea:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8000eee:	601a      	str	r2, [r3, #0]
    if (hcan->Init.AWUM == ENABLE)
 8000ef0:	6a22      	ldr	r2, [r4, #32]
 8000ef2:	2a01      	cmp	r2, #1
      hcan->Instance->MCR |= CAN_MCR_AWUM;
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	bf0c      	ite	eq
 8000ef8:	f042 0220 	orreq.w	r2, r2, #32
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 8000efc:	f022 0220 	bicne.w	r2, r2, #32
 8000f00:	601a      	str	r2, [r3, #0]
    if (hcan->Init.NART == ENABLE)
 8000f02:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f04:	2a01      	cmp	r2, #1
      hcan->Instance->MCR |= CAN_MCR_NART;
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	bf0c      	ite	eq
 8000f0a:	f042 0210 	orreq.w	r2, r2, #16
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_NART;
 8000f0e:	f022 0210 	bicne.w	r2, r2, #16
 8000f12:	601a      	str	r2, [r3, #0]
    if (hcan->Init.RFLM == ENABLE)
 8000f14:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000f16:	2a01      	cmp	r2, #1
      hcan->Instance->MCR |= CAN_MCR_RFLM;
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	bf0c      	ite	eq
 8000f1c:	f042 0208 	orreq.w	r2, r2, #8
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 8000f20:	f022 0208 	bicne.w	r2, r2, #8
 8000f24:	601a      	str	r2, [r3, #0]
    if (hcan->Init.TXFP == ENABLE)
 8000f26:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000f28:	2a01      	cmp	r2, #1
      hcan->Instance->MCR |= CAN_MCR_TXFP;
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	bf0c      	ite	eq
 8000f2e:	f042 0204 	orreq.w	r2, r2, #4
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 8000f32:	f022 0204 	bicne.w	r2, r2, #4
 8000f36:	601a      	str	r2, [r3, #0]
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 8000f38:	68e1      	ldr	r1, [r4, #12]
 8000f3a:	68a2      	ldr	r2, [r4, #8]
 8000f3c:	430a      	orrs	r2, r1
                ((uint32_t)hcan->Init.SJW) | \
 8000f3e:	6921      	ldr	r1, [r4, #16]
 8000f40:	430a      	orrs	r2, r1
                ((uint32_t)hcan->Init.BS1) | \
 8000f42:	6961      	ldr	r1, [r4, #20]
 8000f44:	430a      	orrs	r2, r1
               ((uint32_t)hcan->Init.Prescaler - 1U);
 8000f46:	6861      	ldr	r1, [r4, #4]
 8000f48:	3901      	subs	r1, #1
                ((uint32_t)hcan->Init.BS2) | \
 8000f4a:	430a      	orrs	r2, r1
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 8000f4c:	61da      	str	r2, [r3, #28]
    hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	f022 0201 	bic.w	r2, r2, #1
 8000f54:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000f56:	f7ff feff 	bl	8000d58 <HAL_GetTick>
 8000f5a:	4605      	mov	r5, r0
   while((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000f5c:	6823      	ldr	r3, [r4, #0]
 8000f5e:	685a      	ldr	r2, [r3, #4]
 8000f60:	07d2      	lsls	r2, r2, #31
 8000f62:	d413      	bmi.n	8000f8c <HAL_CAN_Init+0x108>
    if ((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8000f64:	6858      	ldr	r0, [r3, #4]
 8000f66:	f010 0001 	ands.w	r0, r0, #1
 8000f6a:	d01b      	beq.n	8000fa4 <HAL_CAN_Init+0x120>
    hcan->State = HAL_CAN_STATE_ERROR;
 8000f6c:	2304      	movs	r3, #4
 8000f6e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 8000f72:	2001      	movs	r0, #1
}
 8000f74:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
 8000f76:	f7ff feef 	bl	8000d58 <HAL_GetTick>
 8000f7a:	1b80      	subs	r0, r0, r6
 8000f7c:	280a      	cmp	r0, #10
 8000f7e:	d99d      	bls.n	8000ebc <HAL_CAN_Init+0x38>
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000f80:	2003      	movs	r0, #3
 8000f82:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hcan);
 8000f86:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      return HAL_TIMEOUT;
 8000f8a:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
 8000f8c:	f7ff fee4 	bl	8000d58 <HAL_GetTick>
 8000f90:	1b40      	subs	r0, r0, r5
 8000f92:	280a      	cmp	r0, #10
 8000f94:	d9e2      	bls.n	8000f5c <HAL_CAN_Init+0xd8>
       hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000f96:	2003      	movs	r0, #3
       __HAL_UNLOCK(hcan);
 8000f98:	2300      	movs	r3, #0
       hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000f9a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
       __HAL_UNLOCK(hcan);
 8000f9e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
       return HAL_TIMEOUT;
 8000fa2:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_READY;
 8000fa4:	2301      	movs	r3, #1
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fa6:	6420      	str	r0, [r4, #64]	; 0x40
    hcan->State = HAL_CAN_STATE_READY;
 8000fa8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8000fac:	bd70      	pop	{r4, r5, r6, pc}
	...

08000fb0 <HAL_CAN_Transmit>:
  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(hcan->pTxMsg->IDE));
  assert_param(IS_CAN_RTR(hcan->pTxMsg->RTR));
  assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));

  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 8000fb0:	6802      	ldr	r2, [r0, #0]
{
 8000fb2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 8000fb6:	6893      	ldr	r3, [r2, #8]
 8000fb8:	015b      	lsls	r3, r3, #5
{
 8000fba:	4604      	mov	r4, r0
 8000fbc:	460f      	mov	r7, r1
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 8000fbe:	d406      	bmi.n	8000fce <HAL_CAN_Transmit+0x1e>
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 8000fc0:	6893      	ldr	r3, [r2, #8]
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 8000fc2:	011d      	lsls	r5, r3, #4
 8000fc4:	d403      	bmi.n	8000fce <HAL_CAN_Transmit+0x1e>
     ((hcan->Instance->TSR&CAN_TSR_TME2) == CAN_TSR_TME2))
 8000fc6:	6893      	ldr	r3, [r2, #8]
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 8000fc8:	00d8      	lsls	r0, r3, #3
 8000fca:	f140 80b1 	bpl.w	8001130 <HAL_CAN_Transmit+0x180>
  {  
    /* Process locked */
    __HAL_LOCK(hcan);
 8000fce:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	f000 80b2 	beq.w	800113c <HAL_CAN_Transmit+0x18c>
 8000fd8:	2301      	movs	r3, #1
 8000fda:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  
    /* Change CAN state */
    switch(hcan->State)
 8000fde:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	2b32      	cmp	r3, #50	; 0x32
 8000fe6:	d066      	beq.n	80010b6 <HAL_CAN_Transmit+0x106>
 8000fe8:	2b62      	cmp	r3, #98	; 0x62
 8000fea:	d066      	beq.n	80010ba <HAL_CAN_Transmit+0x10a>
 8000fec:	2b22      	cmp	r3, #34	; 0x22
 8000fee:	d166      	bne.n	80010be <HAL_CAN_Transmit+0x10e>
    {
      case(HAL_CAN_STATE_BUSY_RX0):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 8000ff0:	2342      	movs	r3, #66	; 0x42
          break;
      case(HAL_CAN_STATE_BUSY_RX0_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
          break;
      default: /* HAL_CAN_STATE_READY */
          hcan->State = HAL_CAN_STATE_BUSY_TX;
 8000ff2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          break;
    }
  
    /* Select one empty transmit mailbox */
    if ((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 8000ff6:	6893      	ldr	r3, [r2, #8]
 8000ff8:	0159      	lsls	r1, r3, #5
 8000ffa:	d462      	bmi.n	80010c2 <HAL_CAN_Transmit+0x112>
    {
      transmitmailbox = CAN_TXMAILBOX_0;
    }
    else if ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 8000ffc:	6893      	ldr	r3, [r2, #8]
    {
      transmitmailbox = CAN_TXMAILBOX_1;
    }
    else
    {
      transmitmailbox = CAN_TXMAILBOX_2;
 8000ffe:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001002:	bf14      	ite	ne
 8001004:	2601      	movne	r6, #1
 8001006:	2602      	moveq	r6, #2
 8001008:	ea4f 1e06 	mov.w	lr, r6, lsl #4
 800100c:	eb02 030e 	add.w	r3, r2, lr
    }

    /* Set up the Id */
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 8001010:	6b20      	ldr	r0, [r4, #48]	; 0x30
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 8001012:	f8d3 1180 	ldr.w	r1, [r3, #384]	; 0x180
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 8001016:	6885      	ldr	r5, [r0, #8]
 8001018:	f8d0 c00c 	ldr.w	ip, [r0, #12]
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 800101c:	f001 0101 	and.w	r1, r1, #1
 8001020:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 8001024:	2d00      	cmp	r5, #0
 8001026:	d14e      	bne.n	80010c6 <HAL_CAN_Transmit+0x116>
    {
      assert_param(IS_CAN_STDID(hcan->pTxMsg->StdId));  
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << 21U) | \
 8001028:	6805      	ldr	r5, [r0, #0]
 800102a:	f8d3 1180 	ldr.w	r1, [r3, #384]	; 0x180
 800102e:	ea4c 5545 	orr.w	r5, ip, r5, lsl #21
 8001032:	430d      	orrs	r5, r1
                                                  hcan->pTxMsg->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(hcan->pTxMsg->ExtId));
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << 3U) | \
 8001034:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
                                                  hcan->pTxMsg->RTR);
    }
    
    /* Set up the DLC */
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= (uint32_t)0xFFFFFFF0U;
 8001038:	f8d3 5184 	ldr.w	r5, [r3, #388]	; 0x184
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
 800103c:	6901      	ldr	r1, [r0, #16]
  
    /* Get tick */
    tickstart = HAL_GetTick();
  
    /* Check End of transmission flag */
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 800103e:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8001148 <HAL_CAN_Transmit+0x198>
 8001042:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800114c <HAL_CAN_Transmit+0x19c>
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
 8001046:	f001 010f 	and.w	r1, r1, #15
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= (uint32_t)0xFFFFFFF0U;
 800104a:	f025 050f 	bic.w	r5, r5, #15
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
 800104e:	6101      	str	r1, [r0, #16]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= (uint32_t)0xFFFFFFF0U;
 8001050:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
 8001054:	f8d3 5184 	ldr.w	r5, [r3, #388]	; 0x184
 8001058:	4329      	orrs	r1, r5
 800105a:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
    hcan->Instance->sTxMailBox[transmitmailbox].TDLR = (((uint32_t)hcan->pTxMsg->Data[3U] << 24U) | 
 800105e:	4472      	add	r2, lr
                                             ((uint32_t)hcan->pTxMsg->Data[1U] << 8U) | 
 8001060:	6941      	ldr	r1, [r0, #20]
    hcan->Instance->sTxMailBox[transmitmailbox].TDLR = (((uint32_t)hcan->pTxMsg->Data[3U] << 24U) | 
 8001062:	f8c2 1188 	str.w	r1, [r2, #392]	; 0x188
                                             ((uint32_t)hcan->pTxMsg->Data[5U] << 8U) |
 8001066:	6981      	ldr	r1, [r0, #24]
    hcan->Instance->sTxMailBox[transmitmailbox].TDHR = (((uint32_t)hcan->pTxMsg->Data[7U] << 24U) | 
 8001068:	f8c2 118c 	str.w	r1, [r2, #396]	; 0x18c
    hcan->Instance->sTxMailBox[transmitmailbox].TIR |= CAN_TI0R_TXRQ;
 800106c:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8001070:	f042 0201 	orr.w	r2, r2, #1
 8001074:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    tickstart = HAL_GetTick();
 8001078:	f7ff fe6e 	bl	8000d58 <HAL_GetTick>
 800107c:	4605      	mov	r5, r0
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 800107e:	4a31      	ldr	r2, [pc, #196]	; (8001144 <HAL_CAN_Transmit+0x194>)
 8001080:	6823      	ldr	r3, [r4, #0]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	2e00      	cmp	r6, #0
 8001086:	d145      	bne.n	8001114 <HAL_CAN_Transmit+0x164>
 8001088:	ea32 0303 	bics.w	r3, r2, r3
 800108c:	bf14      	ite	ne
 800108e:	2301      	movne	r3, #1
 8001090:	2300      	moveq	r3, #0
 8001092:	bb13      	cbnz	r3, 80010da <HAL_CAN_Transmit+0x12a>
        }
      }
    }

    /* Change CAN state */
    switch(hcan->State)
 8001094:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b52      	cmp	r3, #82	; 0x52
 800109c:	d042      	beq.n	8001124 <HAL_CAN_Transmit+0x174>
 800109e:	2b72      	cmp	r3, #114	; 0x72
 80010a0:	d042      	beq.n	8001128 <HAL_CAN_Transmit+0x178>
 80010a2:	2b42      	cmp	r3, #66	; 0x42
 80010a4:	d142      	bne.n	800112c <HAL_CAN_Transmit+0x17c>
    {
      case(HAL_CAN_STATE_BUSY_TX_RX0):
          hcan->State = HAL_CAN_STATE_BUSY_RX0;
 80010a6:	2322      	movs	r3, #34	; 0x22
          hcan->State = HAL_CAN_STATE_READY;
          break;
    }

    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 80010a8:	2000      	movs	r0, #0
          hcan->State = HAL_CAN_STATE_READY;
 80010aa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hcan);
 80010ae:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    
    /* Return function status */
    return HAL_OK;
 80010b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 80010b6:	2352      	movs	r3, #82	; 0x52
 80010b8:	e79b      	b.n	8000ff2 <HAL_CAN_Transmit+0x42>
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 80010ba:	2372      	movs	r3, #114	; 0x72
 80010bc:	e799      	b.n	8000ff2 <HAL_CAN_Transmit+0x42>
          hcan->State = HAL_CAN_STATE_BUSY_TX;
 80010be:	2312      	movs	r3, #18
 80010c0:	e797      	b.n	8000ff2 <HAL_CAN_Transmit+0x42>
      transmitmailbox = CAN_TXMAILBOX_0;
 80010c2:	2600      	movs	r6, #0
 80010c4:	e7a0      	b.n	8001008 <HAL_CAN_Transmit+0x58>
                                                  hcan->pTxMsg->IDE | \
 80010c6:	6841      	ldr	r1, [r0, #4]
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << 3U) | \
 80010c8:	f8d3 8180 	ldr.w	r8, [r3, #384]	; 0x180
                                                  hcan->pTxMsg->IDE | \
 80010cc:	ea45 050c 	orr.w	r5, r5, ip
 80010d0:	ea45 05c1 	orr.w	r5, r5, r1, lsl #3
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << 3U) | \
 80010d4:	ea45 0508 	orr.w	r5, r5, r8
 80010d8:	e7ac      	b.n	8001034 <HAL_CAN_Transmit+0x84>
      if(Timeout != HAL_MAX_DELAY)
 80010da:	1c7b      	adds	r3, r7, #1
 80010dc:	d0d0      	beq.n	8001080 <HAL_CAN_Transmit+0xd0>
       if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80010de:	b95f      	cbnz	r7, 80010f8 <HAL_CAN_Transmit+0x148>
         hcan->State = HAL_CAN_STATE_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80010e6:	6823      	ldr	r3, [r4, #0]
         __HAL_CAN_CANCEL_TRANSMIT(hcan, transmitmailbox);
 80010e8:	b166      	cbz	r6, 8001104 <HAL_CAN_Transmit+0x154>
 80010ea:	2e01      	cmp	r6, #1
 80010ec:	bf0c      	ite	eq
 80010ee:	f44f 4200 	moveq.w	r2, #32768	; 0x8000
 80010f2:	f44f 0200 	movne.w	r2, #8388608	; 0x800000
 80010f6:	e006      	b.n	8001106 <HAL_CAN_Transmit+0x156>
       if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80010f8:	f7ff fe2e 	bl	8000d58 <HAL_GetTick>
 80010fc:	1b40      	subs	r0, r0, r5
 80010fe:	4287      	cmp	r7, r0
 8001100:	d2bd      	bcs.n	800107e <HAL_CAN_Transmit+0xce>
 8001102:	e7ed      	b.n	80010e0 <HAL_CAN_Transmit+0x130>
         __HAL_CAN_CANCEL_TRANSMIT(hcan, transmitmailbox);
 8001104:	2280      	movs	r2, #128	; 0x80
 8001106:	609a      	str	r2, [r3, #8]
         __HAL_UNLOCK(hcan);
 8001108:	2300      	movs	r3, #0
 800110a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
         return HAL_TIMEOUT;
 800110e:	2003      	movs	r0, #3
 8001110:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 8001114:	2e01      	cmp	r6, #1
 8001116:	d102      	bne.n	800111e <HAL_CAN_Transmit+0x16e>
 8001118:	ea39 0303 	bics.w	r3, r9, r3
 800111c:	e7b6      	b.n	800108c <HAL_CAN_Transmit+0xdc>
 800111e:	ea38 0303 	bics.w	r3, r8, r3
 8001122:	e7b3      	b.n	800108c <HAL_CAN_Transmit+0xdc>
          hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8001124:	2332      	movs	r3, #50	; 0x32
 8001126:	e7bf      	b.n	80010a8 <HAL_CAN_Transmit+0xf8>
          hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 8001128:	2362      	movs	r3, #98	; 0x62
 800112a:	e7bd      	b.n	80010a8 <HAL_CAN_Transmit+0xf8>
          hcan->State = HAL_CAN_STATE_READY;
 800112c:	2301      	movs	r3, #1
 800112e:	e7bb      	b.n	80010a8 <HAL_CAN_Transmit+0xf8>
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_ERROR; 
 8001130:	2304      	movs	r3, #4
 8001132:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

    /* Return function status */
    return HAL_ERROR;
 8001136:	2001      	movs	r0, #1
 8001138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hcan);
 800113c:	2002      	movs	r0, #2
  }
}
 800113e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001142:	bf00      	nop
 8001144:	04000003 	.word	0x04000003
 8001148:	10030000 	.word	0x10030000
 800114c:	08000300 	.word	0x08000300

08001150 <HAL_CAN_Receive_IT>:
  *         the configuration information for the specified CAN.  
  * @param  FIFONumber Specify the FIFO number    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 8001150:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_CAN_FIFO(FIFONumber));
  
  /* Check if CAN state is not busy for RX FIFO0 */
  if((FIFONumber == CAN_FIFO0) && ((hcan->State == HAL_CAN_STATE_BUSY_RX0) ||         \
 8001152:	2900      	cmp	r1, #0
 8001154:	d136      	bne.n	80011c4 <HAL_CAN_Receive_IT+0x74>
 8001156:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800115a:	2b22      	cmp	r3, #34	; 0x22
 800115c:	d050      	beq.n	8001200 <HAL_CAN_Receive_IT+0xb0>
                                   (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0) ||      \
 800115e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if((FIFONumber == CAN_FIFO0) && ((hcan->State == HAL_CAN_STATE_BUSY_RX0) ||         \
 8001162:	2b42      	cmp	r3, #66	; 0x42
  {
    return HAL_BUSY;
  }

  /* Check if CAN state is not busy for RX FIFO1 */
  if((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||         \
 8001164:	d04c      	beq.n	8001200 <HAL_CAN_Receive_IT+0xb0>
                                   (hcan->State == HAL_CAN_STATE_BUSY_TX_RX1) ||      \
                                   (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 8001166:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
                                   (hcan->State == HAL_CAN_STATE_BUSY_TX_RX1) ||      \
 800116a:	2b62      	cmp	r3, #98	; 0x62
 800116c:	d048      	beq.n	8001200 <HAL_CAN_Receive_IT+0xb0>
                                   (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0_RX1)))
 800116e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
                                   (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 8001172:	2b72      	cmp	r3, #114	; 0x72
 8001174:	d044      	beq.n	8001200 <HAL_CAN_Receive_IT+0xb0>
  {
    return HAL_BUSY;
  }

  /* Process locked */
  __HAL_LOCK(hcan);
 8001176:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800117a:	2b01      	cmp	r3, #1
 800117c:	d040      	beq.n	8001200 <HAL_CAN_Receive_IT+0xb0>
 800117e:	2301      	movs	r3, #1
 8001180:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Change CAN state */
  if(FIFONumber == CAN_FIFO0)
  {
    switch(hcan->State)
 8001184:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001188:	b2db      	uxtb	r3, r3
  if(FIFONumber == CAN_FIFO0)
 800118a:	bb29      	cbnz	r1, 80011d8 <HAL_CAN_Receive_IT+0x88>
    switch(hcan->State)
 800118c:	2b32      	cmp	r3, #50	; 0x32
 800118e:	d02b      	beq.n	80011e8 <HAL_CAN_Receive_IT+0x98>
 8001190:	2b52      	cmp	r3, #82	; 0x52
 8001192:	d02b      	beq.n	80011ec <HAL_CAN_Receive_IT+0x9c>
 8001194:	2b12      	cmp	r3, #18
    {
      case(HAL_CAN_STATE_BUSY_TX):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 8001196:	bf0c      	ite	eq
 8001198:	2342      	moveq	r3, #66	; 0x42
        break;
      case(HAL_CAN_STATE_BUSY_TX_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
        break;
      default: /* HAL_CAN_STATE_READY */
        hcan->State = HAL_CAN_STATE_BUSY_RX0;
 800119a:	2322      	movne	r3, #34	; 0x22
        break;
      case(HAL_CAN_STATE_BUSY_TX_RX0):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
        break;
      default: /* HAL_CAN_STATE_READY */
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 800119c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  /*  - Enable Error passive Interrupt */
  /*  - Enable Bus-off Interrupt */
  /*  - Enable Last error code Interrupt */
  /*  - Enable Error Interrupt */
  /*  - Enable Transmit mailbox empty Interrupt */
  __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 80011a0:	6802      	ldr	r2, [r0, #0]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 80011a6:	6954      	ldr	r4, [r2, #20]
 80011a8:	f444 440f 	orr.w	r4, r4, #36608	; 0x8f00
 80011ac:	f044 0401 	orr.w	r4, r4, #1
 80011b0:	6154      	str	r4, [r2, #20]
                            CAN_IT_LEC |
                            CAN_IT_ERR |
                            CAN_IT_TME);

  /* Process unlocked */
   __HAL_UNLOCK(hcan);
 80011b2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  if(FIFONumber == CAN_FIFO0)
 80011b6:	b9e9      	cbnz	r1, 80011f4 <HAL_CAN_Receive_IT+0xa4>
  {
    /* Enable FIFO 0 overrun and message pending Interrupt */
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV0 | CAN_IT_FMP0);
 80011b8:	6953      	ldr	r3, [r2, #20]
 80011ba:	f043 030a 	orr.w	r3, r3, #10
 80011be:	6153      	str	r3, [r2, #20]
    /* Enable FIFO 1 overrun and message pending Interrupt */
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
  }

  /* Return function status */
  return HAL_OK;
 80011c0:	4608      	mov	r0, r1
 80011c2:	bd10      	pop	{r4, pc}
  if((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||         \
 80011c4:	2901      	cmp	r1, #1
 80011c6:	d1d6      	bne.n	8001176 <HAL_CAN_Receive_IT+0x26>
 80011c8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80011cc:	2b32      	cmp	r3, #50	; 0x32
 80011ce:	d017      	beq.n	8001200 <HAL_CAN_Receive_IT+0xb0>
                                   (hcan->State == HAL_CAN_STATE_BUSY_TX_RX1) ||      \
 80011d0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||         \
 80011d4:	2b52      	cmp	r3, #82	; 0x52
 80011d6:	e7c5      	b.n	8001164 <HAL_CAN_Receive_IT+0x14>
    switch(hcan->State)
 80011d8:	2b22      	cmp	r3, #34	; 0x22
 80011da:	d005      	beq.n	80011e8 <HAL_CAN_Receive_IT+0x98>
 80011dc:	2b42      	cmp	r3, #66	; 0x42
 80011de:	d005      	beq.n	80011ec <HAL_CAN_Receive_IT+0x9c>
 80011e0:	2b12      	cmp	r3, #18
 80011e2:	d105      	bne.n	80011f0 <HAL_CAN_Receive_IT+0xa0>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 80011e4:	2352      	movs	r3, #82	; 0x52
 80011e6:	e7d9      	b.n	800119c <HAL_CAN_Receive_IT+0x4c>
        hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 80011e8:	2362      	movs	r3, #98	; 0x62
 80011ea:	e7d7      	b.n	800119c <HAL_CAN_Receive_IT+0x4c>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 80011ec:	2372      	movs	r3, #114	; 0x72
 80011ee:	e7d5      	b.n	800119c <HAL_CAN_Receive_IT+0x4c>
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 80011f0:	2332      	movs	r3, #50	; 0x32
 80011f2:	e7d3      	b.n	800119c <HAL_CAN_Receive_IT+0x4c>
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
 80011f4:	6951      	ldr	r1, [r2, #20]
 80011f6:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 80011fa:	6151      	str	r1, [r2, #20]
  return HAL_OK;
 80011fc:	4618      	mov	r0, r3
 80011fe:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8001200:	2002      	movs	r0, #2
}
 8001202:	bd10      	pop	{r4, pc}

08001204 <HAL_CAN_TxCpltCallback>:
 8001204:	4770      	bx	lr

08001206 <CAN_Receive_IT>:
  * @param  FIFONumber Specify the FIFO number    
  * @retval HAL status
  * @retval None
  */
static HAL_StatusTypeDef CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 8001206:	b538      	push	{r3, r4, r5, lr}
  CanRxMsgTypeDef* pRxMsg = NULL;

  /* Set RxMsg pointer */
  if(FIFONumber == CAN_FIFO0)
  {
    pRxMsg = hcan->pRxMsg;
 8001208:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }
  else /* FIFONumber == CAN_FIFO1 */
  {
    pRxMsg = hcan->pRx1Msg;
 800120a:	6b83      	ldr	r3, [r0, #56]	; 0x38
    pRxMsg = hcan->pRxMsg;
 800120c:	2900      	cmp	r1, #0
 800120e:	bf08      	it	eq
 8001210:	4613      	moveq	r3, r2
  }

  /* Get the Id */
  pRxMsg->IDE = (uint8_t)0x04 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 8001212:	6802      	ldr	r2, [r0, #0]
 8001214:	eb02 1401 	add.w	r4, r2, r1, lsl #4
 8001218:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
 800121c:	f005 0504 	and.w	r5, r5, #4
 8001220:	609d      	str	r5, [r3, #8]
  if (pRxMsg->IDE == CAN_ID_STD)
 8001222:	2d00      	cmp	r5, #0
 8001224:	d151      	bne.n	80012ca <CAN_Receive_IT+0xc4>
  {
    pRxMsg->StdId = 0x000007FFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 21U);
 8001226:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
 800122a:	0d6d      	lsrs	r5, r5, #21
 800122c:	601d      	str	r5, [r3, #0]
  else
  {
    pRxMsg->ExtId = 0x1FFFFFFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 3U);
  }
  
  pRxMsg->RTR = (uint8_t)0x02 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 800122e:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
 8001232:	f005 0502 	and.w	r5, r5, #2
 8001236:	60dd      	str	r5, [r3, #12]
  /* Get the DLC */
  pRxMsg->DLC = (uint8_t)0x0F & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
 8001238:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
  /* Get the FIFONumber */
  pRxMsg->FIFONumber = FIFONumber;
  /* Get the FMI */
  pRxMsg->FMI = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDTR >> 8U);
 800123c:	f8d4 41b4 	ldr.w	r4, [r4, #436]	; 0x1b4
  pRxMsg->FIFONumber = FIFONumber;
 8001240:	6219      	str	r1, [r3, #32]
  pRxMsg->FMI = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDTR >> 8U);
 8001242:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8001246:	61dc      	str	r4, [r3, #28]
  /* Get the data field */
  pRxMsg->Data[0] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR;
 8001248:	eb02 1401 	add.w	r4, r2, r1, lsl #4
  pRxMsg->DLC = (uint8_t)0x0F & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
 800124c:	f005 050f 	and.w	r5, r5, #15
 8001250:	611d      	str	r5, [r3, #16]
  pRxMsg->Data[0] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR;
 8001252:	f8d4 51b8 	ldr.w	r5, [r4, #440]	; 0x1b8
 8001256:	751d      	strb	r5, [r3, #20]
  pRxMsg->Data[1] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 8U);
 8001258:	f8d4 51b8 	ldr.w	r5, [r4, #440]	; 0x1b8
 800125c:	0a2d      	lsrs	r5, r5, #8
 800125e:	755d      	strb	r5, [r3, #21]
  pRxMsg->Data[2] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 16U);
 8001260:	f8d4 51b8 	ldr.w	r5, [r4, #440]	; 0x1b8
 8001264:	0c2d      	lsrs	r5, r5, #16
 8001266:	759d      	strb	r5, [r3, #22]
  pRxMsg->Data[3] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 24U);
 8001268:	f8d4 51b8 	ldr.w	r5, [r4, #440]	; 0x1b8
 800126c:	0e2d      	lsrs	r5, r5, #24
 800126e:	75dd      	strb	r5, [r3, #23]
  pRxMsg->Data[4] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR;
 8001270:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
 8001274:	761d      	strb	r5, [r3, #24]
  pRxMsg->Data[5] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 8U);
 8001276:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
 800127a:	0a2d      	lsrs	r5, r5, #8
 800127c:	765d      	strb	r5, [r3, #25]
  pRxMsg->Data[6] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 16U);
 800127e:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
 8001282:	0c2d      	lsrs	r5, r5, #16
 8001284:	769d      	strb	r5, [r3, #26]
  pRxMsg->Data[7] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 24U);
 8001286:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 800128a:	0e24      	lsrs	r4, r4, #24
 800128c:	76dc      	strb	r4, [r3, #27]
 800128e:	2320      	movs	r3, #32
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8001290:	bb01      	cbnz	r1, 80012d4 <CAN_Receive_IT+0xce>
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
 8001292:	60d3      	str	r3, [r2, #12]

    /* Disable FIFO 0 overrun and message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV0 | CAN_IT_FMP0);
 8001294:	6953      	ldr	r3, [r2, #20]
 8001296:	f023 030a 	bic.w	r3, r3, #10
  else /* FIFONumber == CAN_FIFO1 */
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);

    /* Disable FIFO 1 overrun and message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
 800129a:	6153      	str	r3, [r2, #20]
  }

  tmp1 = hcan->State;
 800129c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if((tmp1 == HAL_CAN_STATE_BUSY_RX0) || (tmp1 == HAL_CAN_STATE_BUSY_RX1))
 80012a0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 80012a4:	2b22      	cmp	r3, #34	; 0x22
  {   
    /* Disable Error warning, Error passive, Bus-off, Last error code
       and Error Interrupts */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 80012a6:	bf01      	itttt	eq
 80012a8:	6802      	ldreq	r2, [r0, #0]
 80012aa:	6953      	ldreq	r3, [r2, #20]
 80012ac:	f423 430f 	biceq.w	r3, r3, #36608	; 0x8f00
 80012b0:	6153      	streq	r3, [r2, #20]
  }

  /* Change CAN state */
  if (FIFONumber == CAN_FIFO0)
  {
    switch(hcan->State)
 80012b2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80012b6:	b2db      	uxtb	r3, r3
  if (FIFONumber == CAN_FIFO0)
 80012b8:	b9d1      	cbnz	r1, 80012f0 <CAN_Receive_IT+0xea>
    switch(hcan->State)
 80012ba:	2b62      	cmp	r3, #98	; 0x62
 80012bc:	d00f      	beq.n	80012de <CAN_Receive_IT+0xd8>
 80012be:	2b72      	cmp	r3, #114	; 0x72
 80012c0:	d014      	beq.n	80012ec <CAN_Receive_IT+0xe6>
 80012c2:	2b42      	cmp	r3, #66	; 0x42
        break;
    }
  }
  else /* FIFONumber == CAN_FIFO1 */
  {
    switch(hcan->State)
 80012c4:	d11e      	bne.n	8001304 <CAN_Receive_IT+0xfe>
    {
      case(HAL_CAN_STATE_BUSY_TX_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX;
 80012c6:	2312      	movs	r3, #18
 80012c8:	e00a      	b.n	80012e0 <CAN_Receive_IT+0xda>
    pRxMsg->ExtId = 0x1FFFFFFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 3U);
 80012ca:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
 80012ce:	08ed      	lsrs	r5, r5, #3
 80012d0:	605d      	str	r5, [r3, #4]
 80012d2:	e7ac      	b.n	800122e <CAN_Receive_IT+0x28>
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
 80012d4:	6113      	str	r3, [r2, #16]
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
 80012d6:	6953      	ldr	r3, [r2, #20]
 80012d8:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 80012dc:	e7dd      	b.n	800129a <CAN_Receive_IT+0x94>
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 80012de:	2332      	movs	r3, #50	; 0x32
        break;
      case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
        break;
      default: /* HAL_CAN_STATE_BUSY_RX1 */
        hcan->State = HAL_CAN_STATE_READY;
 80012e0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        break;
    }
  }

  /* Receive complete callback */ 
  HAL_CAN_RxCpltCallback(hcan);
 80012e4:	f001 f9f0 	bl	80026c8 <HAL_CAN_RxCpltCallback>

  /* Return function status */
  return HAL_OK;
}
 80012e8:	2000      	movs	r0, #0
 80012ea:	bd38      	pop	{r3, r4, r5, pc}
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 80012ec:	2352      	movs	r3, #82	; 0x52
 80012ee:	e7f7      	b.n	80012e0 <CAN_Receive_IT+0xda>
    switch(hcan->State)
 80012f0:	2b62      	cmp	r3, #98	; 0x62
 80012f2:	d003      	beq.n	80012fc <CAN_Receive_IT+0xf6>
 80012f4:	2b72      	cmp	r3, #114	; 0x72
 80012f6:	d003      	beq.n	8001300 <CAN_Receive_IT+0xfa>
 80012f8:	2b52      	cmp	r3, #82	; 0x52
 80012fa:	e7e3      	b.n	80012c4 <CAN_Receive_IT+0xbe>
        hcan->State = HAL_CAN_STATE_BUSY_RX0;
 80012fc:	2322      	movs	r3, #34	; 0x22
 80012fe:	e7ef      	b.n	80012e0 <CAN_Receive_IT+0xda>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 8001300:	2342      	movs	r3, #66	; 0x42
 8001302:	e7ed      	b.n	80012e0 <CAN_Receive_IT+0xda>
        hcan->State = HAL_CAN_STATE_READY;
 8001304:	2301      	movs	r3, #1
 8001306:	e7eb      	b.n	80012e0 <CAN_Receive_IT+0xda>

08001308 <HAL_CAN_ErrorCallback>:
{
 8001308:	4770      	bx	lr
	...

0800130c <HAL_CAN_IRQHandler>:
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0);
 800130c:	6803      	ldr	r3, [r0, #0]
{
 800130e:	b570      	push	{r4, r5, r6, lr}
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0);
 8001310:	68dd      	ldr	r5, [r3, #12]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FOV0);
 8001312:	695a      	ldr	r2, [r3, #20]
  if(tmp1 && tmp2)
 8001314:	f015 0510 	ands.w	r5, r5, #16
{
 8001318:	4604      	mov	r4, r0
  if(tmp1 && tmp2)
 800131a:	d006      	beq.n	800132a <HAL_CAN_IRQHandler+0x1e>
 800131c:	f012 0508 	ands.w	r5, r2, #8
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001320:	bf1e      	ittt	ne
 8001322:	2210      	movne	r2, #16
 8001324:	60da      	strne	r2, [r3, #12]
    errorcode |= HAL_CAN_ERROR_FOV0;
 8001326:	f44f 7500 	movne.w	r5, #512	; 0x200
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV1);
 800132a:	6919      	ldr	r1, [r3, #16]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FOV1);
 800132c:	695a      	ldr	r2, [r3, #20]
  if(tmp1 && tmp2)
 800132e:	06c9      	lsls	r1, r1, #27
 8001330:	d505      	bpl.n	800133e <HAL_CAN_IRQHandler+0x32>
 8001332:	0652      	lsls	r2, r2, #25
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001334:	bf42      	ittt	mi
 8001336:	2210      	movmi	r2, #16
    errorcode |= HAL_CAN_ERROR_FOV1;
 8001338:	f445 6580 	orrmi.w	r5, r5, #1024	; 0x400
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800133c:	611a      	strmi	r2, [r3, #16]
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
 800133e:	695a      	ldr	r2, [r3, #20]
 8001340:	07d6      	lsls	r6, r2, #31
 8001342:	d535      	bpl.n	80013b0 <HAL_CAN_IRQHandler+0xa4>
    tmp1 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0);
 8001344:	689e      	ldr	r6, [r3, #8]
    if(tmp1 || tmp2 || tmp3)  
 8001346:	4a63      	ldr	r2, [pc, #396]	; (80014d4 <HAL_CAN_IRQHandler+0x1c8>)
    tmp2 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1);
 8001348:	6898      	ldr	r0, [r3, #8]
    tmp3 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_2);
 800134a:	6899      	ldr	r1, [r3, #8]
    if(tmp1 || tmp2 || tmp3)  
 800134c:	43b2      	bics	r2, r6
 800134e:	d005      	beq.n	800135c <HAL_CAN_IRQHandler+0x50>
 8001350:	4a61      	ldr	r2, [pc, #388]	; (80014d8 <HAL_CAN_IRQHandler+0x1cc>)
 8001352:	4382      	bics	r2, r0
 8001354:	d002      	beq.n	800135c <HAL_CAN_IRQHandler+0x50>
 8001356:	4a61      	ldr	r2, [pc, #388]	; (80014dc <HAL_CAN_IRQHandler+0x1d0>)
 8001358:	438a      	bics	r2, r1
 800135a:	d129      	bne.n	80013b0 <HAL_CAN_IRQHandler+0xa4>
      tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK0);
 800135c:	6898      	ldr	r0, [r3, #8]
      tmp2 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK1);
 800135e:	6899      	ldr	r1, [r3, #8]
      tmp3 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK2);
 8001360:	689a      	ldr	r2, [r3, #8]
      if(tmp1 || tmp2 || tmp3)
 8001362:	0780      	lsls	r0, r0, #30
 8001364:	d404      	bmi.n	8001370 <HAL_CAN_IRQHandler+0x64>
 8001366:	0589      	lsls	r1, r1, #22
 8001368:	d402      	bmi.n	8001370 <HAL_CAN_IRQHandler+0x64>
 800136a:	0396      	lsls	r6, r2, #14
 800136c:	f140 8090 	bpl.w	8001490 <HAL_CAN_IRQHandler+0x184>
  __HAL_CAN_DISABLE_IT(hcan, CAN_IT_TME);
 8001370:	695a      	ldr	r2, [r3, #20]
 8001372:	f022 0201 	bic.w	r2, r2, #1
 8001376:	615a      	str	r2, [r3, #20]
  if(hcan->State == HAL_CAN_STATE_BUSY_TX)
 8001378:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 800137c:	2a12      	cmp	r2, #18
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 800137e:	bf02      	ittt	eq
 8001380:	695a      	ldreq	r2, [r3, #20]
 8001382:	f422 420f 	biceq.w	r2, r2, #36608	; 0x8f00
 8001386:	615a      	streq	r2, [r3, #20]
  switch(hcan->State)
 8001388:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b52      	cmp	r3, #82	; 0x52
 8001390:	d078      	beq.n	8001484 <HAL_CAN_IRQHandler+0x178>
 8001392:	2b72      	cmp	r3, #114	; 0x72
 8001394:	d078      	beq.n	8001488 <HAL_CAN_IRQHandler+0x17c>
 8001396:	2b42      	cmp	r3, #66	; 0x42
 8001398:	d178      	bne.n	800148c <HAL_CAN_IRQHandler+0x180>
      hcan->State = HAL_CAN_STATE_BUSY_RX0;
 800139a:	2322      	movs	r3, #34	; 0x22
      hcan->State = HAL_CAN_STATE_READY;
 800139c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_CAN_TxCpltCallback(hcan);
 80013a0:	4620      	mov	r0, r4
 80013a2:	f7ff ff2f 	bl	8001204 <HAL_CAN_TxCpltCallback>
      SET_BIT(hcan->Instance->TSR, CAN_TSR_RQCP0  | CAN_TSR_RQCP1  | CAN_TSR_RQCP2 | \
 80013a6:	6822      	ldr	r2, [r4, #0]
 80013a8:	4b4d      	ldr	r3, [pc, #308]	; (80014e0 <HAL_CAN_IRQHandler+0x1d4>)
 80013aa:	6891      	ldr	r1, [r2, #8]
 80013ac:	430b      	orrs	r3, r1
 80013ae:	6093      	str	r3, [r2, #8]
  tmp1 = __HAL_CAN_MSG_PENDING(hcan, CAN_FIFO0);
 80013b0:	6823      	ldr	r3, [r4, #0]
 80013b2:	68da      	ldr	r2, [r3, #12]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0);
 80013b4:	695b      	ldr	r3, [r3, #20]
  if((tmp1 != 0U) && tmp2)
 80013b6:	0790      	lsls	r0, r2, #30
 80013b8:	d005      	beq.n	80013c6 <HAL_CAN_IRQHandler+0xba>
 80013ba:	0799      	lsls	r1, r3, #30
 80013bc:	d503      	bpl.n	80013c6 <HAL_CAN_IRQHandler+0xba>
    CAN_Receive_IT(hcan, CAN_FIFO0);
 80013be:	2100      	movs	r1, #0
 80013c0:	4620      	mov	r0, r4
 80013c2:	f7ff ff20 	bl	8001206 <CAN_Receive_IT>
  tmp1 = __HAL_CAN_MSG_PENDING(hcan, CAN_FIFO1);
 80013c6:	6823      	ldr	r3, [r4, #0]
 80013c8:	691a      	ldr	r2, [r3, #16]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1);
 80013ca:	695b      	ldr	r3, [r3, #20]
  if((tmp1 != 0U) && tmp2)
 80013cc:	0792      	lsls	r2, r2, #30
 80013ce:	d005      	beq.n	80013dc <HAL_CAN_IRQHandler+0xd0>
 80013d0:	06de      	lsls	r6, r3, #27
 80013d2:	d503      	bpl.n	80013dc <HAL_CAN_IRQHandler+0xd0>
    CAN_Receive_IT(hcan, CAN_FIFO1);
 80013d4:	2101      	movs	r1, #1
 80013d6:	4620      	mov	r0, r4
 80013d8:	f7ff ff15 	bl	8001206 <CAN_Receive_IT>
  hcan->ErrorCode |= errorcode;
 80013dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013de:	431d      	orrs	r5, r3
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG);
 80013e0:	6823      	ldr	r3, [r4, #0]
  hcan->ErrorCode |= errorcode;
 80013e2:	6425      	str	r5, [r4, #64]	; 0x40
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG);
 80013e4:	6998      	ldr	r0, [r3, #24]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG);
 80013e6:	6959      	ldr	r1, [r3, #20]
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);
 80013e8:	695a      	ldr	r2, [r3, #20]
  if(tmp1 && tmp2 && tmp3)
 80013ea:	07c0      	lsls	r0, r0, #31
 80013ec:	d507      	bpl.n	80013fe <HAL_CAN_IRQHandler+0xf2>
 80013ee:	05ce      	lsls	r6, r1, #23
 80013f0:	d505      	bpl.n	80013fe <HAL_CAN_IRQHandler+0xf2>
 80013f2:	0415      	lsls	r5, r2, #16
    hcan->ErrorCode |= HAL_CAN_ERROR_EWG;
 80013f4:	bf42      	ittt	mi
 80013f6:	6c22      	ldrmi	r2, [r4, #64]	; 0x40
 80013f8:	f042 0201 	orrmi.w	r2, r2, #1
 80013fc:	6422      	strmi	r2, [r4, #64]	; 0x40
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV);
 80013fe:	6998      	ldr	r0, [r3, #24]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV);
 8001400:	6959      	ldr	r1, [r3, #20]
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR); 
 8001402:	695a      	ldr	r2, [r3, #20]
  if(tmp1 && tmp2 && tmp3)
 8001404:	0780      	lsls	r0, r0, #30
 8001406:	d507      	bpl.n	8001418 <HAL_CAN_IRQHandler+0x10c>
 8001408:	0589      	lsls	r1, r1, #22
 800140a:	d505      	bpl.n	8001418 <HAL_CAN_IRQHandler+0x10c>
 800140c:	0412      	lsls	r2, r2, #16
    hcan->ErrorCode |= HAL_CAN_ERROR_EPV;
 800140e:	bf42      	ittt	mi
 8001410:	6c22      	ldrmi	r2, [r4, #64]	; 0x40
 8001412:	f042 0202 	orrmi.w	r2, r2, #2
 8001416:	6422      	strmi	r2, [r4, #64]	; 0x40
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF);
 8001418:	6998      	ldr	r0, [r3, #24]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF);
 800141a:	6959      	ldr	r1, [r3, #20]
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);  
 800141c:	695a      	ldr	r2, [r3, #20]
  if(tmp1 && tmp2 && tmp3)
 800141e:	0746      	lsls	r6, r0, #29
 8001420:	d507      	bpl.n	8001432 <HAL_CAN_IRQHandler+0x126>
 8001422:	054d      	lsls	r5, r1, #21
 8001424:	d505      	bpl.n	8001432 <HAL_CAN_IRQHandler+0x126>
 8001426:	0410      	lsls	r0, r2, #16
    hcan->ErrorCode |= HAL_CAN_ERROR_BOF;
 8001428:	bf42      	ittt	mi
 800142a:	6c22      	ldrmi	r2, [r4, #64]	; 0x40
 800142c:	f042 0204 	orrmi.w	r2, r2, #4
 8001430:	6422      	strmi	r2, [r4, #64]	; 0x40
  tmp1 = HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC);
 8001432:	6998      	ldr	r0, [r3, #24]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC);
 8001434:	6959      	ldr	r1, [r3, #20]
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);
 8001436:	695a      	ldr	r2, [r3, #20]
  if((!tmp1) && tmp2 && tmp3)
 8001438:	f010 0f70 	tst.w	r0, #112	; 0x70
 800143c:	d011      	beq.n	8001462 <HAL_CAN_IRQHandler+0x156>
 800143e:	0509      	lsls	r1, r1, #20
 8001440:	d50f      	bpl.n	8001462 <HAL_CAN_IRQHandler+0x156>
 8001442:	0412      	lsls	r2, r2, #16
 8001444:	d50d      	bpl.n	8001462 <HAL_CAN_IRQHandler+0x156>
    tmp1 = (hcan->Instance->ESR) & CAN_ESR_LEC;
 8001446:	699a      	ldr	r2, [r3, #24]
 8001448:	f002 0270 	and.w	r2, r2, #112	; 0x70
    switch(tmp1)
 800144c:	2a30      	cmp	r2, #48	; 0x30
 800144e:	d035      	beq.n	80014bc <HAL_CAN_IRQHandler+0x1b0>
 8001450:	d821      	bhi.n	8001496 <HAL_CAN_IRQHandler+0x18a>
 8001452:	2a10      	cmp	r2, #16
 8001454:	d029      	beq.n	80014aa <HAL_CAN_IRQHandler+0x19e>
 8001456:	2a20      	cmp	r2, #32
 8001458:	d02c      	beq.n	80014b4 <HAL_CAN_IRQHandler+0x1a8>
    hcan->Instance->ESR &= ~(CAN_ESR_LEC);
 800145a:	699a      	ldr	r2, [r3, #24]
 800145c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001460:	619a      	str	r2, [r3, #24]
  if(hcan->ErrorCode != HAL_CAN_ERROR_NONE)
 8001462:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001464:	b16a      	cbz	r2, 8001482 <HAL_CAN_IRQHandler+0x176>
    hcan->Instance->MSR = CAN_MSR_ERRI; 
 8001466:	2204      	movs	r2, #4
 8001468:	605a      	str	r2, [r3, #4]
    hcan->State = HAL_CAN_STATE_READY;
 800146a:	2201      	movs	r2, #1
 800146c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8001470:	695a      	ldr	r2, [r3, #20]
 8001472:	f422 420f 	bic.w	r2, r2, #36608	; 0x8f00
 8001476:	f022 025b 	bic.w	r2, r2, #91	; 0x5b
 800147a:	615a      	str	r2, [r3, #20]
    HAL_CAN_ErrorCallback(hcan);
 800147c:	4620      	mov	r0, r4
 800147e:	f7ff ff43 	bl	8001308 <HAL_CAN_ErrorCallback>
 8001482:	bd70      	pop	{r4, r5, r6, pc}
      hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8001484:	2332      	movs	r3, #50	; 0x32
 8001486:	e789      	b.n	800139c <HAL_CAN_IRQHandler+0x90>
      hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 8001488:	2362      	movs	r3, #98	; 0x62
 800148a:	e787      	b.n	800139c <HAL_CAN_IRQHandler+0x90>
      hcan->State = HAL_CAN_STATE_READY;
 800148c:	2301      	movs	r3, #1
 800148e:	e785      	b.n	800139c <HAL_CAN_IRQHandler+0x90>
        errorcode |= HAL_CAN_ERROR_TXFAIL;
 8001490:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 8001494:	e787      	b.n	80013a6 <HAL_CAN_IRQHandler+0x9a>
    switch(tmp1)
 8001496:	2a50      	cmp	r2, #80	; 0x50
 8001498:	d014      	beq.n	80014c4 <HAL_CAN_IRQHandler+0x1b8>
 800149a:	2a60      	cmp	r2, #96	; 0x60
 800149c:	d016      	beq.n	80014cc <HAL_CAN_IRQHandler+0x1c0>
 800149e:	2a40      	cmp	r2, #64	; 0x40
 80014a0:	d1db      	bne.n	800145a <HAL_CAN_IRQHandler+0x14e>
          hcan->ErrorCode |= HAL_CAN_ERROR_BR;
 80014a2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80014a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014a8:	e002      	b.n	80014b0 <HAL_CAN_IRQHandler+0x1a4>
          hcan->ErrorCode |= HAL_CAN_ERROR_STF;
 80014aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80014ac:	f042 0208 	orr.w	r2, r2, #8
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
 80014b0:	6422      	str	r2, [r4, #64]	; 0x40
          break;
 80014b2:	e7d2      	b.n	800145a <HAL_CAN_IRQHandler+0x14e>
          hcan->ErrorCode |= HAL_CAN_ERROR_FOR;
 80014b4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80014b6:	f042 0210 	orr.w	r2, r2, #16
 80014ba:	e7f9      	b.n	80014b0 <HAL_CAN_IRQHandler+0x1a4>
          hcan->ErrorCode |= HAL_CAN_ERROR_ACK;
 80014bc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80014be:	f042 0220 	orr.w	r2, r2, #32
 80014c2:	e7f5      	b.n	80014b0 <HAL_CAN_IRQHandler+0x1a4>
          hcan->ErrorCode |= HAL_CAN_ERROR_BD;
 80014c4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80014c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014ca:	e7f1      	b.n	80014b0 <HAL_CAN_IRQHandler+0x1a4>
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
 80014cc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80014ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014d2:	e7ed      	b.n	80014b0 <HAL_CAN_IRQHandler+0x1a4>
 80014d4:	04000003 	.word	0x04000003
 80014d8:	08000300 	.word	0x08000300
 80014dc:	10030000 	.word	0x10030000
 80014e0:	00010519 	.word	0x00010519

080014e4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e4:	4a07      	ldr	r2, [pc, #28]	; (8001504 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80014e6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014ec:	041b      	lsls	r3, r3, #16
 80014ee:	0c1b      	lsrs	r3, r3, #16
 80014f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80014f4:	0200      	lsls	r0, r0, #8
 80014f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014fa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80014fe:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001500:	60d3      	str	r3, [r2, #12]
 8001502:	4770      	bx	lr
 8001504:	e000ed00 	.word	0xe000ed00

08001508 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001508:	4b17      	ldr	r3, [pc, #92]	; (8001568 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800150a:	b530      	push	{r4, r5, lr}
 800150c:	68dc      	ldr	r4, [r3, #12]
 800150e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001512:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001516:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001518:	2b04      	cmp	r3, #4
 800151a:	bf28      	it	cs
 800151c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	f04f 0501 	mov.w	r5, #1
 8001524:	fa05 f303 	lsl.w	r3, r5, r3
 8001528:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152c:	bf8c      	ite	hi
 800152e:	3c03      	subhi	r4, #3
 8001530:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001532:	4019      	ands	r1, r3
 8001534:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001536:	fa05 f404 	lsl.w	r4, r5, r4
 800153a:	3c01      	subs	r4, #1
 800153c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800153e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	ea42 0201 	orr.w	r2, r2, r1
 8001544:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001548:	bfaf      	iteee	ge
 800154a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154e:	f000 000f 	andlt.w	r0, r0, #15
 8001552:	4b06      	ldrlt	r3, [pc, #24]	; (800156c <HAL_NVIC_SetPriority+0x64>)
 8001554:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001556:	bfa5      	ittet	ge
 8001558:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 800155c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001560:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001564:	bd30      	pop	{r4, r5, pc}
 8001566:	bf00      	nop
 8001568:	e000ed00 	.word	0xe000ed00
 800156c:	e000ed14 	.word	0xe000ed14

08001570 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001570:	0942      	lsrs	r2, r0, #5
 8001572:	2301      	movs	r3, #1
 8001574:	f000 001f 	and.w	r0, r0, #31
 8001578:	fa03 f000 	lsl.w	r0, r3, r0
 800157c:	4b01      	ldr	r3, [pc, #4]	; (8001584 <HAL_NVIC_EnableIRQ+0x14>)
 800157e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001582:	4770      	bx	lr
 8001584:	e000e100 	.word	0xe000e100

08001588 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001588:	3801      	subs	r0, #1
 800158a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800158e:	d20a      	bcs.n	80015a6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001592:	4a07      	ldr	r2, [pc, #28]	; (80015b0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001594:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001596:	21f0      	movs	r1, #240	; 0xf0
 8001598:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800159c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800159e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80015a6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000e010 	.word	0xe000e010
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80015b4:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80015b6:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80015b8:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80015ba:	bf0c      	ite	eq
 80015bc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80015c0:	f022 0204 	bicne.w	r2, r2, #4
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	4770      	bx	lr
 80015c8:	e000e010 	.word	0xe000e010

080015cc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80015cc:	4770      	bx	lr

080015ce <HAL_SYSTICK_IRQHandler>:
{
 80015ce:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80015d0:	f7ff fffc 	bl	80015cc <HAL_SYSTICK_Callback>
 80015d4:	bd08      	pop	{r3, pc}
	...

080015d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015dc:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015de:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e0:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8001784 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015e4:	4a65      	ldr	r2, [pc, #404]	; (800177c <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015e6:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8001788 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ea:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ec:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80015ee:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015f2:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80015f4:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015f8:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80015fc:	45b6      	cmp	lr, r6
 80015fe:	f040 80aa 	bne.w	8001756 <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001602:	684c      	ldr	r4, [r1, #4]
 8001604:	f024 0710 	bic.w	r7, r4, #16
 8001608:	2f02      	cmp	r7, #2
 800160a:	d116      	bne.n	800163a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 800160c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001610:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001614:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001618:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800161c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001620:	f04f 0c0f 	mov.w	ip, #15
 8001624:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001628:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800162c:	690d      	ldr	r5, [r1, #16]
 800162e:	fa05 f50b 	lsl.w	r5, r5, fp
 8001632:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001636:	f8ca 5020 	str.w	r5, [sl, #32]
 800163a:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800163e:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001640:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001644:	fa05 f50a 	lsl.w	r5, r5, sl
 8001648:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800164a:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800164e:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001652:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001656:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001658:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800165c:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800165e:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001662:	d811      	bhi.n	8001688 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001664:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001666:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800166a:	68cf      	ldr	r7, [r1, #12]
 800166c:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001670:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001674:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001676:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001678:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800167c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001680:	409f      	lsls	r7, r3
 8001682:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001686:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001688:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800168a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800168c:	688f      	ldr	r7, [r1, #8]
 800168e:	fa07 f70a 	lsl.w	r7, r7, sl
 8001692:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001694:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001696:	00e5      	lsls	r5, r4, #3
 8001698:	d55d      	bpl.n	8001756 <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169a:	f04f 0b00 	mov.w	fp, #0
 800169e:	f8cd b00c 	str.w	fp, [sp, #12]
 80016a2:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016a6:	4d36      	ldr	r5, [pc, #216]	; (8001780 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a8:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80016ac:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80016b0:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80016b4:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80016b8:	9703      	str	r7, [sp, #12]
 80016ba:	9f03      	ldr	r7, [sp, #12]
 80016bc:	f023 0703 	bic.w	r7, r3, #3
 80016c0:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80016c4:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016c8:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80016cc:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016d0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80016d4:	f04f 0e0f 	mov.w	lr, #15
 80016d8:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016dc:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016de:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016e2:	d03f      	beq.n	8001764 <HAL_GPIO_Init+0x18c>
 80016e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80016e8:	42a8      	cmp	r0, r5
 80016ea:	d03d      	beq.n	8001768 <HAL_GPIO_Init+0x190>
 80016ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80016f0:	42a8      	cmp	r0, r5
 80016f2:	d03b      	beq.n	800176c <HAL_GPIO_Init+0x194>
 80016f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80016f8:	42a8      	cmp	r0, r5
 80016fa:	d039      	beq.n	8001770 <HAL_GPIO_Init+0x198>
 80016fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001700:	42a8      	cmp	r0, r5
 8001702:	d037      	beq.n	8001774 <HAL_GPIO_Init+0x19c>
 8001704:	4548      	cmp	r0, r9
 8001706:	d037      	beq.n	8001778 <HAL_GPIO_Init+0x1a0>
 8001708:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800170c:	42a8      	cmp	r0, r5
 800170e:	bf14      	ite	ne
 8001710:	2507      	movne	r5, #7
 8001712:	2506      	moveq	r5, #6
 8001714:	fa05 f50c 	lsl.w	r5, r5, ip
 8001718:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800171c:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800171e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001720:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001722:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001726:	bf0c      	ite	eq
 8001728:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800172a:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 800172c:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800172e:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001730:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001734:	bf0c      	ite	eq
 8001736:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001738:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800173a:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800173c:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800173e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001742:	bf0c      	ite	eq
 8001744:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001746:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001748:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800174a:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800174c:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800174e:	bf54      	ite	pl
 8001750:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001752:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001754:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001756:	3301      	adds	r3, #1
 8001758:	2b10      	cmp	r3, #16
 800175a:	f47f af48 	bne.w	80015ee <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800175e:	b005      	add	sp, #20
 8001760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001764:	465d      	mov	r5, fp
 8001766:	e7d5      	b.n	8001714 <HAL_GPIO_Init+0x13c>
 8001768:	2501      	movs	r5, #1
 800176a:	e7d3      	b.n	8001714 <HAL_GPIO_Init+0x13c>
 800176c:	2502      	movs	r5, #2
 800176e:	e7d1      	b.n	8001714 <HAL_GPIO_Init+0x13c>
 8001770:	2503      	movs	r5, #3
 8001772:	e7cf      	b.n	8001714 <HAL_GPIO_Init+0x13c>
 8001774:	2504      	movs	r5, #4
 8001776:	e7cd      	b.n	8001714 <HAL_GPIO_Init+0x13c>
 8001778:	2505      	movs	r5, #5
 800177a:	e7cb      	b.n	8001714 <HAL_GPIO_Init+0x13c>
 800177c:	40013c00 	.word	0x40013c00
 8001780:	40020000 	.word	0x40020000
 8001784:	40023800 	.word	0x40023800
 8001788:	40021400 	.word	0x40021400

0800178c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800178c:	b10a      	cbz	r2, 8001792 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800178e:	6181      	str	r1, [r0, #24]
 8001790:	4770      	bx	lr
 8001792:	0409      	lsls	r1, r1, #16
 8001794:	e7fb      	b.n	800178e <HAL_GPIO_WritePin+0x2>
	...

08001798 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001798:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	9301      	str	r3, [sp, #4]
 800179e:	4b18      	ldr	r3, [pc, #96]	; (8001800 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80017a0:	4c18      	ldr	r4, [pc, #96]	; (8001804 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017a8:	641a      	str	r2, [r3, #64]	; 0x40
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b0:	9301      	str	r3, [sp, #4]
 80017b2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80017b4:	4b14      	ldr	r3, [pc, #80]	; (8001808 <HAL_PWREx_EnableOverDrive+0x70>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80017ba:	f7ff facd 	bl	8000d58 <HAL_GetTick>
 80017be:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80017c0:	6863      	ldr	r3, [r4, #4]
 80017c2:	03da      	lsls	r2, r3, #15
 80017c4:	d50b      	bpl.n	80017de <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80017c8:	4c0e      	ldr	r4, [pc, #56]	; (8001804 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80017ca:	2201      	movs	r2, #1
 80017cc:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80017ce:	f7ff fac3 	bl	8000d58 <HAL_GetTick>
 80017d2:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80017d4:	6863      	ldr	r3, [r4, #4]
 80017d6:	039b      	lsls	r3, r3, #14
 80017d8:	d50a      	bpl.n	80017f0 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80017da:	2000      	movs	r0, #0
 80017dc:	e006      	b.n	80017ec <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80017de:	f7ff fabb 	bl	8000d58 <HAL_GetTick>
 80017e2:	1b40      	subs	r0, r0, r5
 80017e4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80017e8:	d9ea      	bls.n	80017c0 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 80017ea:	2003      	movs	r0, #3
}
 80017ec:	b003      	add	sp, #12
 80017ee:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80017f0:	f7ff fab2 	bl	8000d58 <HAL_GetTick>
 80017f4:	1b40      	subs	r0, r0, r5
 80017f6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80017fa:	d9eb      	bls.n	80017d4 <HAL_PWREx_EnableOverDrive+0x3c>
 80017fc:	e7f5      	b.n	80017ea <HAL_PWREx_EnableOverDrive+0x52>
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800
 8001804:	40007000 	.word	0x40007000
 8001808:	420e0040 	.word	0x420e0040
 800180c:	420e0044 	.word	0x420e0044

08001810 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001814:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001816:	4604      	mov	r4, r0
 8001818:	b910      	cbnz	r0, 8001820 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 800181a:	2001      	movs	r0, #1
 800181c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001820:	4b44      	ldr	r3, [pc, #272]	; (8001934 <HAL_RCC_ClockConfig+0x124>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	f002 020f 	and.w	r2, r2, #15
 8001828:	428a      	cmp	r2, r1
 800182a:	d328      	bcc.n	800187e <HAL_RCC_ClockConfig+0x6e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800182c:	6821      	ldr	r1, [r4, #0]
 800182e:	078f      	lsls	r7, r1, #30
 8001830:	d42d      	bmi.n	800188e <HAL_RCC_ClockConfig+0x7e>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001832:	07c8      	lsls	r0, r1, #31
 8001834:	d440      	bmi.n	80018b8 <HAL_RCC_ClockConfig+0xa8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001836:	4b3f      	ldr	r3, [pc, #252]	; (8001934 <HAL_RCC_ClockConfig+0x124>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	f002 020f 	and.w	r2, r2, #15
 800183e:	4295      	cmp	r5, r2
 8001840:	d366      	bcc.n	8001910 <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001842:	6822      	ldr	r2, [r4, #0]
 8001844:	0751      	lsls	r1, r2, #29
 8001846:	d46c      	bmi.n	8001922 <HAL_RCC_ClockConfig+0x112>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001848:	0713      	lsls	r3, r2, #28
 800184a:	d507      	bpl.n	800185c <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800184c:	4a3a      	ldr	r2, [pc, #232]	; (8001938 <HAL_RCC_ClockConfig+0x128>)
 800184e:	6921      	ldr	r1, [r4, #16]
 8001850:	6893      	ldr	r3, [r2, #8]
 8001852:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001856:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800185a:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800185c:	f000 f898 	bl	8001990 <HAL_RCC_GetSysClockFreq>
 8001860:	4b35      	ldr	r3, [pc, #212]	; (8001938 <HAL_RCC_ClockConfig+0x128>)
 8001862:	4a36      	ldr	r2, [pc, #216]	; (800193c <HAL_RCC_ClockConfig+0x12c>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800186a:	5cd3      	ldrb	r3, [r2, r3]
 800186c:	40d8      	lsrs	r0, r3
 800186e:	4b34      	ldr	r3, [pc, #208]	; (8001940 <HAL_RCC_ClockConfig+0x130>)
 8001870:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001872:	2000      	movs	r0, #0
 8001874:	f7ff fa3a 	bl	8000cec <HAL_InitTick>

  return HAL_OK;
 8001878:	2000      	movs	r0, #0
 800187a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800187e:	b2ca      	uxtb	r2, r1
 8001880:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 030f 	and.w	r3, r3, #15
 8001888:	4299      	cmp	r1, r3
 800188a:	d1c6      	bne.n	800181a <HAL_RCC_ClockConfig+0xa>
 800188c:	e7ce      	b.n	800182c <HAL_RCC_ClockConfig+0x1c>
 800188e:	4b2a      	ldr	r3, [pc, #168]	; (8001938 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001890:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001894:	bf1e      	ittt	ne
 8001896:	689a      	ldrne	r2, [r3, #8]
 8001898:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 800189c:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800189e:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018a0:	bf42      	ittt	mi
 80018a2:	689a      	ldrmi	r2, [r3, #8]
 80018a4:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80018a8:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	68a0      	ldr	r0, [r4, #8]
 80018ae:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80018b2:	4302      	orrs	r2, r0
 80018b4:	609a      	str	r2, [r3, #8]
 80018b6:	e7bc      	b.n	8001832 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018b8:	6862      	ldr	r2, [r4, #4]
 80018ba:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <HAL_RCC_ClockConfig+0x128>)
 80018bc:	2a01      	cmp	r2, #1
 80018be:	d11d      	bne.n	80018fc <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c6:	d0a8      	beq.n	800181a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018c8:	4e1b      	ldr	r6, [pc, #108]	; (8001938 <HAL_RCC_ClockConfig+0x128>)
 80018ca:	68b3      	ldr	r3, [r6, #8]
 80018cc:	f023 0303 	bic.w	r3, r3, #3
 80018d0:	4313      	orrs	r3, r2
 80018d2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80018d4:	f7ff fa40 	bl	8000d58 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80018dc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018de:	68b3      	ldr	r3, [r6, #8]
 80018e0:	6862      	ldr	r2, [r4, #4]
 80018e2:	f003 030c 	and.w	r3, r3, #12
 80018e6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80018ea:	d0a4      	beq.n	8001836 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ec:	f7ff fa34 	bl	8000d58 <HAL_GetTick>
 80018f0:	1bc0      	subs	r0, r0, r7
 80018f2:	4540      	cmp	r0, r8
 80018f4:	d9f3      	bls.n	80018de <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80018f6:	2003      	movs	r0, #3
}
 80018f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018fc:	1e91      	subs	r1, r2, #2
 80018fe:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001900:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001902:	d802      	bhi.n	800190a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001904:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001908:	e7dd      	b.n	80018c6 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800190a:	f013 0f02 	tst.w	r3, #2
 800190e:	e7da      	b.n	80018c6 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001910:	b2ea      	uxtb	r2, r5
 8001912:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	429d      	cmp	r5, r3
 800191c:	f47f af7d 	bne.w	800181a <HAL_RCC_ClockConfig+0xa>
 8001920:	e78f      	b.n	8001842 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001922:	4905      	ldr	r1, [pc, #20]	; (8001938 <HAL_RCC_ClockConfig+0x128>)
 8001924:	68e0      	ldr	r0, [r4, #12]
 8001926:	688b      	ldr	r3, [r1, #8]
 8001928:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800192c:	4303      	orrs	r3, r0
 800192e:	608b      	str	r3, [r1, #8]
 8001930:	e78a      	b.n	8001848 <HAL_RCC_ClockConfig+0x38>
 8001932:	bf00      	nop
 8001934:	40023c00 	.word	0x40023c00
 8001938:	40023800 	.word	0x40023800
 800193c:	08002f5c 	.word	0x08002f5c
 8001940:	20000000 	.word	0x20000000

08001944 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001944:	4b01      	ldr	r3, [pc, #4]	; (800194c <HAL_RCC_GetHCLKFreq+0x8>)
 8001946:	6818      	ldr	r0, [r3, #0]
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	20000000 	.word	0x20000000

08001950 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001950:	4b04      	ldr	r3, [pc, #16]	; (8001964 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001952:	4a05      	ldr	r2, [pc, #20]	; (8001968 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800195a:	5cd3      	ldrb	r3, [r2, r3]
 800195c:	4a03      	ldr	r2, [pc, #12]	; (800196c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800195e:	6810      	ldr	r0, [r2, #0]
}
 8001960:	40d8      	lsrs	r0, r3
 8001962:	4770      	bx	lr
 8001964:	40023800 	.word	0x40023800
 8001968:	08002f6c 	.word	0x08002f6c
 800196c:	20000000 	.word	0x20000000

08001970 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001970:	4b04      	ldr	r3, [pc, #16]	; (8001984 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001972:	4a05      	ldr	r2, [pc, #20]	; (8001988 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800197a:	5cd3      	ldrb	r3, [r2, r3]
 800197c:	4a03      	ldr	r2, [pc, #12]	; (800198c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800197e:	6810      	ldr	r0, [r2, #0]
}
 8001980:	40d8      	lsrs	r0, r3
 8001982:	4770      	bx	lr
 8001984:	40023800 	.word	0x40023800
 8001988:	08002f6c 	.word	0x08002f6c
 800198c:	20000000 	.word	0x20000000

08001990 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001990:	491c      	ldr	r1, [pc, #112]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x74>)
{
 8001992:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001994:	688b      	ldr	r3, [r1, #8]
 8001996:	f003 030c 	and.w	r3, r3, #12
 800199a:	2b08      	cmp	r3, #8
 800199c:	d003      	beq.n	80019a6 <HAL_RCC_GetSysClockFreq+0x16>
 800199e:	2b0c      	cmp	r3, #12
 80019a0:	d01a      	beq.n	80019d8 <HAL_RCC_GetSysClockFreq+0x48>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019a2:	4819      	ldr	r0, [pc, #100]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x78>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80019a4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019a6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019a8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019aa:	6849      	ldr	r1, [r1, #4]
 80019ac:	4816      	ldr	r0, [pc, #88]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x78>)
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ae:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80019b6:	bf18      	it	ne
 80019b8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019ba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019be:	fba1 0100 	umull	r0, r1, r1, r0
 80019c2:	f7ff f80b 	bl	80009dc <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019c6:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x74>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80019ce:	3301      	adds	r3, #1
 80019d0:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllr;
 80019d2:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80019d6:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019d8:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019da:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019dc:	6849      	ldr	r1, [r1, #4]
 80019de:	480a      	ldr	r0, [pc, #40]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x78>)
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019e0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019e4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80019e8:	bf18      	it	ne
 80019ea:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019ec:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019f0:	fba1 0100 	umull	r0, r1, r1, r0
 80019f4:	f7fe fff2 	bl	80009dc <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80019f8:	4b02      	ldr	r3, [pc, #8]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x74>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8001a00:	e7e7      	b.n	80019d2 <HAL_RCC_GetSysClockFreq+0x42>
 8001a02:	bf00      	nop
 8001a04:	40023800 	.word	0x40023800
 8001a08:	00f42400 	.word	0x00f42400

08001a0c <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a0c:	6803      	ldr	r3, [r0, #0]
{
 8001a0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a10:	07de      	lsls	r6, r3, #31
{
 8001a12:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a14:	d43b      	bmi.n	8001a8e <HAL_RCC_OscConfig+0x82>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a16:	6823      	ldr	r3, [r4, #0]
 8001a18:	079d      	lsls	r5, r3, #30
 8001a1a:	f100 8092 	bmi.w	8001b42 <HAL_RCC_OscConfig+0x136>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a1e:	6823      	ldr	r3, [r4, #0]
 8001a20:	071e      	lsls	r6, r3, #28
 8001a22:	f100 80dc 	bmi.w	8001bde <HAL_RCC_OscConfig+0x1d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a26:	6823      	ldr	r3, [r4, #0]
 8001a28:	075d      	lsls	r5, r3, #29
 8001a2a:	d52a      	bpl.n	8001a82 <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	9301      	str	r3, [sp, #4]
 8001a30:	4b93      	ldr	r3, [pc, #588]	; (8001c80 <HAL_RCC_OscConfig+0x274>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001a32:	4d94      	ldr	r5, [pc, #592]	; (8001c84 <HAL_RCC_OscConfig+0x278>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a36:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a3a:	641a      	str	r2, [r3, #64]	; 0x40
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a42:	9301      	str	r3, [sp, #4]
 8001a44:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001a46:	682b      	ldr	r3, [r5, #0]
 8001a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a4c:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a4e:	f7ff f983 	bl	8000d58 <HAL_GetTick>
 8001a52:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001a54:	682b      	ldr	r3, [r5, #0]
 8001a56:	05da      	lsls	r2, r3, #23
 8001a58:	f140 80e3 	bpl.w	8001c22 <HAL_RCC_OscConfig+0x216>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a5c:	68a3      	ldr	r3, [r4, #8]
 8001a5e:	4d88      	ldr	r5, [pc, #544]	; (8001c80 <HAL_RCC_OscConfig+0x274>)
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	f040 80e5 	bne.w	8001c30 <HAL_RCC_OscConfig+0x224>
 8001a66:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a6e:	f7ff f973 	bl	8000d58 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a72:	4d83      	ldr	r5, [pc, #524]	; (8001c80 <HAL_RCC_OscConfig+0x274>)
      tickstart = HAL_GetTick();
 8001a74:	4606      	mov	r6, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a76:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a7a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a7c:	079b      	lsls	r3, r3, #30
 8001a7e:	f140 80f8 	bpl.w	8001c72 <HAL_RCC_OscConfig+0x266>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a82:	69a2      	ldr	r2, [r4, #24]
 8001a84:	2a00      	cmp	r2, #0
 8001a86:	f040 8103 	bne.w	8001c90 <HAL_RCC_OscConfig+0x284>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001a8a:	2000      	movs	r0, #0
 8001a8c:	e01e      	b.n	8001acc <HAL_RCC_OscConfig+0xc0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001a8e:	4b7c      	ldr	r3, [pc, #496]	; (8001c80 <HAL_RCC_OscConfig+0x274>)
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	f002 020c 	and.w	r2, r2, #12
 8001a96:	2a04      	cmp	r2, #4
 8001a98:	d010      	beq.n	8001abc <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001aa0:	2a08      	cmp	r2, #8
 8001aa2:	d102      	bne.n	8001aaa <HAL_RCC_OscConfig+0x9e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	0258      	lsls	r0, r3, #9
 8001aa8:	d408      	bmi.n	8001abc <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aaa:	4b75      	ldr	r3, [pc, #468]	; (8001c80 <HAL_RCC_OscConfig+0x274>)
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001ab2:	2a0c      	cmp	r2, #12
 8001ab4:	d10c      	bne.n	8001ad0 <HAL_RCC_OscConfig+0xc4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	0251      	lsls	r1, r2, #9
 8001aba:	d509      	bpl.n	8001ad0 <HAL_RCC_OscConfig+0xc4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001abc:	4b70      	ldr	r3, [pc, #448]	; (8001c80 <HAL_RCC_OscConfig+0x274>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	039a      	lsls	r2, r3, #14
 8001ac2:	d5a8      	bpl.n	8001a16 <HAL_RCC_OscConfig+0xa>
 8001ac4:	6863      	ldr	r3, [r4, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1a5      	bne.n	8001a16 <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 8001aca:	2001      	movs	r0, #1
}
 8001acc:	b003      	add	sp, #12
 8001ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ad0:	6862      	ldr	r2, [r4, #4]
 8001ad2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001ad6:	d111      	bne.n	8001afc <HAL_RCC_OscConfig+0xf0>
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ade:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ae0:	f7ff f93a 	bl	8000d58 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae4:	4d66      	ldr	r5, [pc, #408]	; (8001c80 <HAL_RCC_OscConfig+0x274>)
        tickstart = HAL_GetTick();
 8001ae6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae8:	682b      	ldr	r3, [r5, #0]
 8001aea:	039b      	lsls	r3, r3, #14
 8001aec:	d493      	bmi.n	8001a16 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aee:	f7ff f933 	bl	8000d58 <HAL_GetTick>
 8001af2:	1b80      	subs	r0, r0, r6
 8001af4:	2864      	cmp	r0, #100	; 0x64
 8001af6:	d9f7      	bls.n	8001ae8 <HAL_RCC_OscConfig+0xdc>
            return HAL_TIMEOUT;
 8001af8:	2003      	movs	r0, #3
 8001afa:	e7e7      	b.n	8001acc <HAL_RCC_OscConfig+0xc0>
 8001afc:	4d60      	ldr	r5, [pc, #384]	; (8001c80 <HAL_RCC_OscConfig+0x274>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001afe:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001b02:	682b      	ldr	r3, [r5, #0]
 8001b04:	d107      	bne.n	8001b16 <HAL_RCC_OscConfig+0x10a>
 8001b06:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b0a:	602b      	str	r3, [r5, #0]
 8001b0c:	682b      	ldr	r3, [r5, #0]
 8001b0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b12:	602b      	str	r3, [r5, #0]
 8001b14:	e7e4      	b.n	8001ae0 <HAL_RCC_OscConfig+0xd4>
 8001b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b1a:	602b      	str	r3, [r5, #0]
 8001b1c:	682b      	ldr	r3, [r5, #0]
 8001b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b22:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b24:	2a00      	cmp	r2, #0
 8001b26:	d1db      	bne.n	8001ae0 <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 8001b28:	f7ff f916 	bl	8000d58 <HAL_GetTick>
 8001b2c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b2e:	682b      	ldr	r3, [r5, #0]
 8001b30:	039f      	lsls	r7, r3, #14
 8001b32:	f57f af70 	bpl.w	8001a16 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b36:	f7ff f90f 	bl	8000d58 <HAL_GetTick>
 8001b3a:	1b80      	subs	r0, r0, r6
 8001b3c:	2864      	cmp	r0, #100	; 0x64
 8001b3e:	d9f6      	bls.n	8001b2e <HAL_RCC_OscConfig+0x122>
 8001b40:	e7da      	b.n	8001af8 <HAL_RCC_OscConfig+0xec>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b42:	4b4f      	ldr	r3, [pc, #316]	; (8001c80 <HAL_RCC_OscConfig+0x274>)
 8001b44:	689a      	ldr	r2, [r3, #8]
 8001b46:	f012 0f0c 	tst.w	r2, #12
 8001b4a:	d010      	beq.n	8001b6e <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001b52:	2a08      	cmp	r2, #8
 8001b54:	d102      	bne.n	8001b5c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	0258      	lsls	r0, r3, #9
 8001b5a:	d508      	bpl.n	8001b6e <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b5c:	4a48      	ldr	r2, [pc, #288]	; (8001c80 <HAL_RCC_OscConfig+0x274>)
 8001b5e:	6893      	ldr	r3, [r2, #8]
 8001b60:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001b64:	2b0c      	cmp	r3, #12
 8001b66:	d111      	bne.n	8001b8c <HAL_RCC_OscConfig+0x180>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b68:	6853      	ldr	r3, [r2, #4]
 8001b6a:	0259      	lsls	r1, r3, #9
 8001b6c:	d40e      	bmi.n	8001b8c <HAL_RCC_OscConfig+0x180>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b6e:	4b44      	ldr	r3, [pc, #272]	; (8001c80 <HAL_RCC_OscConfig+0x274>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	0792      	lsls	r2, r2, #30
 8001b74:	d502      	bpl.n	8001b7c <HAL_RCC_OscConfig+0x170>
 8001b76:	68e2      	ldr	r2, [r4, #12]
 8001b78:	2a01      	cmp	r2, #1
 8001b7a:	d1a6      	bne.n	8001aca <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	6921      	ldr	r1, [r4, #16]
 8001b80:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001b84:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001b88:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b8a:	e748      	b.n	8001a1e <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b8c:	68e2      	ldr	r2, [r4, #12]
 8001b8e:	4b3e      	ldr	r3, [pc, #248]	; (8001c88 <HAL_RCC_OscConfig+0x27c>)
 8001b90:	b1b2      	cbz	r2, 8001bc0 <HAL_RCC_OscConfig+0x1b4>
        __HAL_RCC_HSI_ENABLE();
 8001b92:	2201      	movs	r2, #1
 8001b94:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b96:	f7ff f8df 	bl	8000d58 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9a:	4d39      	ldr	r5, [pc, #228]	; (8001c80 <HAL_RCC_OscConfig+0x274>)
        tickstart = HAL_GetTick();
 8001b9c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9e:	682b      	ldr	r3, [r5, #0]
 8001ba0:	079b      	lsls	r3, r3, #30
 8001ba2:	d507      	bpl.n	8001bb4 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba4:	682b      	ldr	r3, [r5, #0]
 8001ba6:	6922      	ldr	r2, [r4, #16]
 8001ba8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001bac:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001bb0:	602b      	str	r3, [r5, #0]
 8001bb2:	e734      	b.n	8001a1e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bb4:	f7ff f8d0 	bl	8000d58 <HAL_GetTick>
 8001bb8:	1b80      	subs	r0, r0, r6
 8001bba:	2802      	cmp	r0, #2
 8001bbc:	d9ef      	bls.n	8001b9e <HAL_RCC_OscConfig+0x192>
 8001bbe:	e79b      	b.n	8001af8 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_DISABLE();
 8001bc0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001bc2:	f7ff f8c9 	bl	8000d58 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc6:	4d2e      	ldr	r5, [pc, #184]	; (8001c80 <HAL_RCC_OscConfig+0x274>)
        tickstart = HAL_GetTick();
 8001bc8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bca:	682b      	ldr	r3, [r5, #0]
 8001bcc:	079f      	lsls	r7, r3, #30
 8001bce:	f57f af26 	bpl.w	8001a1e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bd2:	f7ff f8c1 	bl	8000d58 <HAL_GetTick>
 8001bd6:	1b80      	subs	r0, r0, r6
 8001bd8:	2802      	cmp	r0, #2
 8001bda:	d9f6      	bls.n	8001bca <HAL_RCC_OscConfig+0x1be>
 8001bdc:	e78c      	b.n	8001af8 <HAL_RCC_OscConfig+0xec>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bde:	6962      	ldr	r2, [r4, #20]
 8001be0:	4b2a      	ldr	r3, [pc, #168]	; (8001c8c <HAL_RCC_OscConfig+0x280>)
 8001be2:	b17a      	cbz	r2, 8001c04 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_LSI_ENABLE();
 8001be4:	2201      	movs	r2, #1
 8001be6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001be8:	f7ff f8b6 	bl	8000d58 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bec:	4d24      	ldr	r5, [pc, #144]	; (8001c80 <HAL_RCC_OscConfig+0x274>)
      tickstart = HAL_GetTick();
 8001bee:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001bf2:	0798      	lsls	r0, r3, #30
 8001bf4:	f53f af17 	bmi.w	8001a26 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bf8:	f7ff f8ae 	bl	8000d58 <HAL_GetTick>
 8001bfc:	1b80      	subs	r0, r0, r6
 8001bfe:	2802      	cmp	r0, #2
 8001c00:	d9f6      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x1e4>
 8001c02:	e779      	b.n	8001af8 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_LSI_DISABLE();
 8001c04:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001c06:	f7ff f8a7 	bl	8000d58 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c0a:	4d1d      	ldr	r5, [pc, #116]	; (8001c80 <HAL_RCC_OscConfig+0x274>)
      tickstart = HAL_GetTick();
 8001c0c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c0e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001c10:	0799      	lsls	r1, r3, #30
 8001c12:	f57f af08 	bpl.w	8001a26 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c16:	f7ff f89f 	bl	8000d58 <HAL_GetTick>
 8001c1a:	1b80      	subs	r0, r0, r6
 8001c1c:	2802      	cmp	r0, #2
 8001c1e:	d9f6      	bls.n	8001c0e <HAL_RCC_OscConfig+0x202>
 8001c20:	e76a      	b.n	8001af8 <HAL_RCC_OscConfig+0xec>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001c22:	f7ff f899 	bl	8000d58 <HAL_GetTick>
 8001c26:	1b80      	subs	r0, r0, r6
 8001c28:	2802      	cmp	r0, #2
 8001c2a:	f67f af13 	bls.w	8001a54 <HAL_RCC_OscConfig+0x48>
 8001c2e:	e763      	b.n	8001af8 <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c30:	2b05      	cmp	r3, #5
 8001c32:	d104      	bne.n	8001c3e <HAL_RCC_OscConfig+0x232>
 8001c34:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001c36:	f043 0304 	orr.w	r3, r3, #4
 8001c3a:	672b      	str	r3, [r5, #112]	; 0x70
 8001c3c:	e713      	b.n	8001a66 <HAL_RCC_OscConfig+0x5a>
 8001c3e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001c40:	f022 0201 	bic.w	r2, r2, #1
 8001c44:	672a      	str	r2, [r5, #112]	; 0x70
 8001c46:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001c48:	f022 0204 	bic.w	r2, r2, #4
 8001c4c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f47f af0d 	bne.w	8001a6e <HAL_RCC_OscConfig+0x62>
      tickstart = HAL_GetTick();
 8001c54:	f7ff f880 	bl	8000d58 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c58:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001c5c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c5e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001c60:	0798      	lsls	r0, r3, #30
 8001c62:	f57f af0e 	bpl.w	8001a82 <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c66:	f7ff f877 	bl	8000d58 <HAL_GetTick>
 8001c6a:	1b80      	subs	r0, r0, r6
 8001c6c:	42b8      	cmp	r0, r7
 8001c6e:	d9f6      	bls.n	8001c5e <HAL_RCC_OscConfig+0x252>
 8001c70:	e742      	b.n	8001af8 <HAL_RCC_OscConfig+0xec>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c72:	f7ff f871 	bl	8000d58 <HAL_GetTick>
 8001c76:	1b80      	subs	r0, r0, r6
 8001c78:	42b8      	cmp	r0, r7
 8001c7a:	f67f aefe 	bls.w	8001a7a <HAL_RCC_OscConfig+0x6e>
 8001c7e:	e73b      	b.n	8001af8 <HAL_RCC_OscConfig+0xec>
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40007000 	.word	0x40007000
 8001c88:	42470000 	.word	0x42470000
 8001c8c:	42470e80 	.word	0x42470e80
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c90:	4d23      	ldr	r5, [pc, #140]	; (8001d20 <HAL_RCC_OscConfig+0x314>)
 8001c92:	68ab      	ldr	r3, [r5, #8]
 8001c94:	f003 030c 	and.w	r3, r3, #12
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	f43f af16 	beq.w	8001aca <HAL_RCC_OscConfig+0xbe>
 8001c9e:	4e21      	ldr	r6, [pc, #132]	; (8001d24 <HAL_RCC_OscConfig+0x318>)
 8001ca0:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ca2:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001ca4:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ca6:	d12d      	bne.n	8001d04 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8001ca8:	f7ff f856 	bl	8000d58 <HAL_GetTick>
 8001cac:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cae:	682b      	ldr	r3, [r5, #0]
 8001cb0:	0199      	lsls	r1, r3, #6
 8001cb2:	d421      	bmi.n	8001cf8 <HAL_RCC_OscConfig+0x2ec>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cb4:	6a22      	ldr	r2, [r4, #32]
 8001cb6:	69e3      	ldr	r3, [r4, #28]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001cbc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001cc0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001cc2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001cc6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001cc8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001ccc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cce:	4c14      	ldr	r4, [pc, #80]	; (8001d20 <HAL_RCC_OscConfig+0x314>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cd0:	0852      	lsrs	r2, r2, #1
 8001cd2:	3a01      	subs	r2, #1
 8001cd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001cd8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001cda:	2301      	movs	r3, #1
 8001cdc:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001cde:	f7ff f83b 	bl	8000d58 <HAL_GetTick>
 8001ce2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce4:	6823      	ldr	r3, [r4, #0]
 8001ce6:	019a      	lsls	r2, r3, #6
 8001ce8:	f53f aecf 	bmi.w	8001a8a <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cec:	f7ff f834 	bl	8000d58 <HAL_GetTick>
 8001cf0:	1b40      	subs	r0, r0, r5
 8001cf2:	2802      	cmp	r0, #2
 8001cf4:	d9f6      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x2d8>
 8001cf6:	e6ff      	b.n	8001af8 <HAL_RCC_OscConfig+0xec>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cf8:	f7ff f82e 	bl	8000d58 <HAL_GetTick>
 8001cfc:	1bc0      	subs	r0, r0, r7
 8001cfe:	2802      	cmp	r0, #2
 8001d00:	d9d5      	bls.n	8001cae <HAL_RCC_OscConfig+0x2a2>
 8001d02:	e6f9      	b.n	8001af8 <HAL_RCC_OscConfig+0xec>
        tickstart = HAL_GetTick();
 8001d04:	f7ff f828 	bl	8000d58 <HAL_GetTick>
 8001d08:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d0a:	682b      	ldr	r3, [r5, #0]
 8001d0c:	019b      	lsls	r3, r3, #6
 8001d0e:	f57f aebc 	bpl.w	8001a8a <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d12:	f7ff f821 	bl	8000d58 <HAL_GetTick>
 8001d16:	1b00      	subs	r0, r0, r4
 8001d18:	2802      	cmp	r0, #2
 8001d1a:	d9f6      	bls.n	8001d0a <HAL_RCC_OscConfig+0x2fe>
 8001d1c:	e6ec      	b.n	8001af8 <HAL_RCC_OscConfig+0xec>
 8001d1e:	bf00      	nop
 8001d20:	40023800 	.word	0x40023800
 8001d24:	42470060 	.word	0x42470060

08001d28 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d28:	6803      	ldr	r3, [r0, #0]
 8001d2a:	68da      	ldr	r2, [r3, #12]
 8001d2c:	f042 0201 	orr.w	r2, r2, #1
 8001d30:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	f042 0201 	orr.w	r2, r2, #1
 8001d38:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	4770      	bx	lr

08001d3e <HAL_TIM_OC_DelayElapsedCallback>:
 8001d3e:	4770      	bx	lr

08001d40 <HAL_TIM_IC_CaptureCallback>:
 8001d40:	4770      	bx	lr

08001d42 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001d42:	4770      	bx	lr

08001d44 <HAL_TIM_TriggerCallback>:
 8001d44:	4770      	bx	lr

08001d46 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d46:	6803      	ldr	r3, [r0, #0]
 8001d48:	691a      	ldr	r2, [r3, #16]
 8001d4a:	0791      	lsls	r1, r2, #30
{
 8001d4c:	b510      	push	{r4, lr}
 8001d4e:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d50:	d50e      	bpl.n	8001d70 <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001d52:	68da      	ldr	r2, [r3, #12]
 8001d54:	0792      	lsls	r2, r2, #30
 8001d56:	d50b      	bpl.n	8001d70 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d58:	f06f 0202 	mvn.w	r2, #2
 8001d5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d5e:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d60:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d62:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d64:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d66:	d077      	beq.n	8001e58 <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001d68:	f7ff ffea 	bl	8001d40 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d70:	6823      	ldr	r3, [r4, #0]
 8001d72:	691a      	ldr	r2, [r3, #16]
 8001d74:	0750      	lsls	r0, r2, #29
 8001d76:	d510      	bpl.n	8001d9a <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001d78:	68da      	ldr	r2, [r3, #12]
 8001d7a:	0751      	lsls	r1, r2, #29
 8001d7c:	d50d      	bpl.n	8001d9a <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d7e:	f06f 0204 	mvn.w	r2, #4
 8001d82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d84:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d86:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d88:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d8c:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001d8e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d90:	d068      	beq.n	8001e64 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001d92:	f7ff ffd5 	bl	8001d40 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d96:	2300      	movs	r3, #0
 8001d98:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d9a:	6823      	ldr	r3, [r4, #0]
 8001d9c:	691a      	ldr	r2, [r3, #16]
 8001d9e:	0712      	lsls	r2, r2, #28
 8001da0:	d50f      	bpl.n	8001dc2 <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001da2:	68da      	ldr	r2, [r3, #12]
 8001da4:	0710      	lsls	r0, r2, #28
 8001da6:	d50c      	bpl.n	8001dc2 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001da8:	f06f 0208 	mvn.w	r2, #8
 8001dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dae:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001db0:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001db2:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001db4:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001db6:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001db8:	d05a      	beq.n	8001e70 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001dba:	f7ff ffc1 	bl	8001d40 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dc2:	6823      	ldr	r3, [r4, #0]
 8001dc4:	691a      	ldr	r2, [r3, #16]
 8001dc6:	06d2      	lsls	r2, r2, #27
 8001dc8:	d510      	bpl.n	8001dec <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001dca:	68da      	ldr	r2, [r3, #12]
 8001dcc:	06d0      	lsls	r0, r2, #27
 8001dce:	d50d      	bpl.n	8001dec <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dd0:	f06f 0210 	mvn.w	r2, #16
 8001dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dd6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dd8:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dda:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dde:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001de0:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001de2:	d04b      	beq.n	8001e7c <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001de4:	f7ff ffac 	bl	8001d40 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de8:	2300      	movs	r3, #0
 8001dea:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dec:	6823      	ldr	r3, [r4, #0]
 8001dee:	691a      	ldr	r2, [r3, #16]
 8001df0:	07d1      	lsls	r1, r2, #31
 8001df2:	d508      	bpl.n	8001e06 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	07d2      	lsls	r2, r2, #31
 8001df8:	d505      	bpl.n	8001e06 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001dfa:	f06f 0201 	mvn.w	r2, #1
 8001dfe:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e00:	4620      	mov	r0, r4
 8001e02:	f000 fe51 	bl	8002aa8 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e06:	6823      	ldr	r3, [r4, #0]
 8001e08:	691a      	ldr	r2, [r3, #16]
 8001e0a:	0610      	lsls	r0, r2, #24
 8001e0c:	d508      	bpl.n	8001e20 <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	0611      	lsls	r1, r2, #24
 8001e12:	d505      	bpl.n	8001e20 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e18:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001e1a:	4620      	mov	r0, r4
 8001e1c:	f000 f8d7 	bl	8001fce <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e20:	6823      	ldr	r3, [r4, #0]
 8001e22:	691a      	ldr	r2, [r3, #16]
 8001e24:	0652      	lsls	r2, r2, #25
 8001e26:	d508      	bpl.n	8001e3a <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001e28:	68da      	ldr	r2, [r3, #12]
 8001e2a:	0650      	lsls	r0, r2, #25
 8001e2c:	d505      	bpl.n	8001e3a <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e32:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001e34:	4620      	mov	r0, r4
 8001e36:	f7ff ff85 	bl	8001d44 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e3a:	6823      	ldr	r3, [r4, #0]
 8001e3c:	691a      	ldr	r2, [r3, #16]
 8001e3e:	0691      	lsls	r1, r2, #26
 8001e40:	d522      	bpl.n	8001e88 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001e42:	68da      	ldr	r2, [r3, #12]
 8001e44:	0692      	lsls	r2, r2, #26
 8001e46:	d51f      	bpl.n	8001e88 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e48:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001e4c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e4e:	611a      	str	r2, [r3, #16]
    }
  }
}
 8001e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8001e54:	f000 b8ba 	b.w	8001fcc <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e58:	f7ff ff71 	bl	8001d3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e5c:	4620      	mov	r0, r4
 8001e5e:	f7ff ff70 	bl	8001d42 <HAL_TIM_PWM_PulseFinishedCallback>
 8001e62:	e783      	b.n	8001d6c <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e64:	f7ff ff6b 	bl	8001d3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e68:	4620      	mov	r0, r4
 8001e6a:	f7ff ff6a 	bl	8001d42 <HAL_TIM_PWM_PulseFinishedCallback>
 8001e6e:	e792      	b.n	8001d96 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e70:	f7ff ff65 	bl	8001d3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001e74:	4620      	mov	r0, r4
 8001e76:	f7ff ff64 	bl	8001d42 <HAL_TIM_PWM_PulseFinishedCallback>
 8001e7a:	e7a0      	b.n	8001dbe <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e7c:	f7ff ff5f 	bl	8001d3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e80:	4620      	mov	r0, r4
 8001e82:	f7ff ff5e 	bl	8001d42 <HAL_TIM_PWM_PulseFinishedCallback>
 8001e86:	e7af      	b.n	8001de8 <HAL_TIM_IRQHandler+0xa2>
 8001e88:	bd10      	pop	{r4, pc}
	...

08001e8c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001e8c:	4a2e      	ldr	r2, [pc, #184]	; (8001f48 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8001e8e:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001e90:	4290      	cmp	r0, r2
 8001e92:	d012      	beq.n	8001eba <TIM_Base_SetConfig+0x2e>
 8001e94:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001e98:	d00f      	beq.n	8001eba <TIM_Base_SetConfig+0x2e>
 8001e9a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001e9e:	4290      	cmp	r0, r2
 8001ea0:	d00b      	beq.n	8001eba <TIM_Base_SetConfig+0x2e>
 8001ea2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ea6:	4290      	cmp	r0, r2
 8001ea8:	d007      	beq.n	8001eba <TIM_Base_SetConfig+0x2e>
 8001eaa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001eae:	4290      	cmp	r0, r2
 8001eb0:	d003      	beq.n	8001eba <TIM_Base_SetConfig+0x2e>
 8001eb2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001eb6:	4290      	cmp	r0, r2
 8001eb8:	d11d      	bne.n	8001ef6 <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001eba:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001ec0:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001ec2:	4a21      	ldr	r2, [pc, #132]	; (8001f48 <TIM_Base_SetConfig+0xbc>)
 8001ec4:	4290      	cmp	r0, r2
 8001ec6:	d104      	bne.n	8001ed2 <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ec8:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	e028      	b.n	8001f24 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001ed2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001ed6:	d0f7      	beq.n	8001ec8 <TIM_Base_SetConfig+0x3c>
 8001ed8:	4a1c      	ldr	r2, [pc, #112]	; (8001f4c <TIM_Base_SetConfig+0xc0>)
 8001eda:	4290      	cmp	r0, r2
 8001edc:	d0f4      	beq.n	8001ec8 <TIM_Base_SetConfig+0x3c>
 8001ede:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ee2:	4290      	cmp	r0, r2
 8001ee4:	d0f0      	beq.n	8001ec8 <TIM_Base_SetConfig+0x3c>
 8001ee6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001eea:	4290      	cmp	r0, r2
 8001eec:	d0ec      	beq.n	8001ec8 <TIM_Base_SetConfig+0x3c>
 8001eee:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001ef2:	4290      	cmp	r0, r2
 8001ef4:	d0e8      	beq.n	8001ec8 <TIM_Base_SetConfig+0x3c>
 8001ef6:	4a16      	ldr	r2, [pc, #88]	; (8001f50 <TIM_Base_SetConfig+0xc4>)
 8001ef8:	4290      	cmp	r0, r2
 8001efa:	d0e5      	beq.n	8001ec8 <TIM_Base_SetConfig+0x3c>
 8001efc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f00:	4290      	cmp	r0, r2
 8001f02:	d0e1      	beq.n	8001ec8 <TIM_Base_SetConfig+0x3c>
 8001f04:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f08:	4290      	cmp	r0, r2
 8001f0a:	d0dd      	beq.n	8001ec8 <TIM_Base_SetConfig+0x3c>
 8001f0c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001f10:	4290      	cmp	r0, r2
 8001f12:	d0d9      	beq.n	8001ec8 <TIM_Base_SetConfig+0x3c>
 8001f14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f18:	4290      	cmp	r0, r2
 8001f1a:	d0d5      	beq.n	8001ec8 <TIM_Base_SetConfig+0x3c>
 8001f1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f20:	4290      	cmp	r0, r2
 8001f22:	d0d1      	beq.n	8001ec8 <TIM_Base_SetConfig+0x3c>
  }

  TIMx->CR1 = tmpcr1;
 8001f24:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f26:	688b      	ldr	r3, [r1, #8]
 8001f28:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001f2a:	680b      	ldr	r3, [r1, #0]
 8001f2c:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001f2e:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <TIM_Base_SetConfig+0xbc>)
 8001f30:	4298      	cmp	r0, r3
 8001f32:	d006      	beq.n	8001f42 <TIM_Base_SetConfig+0xb6>
 8001f34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f38:	4298      	cmp	r0, r3
 8001f3a:	d002      	beq.n	8001f42 <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	6143      	str	r3, [r0, #20]
}
 8001f40:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001f42:	690b      	ldr	r3, [r1, #16]
 8001f44:	6303      	str	r3, [r0, #48]	; 0x30
 8001f46:	e7f9      	b.n	8001f3c <TIM_Base_SetConfig+0xb0>
 8001f48:	40010000 	.word	0x40010000
 8001f4c:	40000400 	.word	0x40000400
 8001f50:	40014000 	.word	0x40014000

08001f54 <HAL_TIM_Base_Init>:
{ 
 8001f54:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001f56:	4604      	mov	r4, r0
 8001f58:	b1a0      	cbz	r0, 8001f84 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001f5a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001f5e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f62:	b91b      	cbnz	r3, 8001f6c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001f64:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8001f68:	f000 fe1c 	bl	8002ba4 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001f72:	6820      	ldr	r0, [r4, #0]
 8001f74:	1d21      	adds	r1, r4, #4
 8001f76:	f7ff ff89 	bl	8001e8c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001f80:	2000      	movs	r0, #0
 8001f82:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001f84:	2001      	movs	r0, #1
}
 8001f86:	bd10      	pop	{r4, pc}

08001f88 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001f88:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001f8c:	2b01      	cmp	r3, #1
{
 8001f8e:	b510      	push	{r4, lr}
 8001f90:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001f94:	d018      	beq.n	8001fc8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001f96:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001f9a:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001f9c:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001f9e:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001fa0:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001fa2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001fa6:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	4322      	orrs	r2, r4
 8001fac:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fb4:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001fc8:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8001fca:	bd10      	pop	{r4, pc}

08001fcc <HAL_TIMEx_CommutationCallback>:
 8001fcc:	4770      	bx	lr

08001fce <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fce:	4770      	bx	lr

08001fd0 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001fd4:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001fd6:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8001fd8:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fda:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001fdc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001fe0:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001fe2:	6133      	str	r3, [r6, #16]
{
 8001fe4:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fe6:	6883      	ldr	r3, [r0, #8]
 8001fe8:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8001fea:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fec:	4303      	orrs	r3, r0
 8001fee:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001ff0:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ff4:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001ff6:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ffa:	430b      	orrs	r3, r1
 8001ffc:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001ffe:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8002000:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8002002:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8002004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8002008:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800200a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800200e:	6173      	str	r3, [r6, #20]
 8002010:	4b7a      	ldr	r3, [pc, #488]	; (80021fc <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002012:	d17c      	bne.n	800210e <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002014:	429e      	cmp	r6, r3
 8002016:	d003      	beq.n	8002020 <UART_SetConfig+0x50>
 8002018:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800201c:	429e      	cmp	r6, r3
 800201e:	d144      	bne.n	80020aa <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002020:	f7ff fca6 	bl	8001970 <HAL_RCC_GetPCLK2Freq>
 8002024:	2519      	movs	r5, #25
 8002026:	fb05 f300 	mul.w	r3, r5, r0
 800202a:	6860      	ldr	r0, [r4, #4]
 800202c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002030:	0040      	lsls	r0, r0, #1
 8002032:	fbb3 f3f0 	udiv	r3, r3, r0
 8002036:	fbb3 f3f9 	udiv	r3, r3, r9
 800203a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800203e:	f7ff fc97 	bl	8001970 <HAL_RCC_GetPCLK2Freq>
 8002042:	6863      	ldr	r3, [r4, #4]
 8002044:	4368      	muls	r0, r5
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	fbb0 f7f3 	udiv	r7, r0, r3
 800204c:	f7ff fc90 	bl	8001970 <HAL_RCC_GetPCLK2Freq>
 8002050:	6863      	ldr	r3, [r4, #4]
 8002052:	4368      	muls	r0, r5
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	fbb0 f3f3 	udiv	r3, r0, r3
 800205a:	fbb3 f3f9 	udiv	r3, r3, r9
 800205e:	fb09 7313 	mls	r3, r9, r3, r7
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	3332      	adds	r3, #50	; 0x32
 8002066:	fbb3 f3f9 	udiv	r3, r3, r9
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8002070:	f7ff fc7e 	bl	8001970 <HAL_RCC_GetPCLK2Freq>
 8002074:	6862      	ldr	r2, [r4, #4]
 8002076:	4368      	muls	r0, r5
 8002078:	0052      	lsls	r2, r2, #1
 800207a:	fbb0 faf2 	udiv	sl, r0, r2
 800207e:	f7ff fc77 	bl	8001970 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002082:	6863      	ldr	r3, [r4, #4]
 8002084:	4368      	muls	r0, r5
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	fbb0 f3f3 	udiv	r3, r0, r3
 800208c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002090:	fb09 a313 	mls	r3, r9, r3, sl
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	3332      	adds	r3, #50	; 0x32
 8002098:	fbb3 f3f9 	udiv	r3, r3, r9
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80020a2:	443b      	add	r3, r7
 80020a4:	60b3      	str	r3, [r6, #8]
 80020a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80020aa:	f7ff fc51 	bl	8001950 <HAL_RCC_GetPCLK1Freq>
 80020ae:	2519      	movs	r5, #25
 80020b0:	fb05 f300 	mul.w	r3, r5, r0
 80020b4:	6860      	ldr	r0, [r4, #4]
 80020b6:	f04f 0964 	mov.w	r9, #100	; 0x64
 80020ba:	0040      	lsls	r0, r0, #1
 80020bc:	fbb3 f3f0 	udiv	r3, r3, r0
 80020c0:	fbb3 f3f9 	udiv	r3, r3, r9
 80020c4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80020c8:	f7ff fc42 	bl	8001950 <HAL_RCC_GetPCLK1Freq>
 80020cc:	6863      	ldr	r3, [r4, #4]
 80020ce:	4368      	muls	r0, r5
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	fbb0 f7f3 	udiv	r7, r0, r3
 80020d6:	f7ff fc3b 	bl	8001950 <HAL_RCC_GetPCLK1Freq>
 80020da:	6863      	ldr	r3, [r4, #4]
 80020dc:	4368      	muls	r0, r5
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e4:	fbb3 f3f9 	udiv	r3, r3, r9
 80020e8:	fb09 7313 	mls	r3, r9, r3, r7
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	3332      	adds	r3, #50	; 0x32
 80020f0:	fbb3 f3f9 	udiv	r3, r3, r9
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80020fa:	f7ff fc29 	bl	8001950 <HAL_RCC_GetPCLK1Freq>
 80020fe:	6862      	ldr	r2, [r4, #4]
 8002100:	4368      	muls	r0, r5
 8002102:	0052      	lsls	r2, r2, #1
 8002104:	fbb0 faf2 	udiv	sl, r0, r2
 8002108:	f7ff fc22 	bl	8001950 <HAL_RCC_GetPCLK1Freq>
 800210c:	e7b9      	b.n	8002082 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800210e:	429e      	cmp	r6, r3
 8002110:	d002      	beq.n	8002118 <UART_SetConfig+0x148>
 8002112:	4b3b      	ldr	r3, [pc, #236]	; (8002200 <UART_SetConfig+0x230>)
 8002114:	429e      	cmp	r6, r3
 8002116:	d140      	bne.n	800219a <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002118:	f7ff fc2a 	bl	8001970 <HAL_RCC_GetPCLK2Freq>
 800211c:	6867      	ldr	r7, [r4, #4]
 800211e:	2519      	movs	r5, #25
 8002120:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002124:	fb05 f300 	mul.w	r3, r5, r0
 8002128:	00bf      	lsls	r7, r7, #2
 800212a:	fbb3 f3f7 	udiv	r3, r3, r7
 800212e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002132:	011f      	lsls	r7, r3, #4
 8002134:	f7ff fc1c 	bl	8001970 <HAL_RCC_GetPCLK2Freq>
 8002138:	6863      	ldr	r3, [r4, #4]
 800213a:	4368      	muls	r0, r5
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	fbb0 f8f3 	udiv	r8, r0, r3
 8002142:	f7ff fc15 	bl	8001970 <HAL_RCC_GetPCLK2Freq>
 8002146:	6863      	ldr	r3, [r4, #4]
 8002148:	4368      	muls	r0, r5
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002150:	fbb3 f3f9 	udiv	r3, r3, r9
 8002154:	fb09 8313 	mls	r3, r9, r3, r8
 8002158:	011b      	lsls	r3, r3, #4
 800215a:	3332      	adds	r3, #50	; 0x32
 800215c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002160:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002164:	f7ff fc04 	bl	8001970 <HAL_RCC_GetPCLK2Freq>
 8002168:	6862      	ldr	r2, [r4, #4]
 800216a:	4368      	muls	r0, r5
 800216c:	0092      	lsls	r2, r2, #2
 800216e:	fbb0 faf2 	udiv	sl, r0, r2
 8002172:	f7ff fbfd 	bl	8001970 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002176:	6863      	ldr	r3, [r4, #4]
 8002178:	4368      	muls	r0, r5
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002180:	fbb3 f3f9 	udiv	r3, r3, r9
 8002184:	fb09 a313 	mls	r3, r9, r3, sl
 8002188:	011b      	lsls	r3, r3, #4
 800218a:	3332      	adds	r3, #50	; 0x32
 800218c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002190:	f003 030f 	and.w	r3, r3, #15
 8002194:	ea43 0308 	orr.w	r3, r3, r8
 8002198:	e783      	b.n	80020a2 <UART_SetConfig+0xd2>
 800219a:	f7ff fbd9 	bl	8001950 <HAL_RCC_GetPCLK1Freq>
 800219e:	6867      	ldr	r7, [r4, #4]
 80021a0:	2519      	movs	r5, #25
 80021a2:	f04f 0964 	mov.w	r9, #100	; 0x64
 80021a6:	fb05 f300 	mul.w	r3, r5, r0
 80021aa:	00bf      	lsls	r7, r7, #2
 80021ac:	fbb3 f3f7 	udiv	r3, r3, r7
 80021b0:	fbb3 f3f9 	udiv	r3, r3, r9
 80021b4:	011f      	lsls	r7, r3, #4
 80021b6:	f7ff fbcb 	bl	8001950 <HAL_RCC_GetPCLK1Freq>
 80021ba:	6863      	ldr	r3, [r4, #4]
 80021bc:	4368      	muls	r0, r5
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	fbb0 f8f3 	udiv	r8, r0, r3
 80021c4:	f7ff fbc4 	bl	8001950 <HAL_RCC_GetPCLK1Freq>
 80021c8:	6863      	ldr	r3, [r4, #4]
 80021ca:	4368      	muls	r0, r5
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80021d2:	fbb3 f3f9 	udiv	r3, r3, r9
 80021d6:	fb09 8313 	mls	r3, r9, r3, r8
 80021da:	011b      	lsls	r3, r3, #4
 80021dc:	3332      	adds	r3, #50	; 0x32
 80021de:	fbb3 f3f9 	udiv	r3, r3, r9
 80021e2:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80021e6:	f7ff fbb3 	bl	8001950 <HAL_RCC_GetPCLK1Freq>
 80021ea:	6862      	ldr	r2, [r4, #4]
 80021ec:	4368      	muls	r0, r5
 80021ee:	0092      	lsls	r2, r2, #2
 80021f0:	fbb0 faf2 	udiv	sl, r0, r2
 80021f4:	f7ff fbac 	bl	8001950 <HAL_RCC_GetPCLK1Freq>
 80021f8:	e7bd      	b.n	8002176 <UART_SetConfig+0x1a6>
 80021fa:	bf00      	nop
 80021fc:	40011000 	.word	0x40011000
 8002200:	40011400 	.word	0x40011400

08002204 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002206:	4604      	mov	r4, r0
 8002208:	460e      	mov	r6, r1
 800220a:	4617      	mov	r7, r2
 800220c:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800220e:	6821      	ldr	r1, [r4, #0]
 8002210:	680b      	ldr	r3, [r1, #0]
 8002212:	ea36 0303 	bics.w	r3, r6, r3
 8002216:	d101      	bne.n	800221c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8002218:	2000      	movs	r0, #0
}
 800221a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 800221c:	1c6b      	adds	r3, r5, #1
 800221e:	d0f7      	beq.n	8002210 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002220:	b995      	cbnz	r5, 8002248 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002222:	6823      	ldr	r3, [r4, #0]
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800222a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800222c:	695a      	ldr	r2, [r3, #20]
 800222e:	f022 0201 	bic.w	r2, r2, #1
 8002232:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002234:	2320      	movs	r3, #32
 8002236:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800223a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800223e:	2300      	movs	r3, #0
 8002240:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8002244:	2003      	movs	r0, #3
 8002246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002248:	f7fe fd86 	bl	8000d58 <HAL_GetTick>
 800224c:	1bc0      	subs	r0, r0, r7
 800224e:	4285      	cmp	r5, r0
 8002250:	d2dd      	bcs.n	800220e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8002252:	e7e6      	b.n	8002222 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08002254 <HAL_UART_Init>:
{
 8002254:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002256:	4604      	mov	r4, r0
 8002258:	b340      	cbz	r0, 80022ac <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800225a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800225e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002262:	b91b      	cbnz	r3, 800226c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002264:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002268:	f000 fcd2 	bl	8002c10 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800226c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800226e:	2324      	movs	r3, #36	; 0x24
 8002270:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002274:	68d3      	ldr	r3, [r2, #12]
 8002276:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800227a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800227c:	4620      	mov	r0, r4
 800227e:	f7ff fea7 	bl	8001fd0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002282:	6823      	ldr	r3, [r4, #0]
 8002284:	691a      	ldr	r2, [r3, #16]
 8002286:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800228a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800228c:	695a      	ldr	r2, [r3, #20]
 800228e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002292:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800229a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800229c:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 800229e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022a0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80022a2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80022a6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80022aa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80022ac:	2001      	movs	r0, #1
}
 80022ae:	bd10      	pop	{r4, pc}

080022b0 <HAL_UART_Transmit>:
{
 80022b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022b4:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 80022b6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80022ba:	2b20      	cmp	r3, #32
{
 80022bc:	4604      	mov	r4, r0
 80022be:	460d      	mov	r5, r1
 80022c0:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 80022c2:	d14f      	bne.n	8002364 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 80022c4:	2900      	cmp	r1, #0
 80022c6:	d04a      	beq.n	800235e <HAL_UART_Transmit+0xae>
 80022c8:	2a00      	cmp	r2, #0
 80022ca:	d048      	beq.n	800235e <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80022cc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d047      	beq.n	8002364 <HAL_UART_Transmit+0xb4>
 80022d4:	2301      	movs	r3, #1
 80022d6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022da:	2300      	movs	r3, #0
 80022dc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022de:	2321      	movs	r3, #33	; 0x21
 80022e0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80022e4:	f7fe fd38 	bl	8000d58 <HAL_GetTick>
    huart->TxXferSize = Size;
 80022e8:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80022ec:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80022ee:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80022f2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	b96b      	cbnz	r3, 8002314 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022f8:	463b      	mov	r3, r7
 80022fa:	4632      	mov	r2, r6
 80022fc:	2140      	movs	r1, #64	; 0x40
 80022fe:	4620      	mov	r0, r4
 8002300:	f7ff ff80 	bl	8002204 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002304:	b9b0      	cbnz	r0, 8002334 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 8002306:	2320      	movs	r3, #32
 8002308:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 800230c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8002310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002314:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002316:	3b01      	subs	r3, #1
 8002318:	b29b      	uxth	r3, r3
 800231a:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800231c:	68a3      	ldr	r3, [r4, #8]
 800231e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002322:	4632      	mov	r2, r6
 8002324:	463b      	mov	r3, r7
 8002326:	f04f 0180 	mov.w	r1, #128	; 0x80
 800232a:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800232c:	d10e      	bne.n	800234c <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800232e:	f7ff ff69 	bl	8002204 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002332:	b110      	cbz	r0, 800233a <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8002334:	2003      	movs	r0, #3
 8002336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800233a:	882b      	ldrh	r3, [r5, #0]
 800233c:	6822      	ldr	r2, [r4, #0]
 800233e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002342:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002344:	6923      	ldr	r3, [r4, #16]
 8002346:	b943      	cbnz	r3, 800235a <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8002348:	3502      	adds	r5, #2
 800234a:	e7d2      	b.n	80022f2 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800234c:	f7ff ff5a 	bl	8002204 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002350:	2800      	cmp	r0, #0
 8002352:	d1ef      	bne.n	8002334 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002354:	6823      	ldr	r3, [r4, #0]
 8002356:	782a      	ldrb	r2, [r5, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	3501      	adds	r5, #1
 800235c:	e7c9      	b.n	80022f2 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800235e:	2001      	movs	r0, #1
 8002360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8002364:	2002      	movs	r0, #2
}
 8002366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800236c <mw_ahrs_input_data>:
char direction[] = "i";
float Azimuth = 0;
float value = 0;

void mw_ahrs_input_data(MW_AHRS *dst)
{
 800236c:	b508      	push	{r3, lr}
	 if(dst->can_read_data[0] == 0xF0)
 800236e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002372:	2bf0      	cmp	r3, #240	; 0xf0
 8002374:	d14f      	bne.n	8002416 <mw_ahrs_input_data+0xaa>
	{
		switch(dst->can_read_data[1])
 8002376:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800237a:	3b33      	subs	r3, #51	; 0x33
 800237c:	2b03      	cmp	r3, #3
 800237e:	d838      	bhi.n	80023f2 <mw_ahrs_input_data+0x86>
 8002380:	e8df f003 	tbb	[pc, r3]
 8002384:	b8814a02 	.word	0xb8814a02
		{
		case ACCELERATION:
			memcpy(dst->a_raw_data, &dst->can_read_data[2], 6);
 8002388:	4603      	mov	r3, r0
			dst->a_x = GET_S16_BYTE(dst->a_raw_data[0], dst->a_raw_data[1]) / 1000.0f;
 800238a:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8002564 <mw_ahrs_input_data+0x1f8>
			memcpy(dst->a_raw_data, &dst->can_read_data[2], 6);
 800238e:	f853 2f52 	ldr.w	r2, [r3, #82]!
 8002392:	6302      	str	r2, [r0, #48]	; 0x30
 8002394:	889b      	ldrh	r3, [r3, #4]
 8002396:	8683      	strh	r3, [r0, #52]	; 0x34
			dst->a_x = GET_S16_BYTE(dst->a_raw_data[0], dst->a_raw_data[1]) / 1000.0f;
 8002398:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
 800239c:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 80023a0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80023a4:	b21b      	sxth	r3, r3
 80023a6:	ee07 3a90 	vmov	s15, r3
 80023aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			dst->a_y = GET_S16_BYTE(dst->a_raw_data[2], dst->a_raw_data[3]) / 1000.0f;
 80023ae:	f890 2033 	ldrb.w	r2, [r0, #51]	; 0x33
 80023b2:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
			dst->a_x = GET_S16_BYTE(dst->a_raw_data[0], dst->a_raw_data[1]) / 1000.0f;
 80023b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
			dst->a_y = GET_S16_BYTE(dst->a_raw_data[2], dst->a_raw_data[3]) / 1000.0f;
 80023ba:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80023be:	b21b      	sxth	r3, r3
			dst->a_z = GET_S16_BYTE(dst->a_raw_data[4], dst->a_raw_data[5]) / 1000.0f;
 80023c0:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
			dst->a_y = GET_S16_BYTE(dst->a_raw_data[2], dst->a_raw_data[3]) / 1000.0f;
 80023c4:	ee07 3a90 	vmov	s15, r3
 80023c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			dst->a_x = GET_S16_BYTE(dst->a_raw_data[0], dst->a_raw_data[1]) / 1000.0f;
 80023cc:	edc0 6a00 	vstr	s13, [r0]
			dst->a_y = GET_S16_BYTE(dst->a_raw_data[2], dst->a_raw_data[3]) / 1000.0f;
 80023d0:	eec7 6a87 	vdiv.f32	s13, s15, s14
			dst->a_z = GET_S16_BYTE(dst->a_raw_data[4], dst->a_raw_data[5]) / 1000.0f;
 80023d4:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80023d8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80023dc:	b21b      	sxth	r3, r3
 80023de:	ee07 3a90 	vmov	s15, r3
 80023e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			dst->a_y = GET_S16_BYTE(dst->a_raw_data[2], dst->a_raw_data[3]) / 1000.0f;
 80023e6:	edc0 6a01 	vstr	s13, [r0, #4]
			dst->a_z = GET_S16_BYTE(dst->a_raw_data[4], dst->a_raw_data[5]) / 1000.0f;
 80023ea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80023ee:	edc0 6a02 	vstr	s13, [r0, #8]
			dst->m_y = GET_S16_BYTE(dst->m_raw_data[2], dst->m_raw_data[3]) / 10.0f;
			dst->m_z = GET_S16_BYTE(dst->m_raw_data[4], dst->m_raw_data[5]) / 10.0f;
			break;
                }

                value = dst->m_x / dst->m_y;
 80023f2:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 80023f6:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
 80023fa:	4b5b      	ldr	r3, [pc, #364]	; (8002568 <mw_ahrs_input_data+0x1fc>)
 80023fc:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8002400:	ed83 0a00 	vstr	s0, [r3]
                Azimuth = 90 - atanf(value);
 8002404:	f000 fcc4 	bl	8002d90 <atanf>
 8002408:	eddf 7a58 	vldr	s15, [pc, #352]	; 800256c <mw_ahrs_input_data+0x200>
 800240c:	4b58      	ldr	r3, [pc, #352]	; (8002570 <mw_ahrs_input_data+0x204>)
 800240e:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8002412:	ed83 0a00 	vstr	s0, [r3]
 8002416:	bd08      	pop	{r3, pc}
			memcpy(dst->g_raw_data, &dst->can_read_data[2], 6);
 8002418:	4603      	mov	r3, r0
			dst->g_x = GET_S16_BYTE(dst->g_raw_data[0], dst->g_raw_data[1]) / 10.0f;
 800241a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
			memcpy(dst->g_raw_data, &dst->can_read_data[2], 6);
 800241e:	f853 2f52 	ldr.w	r2, [r3, #82]!
 8002422:	f8c0 2036 	str.w	r2, [r0, #54]	; 0x36
 8002426:	889b      	ldrh	r3, [r3, #4]
 8002428:	8743      	strh	r3, [r0, #58]	; 0x3a
			dst->g_x = GET_S16_BYTE(dst->g_raw_data[0], dst->g_raw_data[1]) / 10.0f;
 800242a:	f890 2037 	ldrb.w	r2, [r0, #55]	; 0x37
 800242e:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8002432:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002436:	b21b      	sxth	r3, r3
 8002438:	ee07 3a90 	vmov	s15, r3
 800243c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			dst->g_y = GET_S16_BYTE(dst->g_raw_data[2], dst->g_raw_data[3]) / 10.0f;
 8002440:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 8002444:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
			dst->g_x = GET_S16_BYTE(dst->g_raw_data[0], dst->g_raw_data[1]) / 10.0f;
 8002448:	eec7 6a87 	vdiv.f32	s13, s15, s14
			dst->g_y = GET_S16_BYTE(dst->g_raw_data[2], dst->g_raw_data[3]) / 10.0f;
 800244c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002450:	b21b      	sxth	r3, r3
			dst->g_z = GET_S16_BYTE(dst->g_raw_data[4], dst->g_raw_data[5]) / 10.0f;
 8002452:	f890 203b 	ldrb.w	r2, [r0, #59]	; 0x3b
			dst->g_y = GET_S16_BYTE(dst->g_raw_data[2], dst->g_raw_data[3]) / 10.0f;
 8002456:	ee07 3a90 	vmov	s15, r3
 800245a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			dst->g_x = GET_S16_BYTE(dst->g_raw_data[0], dst->g_raw_data[1]) / 10.0f;
 800245e:	edc0 6a03 	vstr	s13, [r0, #12]
			dst->g_y = GET_S16_BYTE(dst->g_raw_data[2], dst->g_raw_data[3]) / 10.0f;
 8002462:	eec7 6a87 	vdiv.f32	s13, s15, s14
			dst->g_z = GET_S16_BYTE(dst->g_raw_data[4], dst->g_raw_data[5]) / 10.0f;
 8002466:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800246a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800246e:	b21b      	sxth	r3, r3
 8002470:	ee07 3a90 	vmov	s15, r3
 8002474:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			dst->g_y = GET_S16_BYTE(dst->g_raw_data[2], dst->g_raw_data[3]) / 10.0f;
 8002478:	edc0 6a04 	vstr	s13, [r0, #16]
			dst->g_z = GET_S16_BYTE(dst->g_raw_data[4], dst->g_raw_data[5]) / 10.0f;
 800247c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002480:	edc0 6a05 	vstr	s13, [r0, #20]
			break;
 8002484:	e7b5      	b.n	80023f2 <mw_ahrs_input_data+0x86>
			memcpy(dst->e_raw_data, &dst->can_read_data[2], 6);
 8002486:	4603      	mov	r3, r0
			dst->e_roll = GET_S16_BYTE(dst->e_raw_data[0], dst->e_raw_data[1]) / 100.0f;
 8002488:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8002574 <mw_ahrs_input_data+0x208>
			memcpy(dst->e_raw_data, &dst->can_read_data[2], 6);
 800248c:	f853 2f52 	ldr.w	r2, [r3, #82]!
 8002490:	63c2      	str	r2, [r0, #60]	; 0x3c
 8002492:	889b      	ldrh	r3, [r3, #4]
 8002494:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			dst->e_roll = GET_S16_BYTE(dst->e_raw_data[0], dst->e_raw_data[1]) / 100.0f;
 8002498:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800249c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80024a0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80024a4:	b21b      	sxth	r3, r3
 80024a6:	ee07 3a90 	vmov	s15, r3
 80024aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			dst->e_pitch = GET_S16_BYTE(dst->e_raw_data[2], dst->e_raw_data[3]) / 100.0f;
 80024ae:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
 80024b2:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
			dst->e_roll = GET_S16_BYTE(dst->e_raw_data[0], dst->e_raw_data[1]) / 100.0f;
 80024b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
			dst->e_pitch = GET_S16_BYTE(dst->e_raw_data[2], dst->e_raw_data[3]) / 100.0f;
 80024ba:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80024be:	b21b      	sxth	r3, r3
			dst->e_yaw = GET_S16_BYTE(dst->e_raw_data[4], dst->e_raw_data[5]) / 100.0f;
 80024c0:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
			dst->e_pitch = GET_S16_BYTE(dst->e_raw_data[2], dst->e_raw_data[3]) / 100.0f;
 80024c4:	ee07 3a90 	vmov	s15, r3
 80024c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			dst->e_roll = GET_S16_BYTE(dst->e_raw_data[0], dst->e_raw_data[1]) / 100.0f;
 80024cc:	edc0 6a08 	vstr	s13, [r0, #32]
			dst->e_pitch = GET_S16_BYTE(dst->e_raw_data[2], dst->e_raw_data[3]) / 100.0f;
 80024d0:	eec7 6a87 	vdiv.f32	s13, s15, s14
			dst->e_yaw = GET_S16_BYTE(dst->e_raw_data[4], dst->e_raw_data[5]) / 100.0f;
 80024d4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80024d8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80024dc:	b21b      	sxth	r3, r3
 80024de:	ee07 3a90 	vmov	s15, r3
 80024e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			dst->e_pitch = GET_S16_BYTE(dst->e_raw_data[2], dst->e_raw_data[3]) / 100.0f;
 80024e6:	edc0 6a07 	vstr	s13, [r0, #28]
			dst->e_yaw = GET_S16_BYTE(dst->e_raw_data[4], dst->e_raw_data[5]) / 100.0f;
 80024ea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80024ee:	edc0 6a06 	vstr	s13, [r0, #24]
			break;
 80024f2:	e77e      	b.n	80023f2 <mw_ahrs_input_data+0x86>
			memcpy(dst->m_raw_data, &dst->can_read_data[2], 6);
 80024f4:	4603      	mov	r3, r0
			dst->m_x = GET_S16_BYTE(dst->m_raw_data[0], dst->m_raw_data[1]) / 10.0f;
 80024f6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
			memcpy(dst->m_raw_data, &dst->can_read_data[2], 6);
 80024fa:	f853 2f52 	ldr.w	r2, [r3, #82]!
 80024fe:	f8c0 2042 	str.w	r2, [r0, #66]	; 0x42
 8002502:	889b      	ldrh	r3, [r3, #4]
 8002504:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
			dst->m_x = GET_S16_BYTE(dst->m_raw_data[0], dst->m_raw_data[1]) / 10.0f;
 8002508:	f890 2043 	ldrb.w	r2, [r0, #67]	; 0x43
 800250c:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8002510:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002514:	b21b      	sxth	r3, r3
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			dst->m_y = GET_S16_BYTE(dst->m_raw_data[2], dst->m_raw_data[3]) / 10.0f;
 800251e:	f890 2045 	ldrb.w	r2, [r0, #69]	; 0x45
 8002522:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
			dst->m_x = GET_S16_BYTE(dst->m_raw_data[0], dst->m_raw_data[1]) / 10.0f;
 8002526:	eec7 6a87 	vdiv.f32	s13, s15, s14
			dst->m_y = GET_S16_BYTE(dst->m_raw_data[2], dst->m_raw_data[3]) / 10.0f;
 800252a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800252e:	b21b      	sxth	r3, r3
			dst->m_z = GET_S16_BYTE(dst->m_raw_data[4], dst->m_raw_data[5]) / 10.0f;
 8002530:	f890 2047 	ldrb.w	r2, [r0, #71]	; 0x47
			dst->m_y = GET_S16_BYTE(dst->m_raw_data[2], dst->m_raw_data[3]) / 10.0f;
 8002534:	ee07 3a90 	vmov	s15, r3
 8002538:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			dst->m_x = GET_S16_BYTE(dst->m_raw_data[0], dst->m_raw_data[1]) / 10.0f;
 800253c:	edc0 6a09 	vstr	s13, [r0, #36]	; 0x24
			dst->m_y = GET_S16_BYTE(dst->m_raw_data[2], dst->m_raw_data[3]) / 10.0f;
 8002540:	eec7 6a87 	vdiv.f32	s13, s15, s14
			dst->m_z = GET_S16_BYTE(dst->m_raw_data[4], dst->m_raw_data[5]) / 10.0f;
 8002544:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 8002548:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800254c:	b21b      	sxth	r3, r3
 800254e:	ee07 3a90 	vmov	s15, r3
 8002552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			dst->m_y = GET_S16_BYTE(dst->m_raw_data[2], dst->m_raw_data[3]) / 10.0f;
 8002556:	edc0 6a0a 	vstr	s13, [r0, #40]	; 0x28
			dst->m_z = GET_S16_BYTE(dst->m_raw_data[4], dst->m_raw_data[5]) / 10.0f;
 800255a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800255e:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
			break;
 8002562:	e746      	b.n	80023f2 <mw_ahrs_input_data+0x86>
 8002564:	447a0000 	.word	0x447a0000
 8002568:	20000024 	.word	0x20000024
 800256c:	42b40000 	.word	0x42b40000
 8002570:	20000020 	.word	0x20000020
 8002574:	42c80000 	.word	0x42c80000

08002578 <mw_ahrs_set_data_type>:
	}
}


void mw_ahrs_set_data_type(MW_AHRS *dst, uint8_t acc, uint8_t gyro, uint8_t angle, uint8_t mangetic)
{
 8002578:	b510      	push	{r4, lr}
	dst->can_write_data[0] = AC_OBJECT_WRITE_REQ + OT_INT32;
	dst->can_write_data[1] = SET_CAN_DATA;
	dst->can_write_data[2] = 0;
	dst->can_write_data[3] = 0;

	dst->can_write_data[4] = (acc << DT_ACC) + (gyro << DT_GYRO) + (angle << DT_ANGLE) + (mangetic << DT_MAGNETIC);
 800257a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800257e:	f89d 1008 	ldrb.w	r1, [sp, #8]
	dst->can_write_data[0] = AC_OBJECT_WRITE_REQ + OT_INT32;
 8002582:	2418      	movs	r4, #24
 8002584:	f880 4048 	strb.w	r4, [r0, #72]	; 0x48
	dst->can_write_data[4] = (acc << DT_ACC) + (gyro << DT_GYRO) + (angle << DT_ANGLE) + (mangetic << DT_MAGNETIC);
 8002588:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
	dst->can_write_data[1] = SET_CAN_DATA;
 800258c:	2416      	movs	r4, #22
 800258e:	f880 4049 	strb.w	r4, [r0, #73]	; 0x49
	dst->can_write_data[4] = (acc << DT_ACC) + (gyro << DT_GYRO) + (angle << DT_ANGLE) + (mangetic << DT_MAGNETIC);
 8002592:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	dst->can_write_data[2] = 0;
 8002596:	2400      	movs	r4, #0
 8002598:	f880 404a 	strb.w	r4, [r0, #74]	; 0x4a
	dst->can_write_data[3] = 0;
 800259c:	f880 404b 	strb.w	r4, [r0, #75]	; 0x4b
	dst->can_write_data[4] = (acc << DT_ACC) + (gyro << DT_GYRO) + (angle << DT_ANGLE) + (mangetic << DT_MAGNETIC);
 80025a0:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
	dst->can_write_data[5] = 0;
 80025a4:	f880 404d 	strb.w	r4, [r0, #77]	; 0x4d
	dst->can_write_data[6] = 0;
 80025a8:	f880 404e 	strb.w	r4, [r0, #78]	; 0x4e
	dst->can_write_data[7] = 0;
 80025ac:	f880 404f 	strb.w	r4, [r0, #79]	; 0x4f
 80025b0:	bd10      	pop	{r4, pc}

080025b2 <mw_ahrs_set_period>:
}

void mw_ahrs_set_period(MW_AHRS *dst, uint32_t time)
{
	dst->can_write_data[0] = AC_OBJECT_WRITE_REQ + OT_INT32;
 80025b2:	2318      	movs	r3, #24
 80025b4:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
	dst->can_write_data[1] = SET_PERIOD;
 80025b8:	f880 3049 	strb.w	r3, [r0, #73]	; 0x49
	dst->can_write_data[2] = 0;
 80025bc:	2300      	movs	r3, #0
 80025be:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
	dst->can_write_data[3] = 0;
 80025c2:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b

	dst->can_write_data[4] = GET_LOWBYTE_16(GET_LOWWORD_32(time));
	dst->can_write_data[5] = GET_HIGHBYTE_16(GET_LOWWORD_32(time));
 80025c6:	0a0b      	lsrs	r3, r1, #8
	dst->can_write_data[4] = GET_LOWBYTE_16(GET_LOWWORD_32(time));
 80025c8:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
	dst->can_write_data[5] = GET_HIGHBYTE_16(GET_LOWWORD_32(time));
 80025cc:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
	dst->can_write_data[6] = GET_LOWBYTE_16(GET_HIGHWORD_32(time));
 80025d0:	0c0b      	lsrs	r3, r1, #16
	dst->can_write_data[7] = GET_HIGHBYTE_16(GET_HIGHWORD_32(time));
 80025d2:	0e09      	lsrs	r1, r1, #24
	dst->can_write_data[6] = GET_LOWBYTE_16(GET_HIGHWORD_32(time));
 80025d4:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
	dst->can_write_data[7] = GET_HIGHBYTE_16(GET_HIGHWORD_32(time));
 80025d8:	f880 104f 	strb.w	r1, [r0, #79]	; 0x4f
 80025dc:	4770      	bx	lr
	...

080025e0 <SystemClock_Config>:

}

/** System Clock Configuration
 */
void SystemClock_Config(void) {
 80025e0:	b510      	push	{r4, lr}
 80025e2:	b094      	sub	sp, #80	; 0x50
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 80025e4:	4b2a      	ldr	r3, [pc, #168]	; (8002690 <SystemClock_Config+0xb0>)
 80025e6:	2100      	movs	r1, #0
 80025e8:	9100      	str	r1, [sp, #0]
 80025ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80025f0:	641a      	str	r2, [r3, #64]	; 0x40
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	9b00      	ldr	r3, [sp, #0]
	;

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025fc:	4b25      	ldr	r3, [pc, #148]	; (8002694 <SystemClock_Config+0xb4>)
 80025fe:	9101      	str	r1, [sp, #4]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800260e:	9301      	str	r3, [sp, #4]
 8002610:	9b01      	ldr	r3, [sp, #4]

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002612:	2301      	movs	r3, #1
 8002614:	9307      	str	r3, [sp, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002616:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800261a:	9308      	str	r3, [sp, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800261c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002620:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002622:	2308      	movs	r3, #8
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002624:	2402      	movs	r4, #2
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002626:	930f      	str	r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 2;
	RCC_OscInitStruct.PLL.PLLR = 2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002628:	a807      	add	r0, sp, #28
	RCC_OscInitStruct.PLL.PLLN = 180;
 800262a:	23b4      	movs	r3, #180	; 0xb4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800262c:	940d      	str	r4, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLN = 180;
 800262e:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002630:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8002632:	9412      	str	r4, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8002634:	9413      	str	r4, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002636:	f7ff f9e9 	bl	8001a0c <HAL_RCC_OscConfig>
 800263a:	b100      	cbz	r0, 800263e <SystemClock_Config+0x5e>
 800263c:	e7fe      	b.n	800263c <SystemClock_Config+0x5c>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800263e:	f7ff f8ab 	bl	8001798 <HAL_PWREx_EnableOverDrive>
 8002642:	b100      	cbz	r0, 8002646 <SystemClock_Config+0x66>
 8002644:	e7fe      	b.n	8002644 <SystemClock_Config+0x64>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002646:	230f      	movs	r3, #15
 8002648:	9302      	str	r3, [sp, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800264a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800264e:	9004      	str	r0, [sp, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002650:	9305      	str	r3, [sp, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8002652:	2105      	movs	r1, #5
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8002658:	a802      	add	r0, sp, #8
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800265a:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800265c:	9306      	str	r3, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800265e:	f7ff f8d7 	bl	8001810 <HAL_RCC_ClockConfig>
 8002662:	4604      	mov	r4, r0
 8002664:	b100      	cbz	r0, 8002668 <SystemClock_Config+0x88>
 8002666:	e7fe      	b.n	8002666 <SystemClock_Config+0x86>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8002668:	f7ff f96c 	bl	8001944 <HAL_RCC_GetHCLKFreq>
 800266c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002670:	fbb0 f0f3 	udiv	r0, r0, r3
 8002674:	f7fe ff88 	bl	8001588 <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002678:	2004      	movs	r0, #4
 800267a:	f7fe ff9b 	bl	80015b4 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800267e:	4622      	mov	r2, r4
 8002680:	4621      	mov	r1, r4
 8002682:	f04f 30ff 	mov.w	r0, #4294967295
 8002686:	f7fe ff3f 	bl	8001508 <HAL_NVIC_SetPriority>
}
 800268a:	b014      	add	sp, #80	; 0x50
 800268c:	bd10      	pop	{r4, pc}
 800268e:	bf00      	nop
 8002690:	40023800 	.word	0x40023800
 8002694:	40007000 	.word	0x40007000

08002698 <ax12_SetRegister>:
}

/* USER CODE BEGIN 4 */

void ax12_SetRegister(uint8_t id, uint8_t regstart, uint16_t data) {
	sendData[0] = 0xFF;
 8002698:	4b0a      	ldr	r3, [pc, #40]	; (80026c4 <ax12_SetRegister+0x2c>)
void ax12_SetRegister(uint8_t id, uint8_t regstart, uint16_t data) {
 800269a:	b510      	push	{r4, lr}
	sendData[0] = 0xFF;
 800269c:	24ff      	movs	r4, #255	; 0xff
 800269e:	701c      	strb	r4, [r3, #0]
	sendData[1] = 0xFF;
 80026a0:	705c      	strb	r4, [r3, #1]
	sendData[2] = id;
 80026a2:	7098      	strb	r0, [r3, #2]
	sendData[3] = 5;
 80026a4:	2405      	movs	r4, #5
	sendData[4] = AX_WRITE_DATA;
	sendData[5] = regstart;
	sendData[6] = (data & 0xFF);
	sendData[7] = (data & 0xFF00) >> 8;
	sendData[8] = (0xFF
			- ((id + 5 + AX_WRITE_DATA + regstart + (data & 0xFF)
 80026a6:	3008      	adds	r0, #8
	sendData[3] = 5;
 80026a8:	70dc      	strb	r4, [r3, #3]
	sendData[5] = regstart;
 80026aa:	7159      	strb	r1, [r3, #5]
	sendData[4] = AX_WRITE_DATA;
 80026ac:	2403      	movs	r4, #3
			- ((id + 5 + AX_WRITE_DATA + regstart + (data & 0xFF)
 80026ae:	4401      	add	r1, r0
	sendData[4] = AX_WRITE_DATA;
 80026b0:	711c      	strb	r4, [r3, #4]
	sendData[6] = (data & 0xFF);
 80026b2:	719a      	strb	r2, [r3, #6]
	sendData[7] = (data & 0xFF00) >> 8;
 80026b4:	0a14      	lsrs	r4, r2, #8
			- ((id + 5 + AX_WRITE_DATA + regstart + (data & 0xFF)
 80026b6:	fa51 f282 	uxtab	r2, r1, r2
					+ ((data & 0xFF00) >> 8)) % 256));
 80026ba:	4422      	add	r2, r4
			- ((id + 5 + AX_WRITE_DATA + regstart + (data & 0xFF)
 80026bc:	43d2      	mvns	r2, r2
	sendData[7] = (data & 0xFF00) >> 8;
 80026be:	71dc      	strb	r4, [r3, #7]
	sendData[8] = (0xFF
 80026c0:	721a      	strb	r2, [r3, #8]
 80026c2:	bd10      	pop	{r4, pc}
 80026c4:	20000084 	.word	0x20000084

080026c8 <HAL_CAN_RxCpltCallback>:

void ax12_set_data(AX12 *data) {

}

void HAL_CAN_RxCpltCallback(CAN_HandleTypeDef* hcan) {
 80026c8:	b538      	push	{r3, r4, r5, lr}
 80026ca:	4604      	mov	r4, r0
	for (int i = 0; i < 8; i++) {
		ahrs_obj.can_read_data[i] = CanrxMessage.Data[i];
 80026cc:	4d0a      	ldr	r5, [pc, #40]	; (80026f8 <HAL_CAN_RxCpltCallback+0x30>)
 80026ce:	480b      	ldr	r0, [pc, #44]	; (80026fc <HAL_CAN_RxCpltCallback+0x34>)
	for (int i = 0; i < 8; i++) {
 80026d0:	2300      	movs	r3, #0
		ahrs_obj.can_read_data[i] = CanrxMessage.Data[i];
 80026d2:	1819      	adds	r1, r3, r0
 80026d4:	18ea      	adds	r2, r5, r3
	for (int i = 0; i < 8; i++) {
 80026d6:	3301      	adds	r3, #1
		ahrs_obj.can_read_data[i] = CanrxMessage.Data[i];
 80026d8:	7d09      	ldrb	r1, [r1, #20]
 80026da:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50
	for (int i = 0; i < 8; i++) {
 80026de:	2b08      	cmp	r3, #8
 80026e0:	d1f7      	bne.n	80026d2 <HAL_CAN_RxCpltCallback+0xa>
	}

	mw_ahrs_input_data(&ahrs_obj);
 80026e2:	4805      	ldr	r0, [pc, #20]	; (80026f8 <HAL_CAN_RxCpltCallback+0x30>)
 80026e4:	f7ff fe42 	bl	800236c <mw_ahrs_input_data>

	if (HAL_CAN_Receive_IT(hcan, CAN_FIFO0) != HAL_OK) {
 80026e8:	2100      	movs	r1, #0
 80026ea:	4620      	mov	r0, r4
 80026ec:	f7fe fd30 	bl	8001150 <HAL_CAN_Receive_IT>
 80026f0:	b100      	cbz	r0, 80026f4 <HAL_CAN_RxCpltCallback+0x2c>
 80026f2:	e7fe      	b.n	80026f2 <HAL_CAN_RxCpltCallback+0x2a>
 80026f4:	bd38      	pop	{r3, r4, r5, pc}
 80026f6:	bf00      	nop
 80026f8:	20000028 	.word	0x20000028
 80026fc:	200001e8 	.word	0x200001e8

08002700 <mw_ahrsv1_trans>:
		Error_Handler();
	}

}
void mw_ahrsv1_trans(void) {
 8002700:	b513      	push	{r0, r1, r4, lr}
	int i = 0;
	mw_ahrs_set_period(&ahrs_obj, 1);
 8002702:	2101      	movs	r1, #1
 8002704:	4815      	ldr	r0, [pc, #84]	; (800275c <mw_ahrsv1_trans+0x5c>)
	HAL_CAN_Transmit(&hcan1, 10);
	mw_ahrs_set_data_type(&ahrs_obj, 0, 0, 1, 1);
	HAL_CAN_Transmit(&hcan1, 10);

	for (i = 0; i < 8; i++) {
		CantxMessage.Data[i] = ahrs_obj.can_write_data[i];
 8002706:	4c16      	ldr	r4, [pc, #88]	; (8002760 <mw_ahrsv1_trans+0x60>)
	mw_ahrs_set_period(&ahrs_obj, 1);
 8002708:	f7ff ff53 	bl	80025b2 <mw_ahrs_set_period>
	HAL_CAN_Transmit(&hcan1, 10);
 800270c:	210a      	movs	r1, #10
 800270e:	4815      	ldr	r0, [pc, #84]	; (8002764 <mw_ahrsv1_trans+0x64>)
 8002710:	f7fe fc4e 	bl	8000fb0 <HAL_CAN_Transmit>
	mw_ahrs_set_data_type(&ahrs_obj, 0, 0, 1, 1);
 8002714:	2301      	movs	r3, #1
 8002716:	2200      	movs	r2, #0
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	4611      	mov	r1, r2
 800271c:	480f      	ldr	r0, [pc, #60]	; (800275c <mw_ahrsv1_trans+0x5c>)
 800271e:	f7ff ff2b 	bl	8002578 <mw_ahrs_set_data_type>
	HAL_CAN_Transmit(&hcan1, 10);
 8002722:	210a      	movs	r1, #10
 8002724:	480f      	ldr	r0, [pc, #60]	; (8002764 <mw_ahrsv1_trans+0x64>)
 8002726:	f7fe fc43 	bl	8000fb0 <HAL_CAN_Transmit>
		CantxMessage.Data[i] = ahrs_obj.can_write_data[i];
 800272a:	480c      	ldr	r0, [pc, #48]	; (800275c <mw_ahrsv1_trans+0x5c>)
	for (i = 0; i < 8; i++) {
 800272c:	2300      	movs	r3, #0
		CantxMessage.Data[i] = ahrs_obj.can_write_data[i];
 800272e:	18c1      	adds	r1, r0, r3
 8002730:	191a      	adds	r2, r3, r4
	for (i = 0; i < 8; i++) {
 8002732:	3301      	adds	r3, #1
		CantxMessage.Data[i] = ahrs_obj.can_write_data[i];
 8002734:	f891 1048 	ldrb.w	r1, [r1, #72]	; 0x48
 8002738:	7511      	strb	r1, [r2, #20]
	for (i = 0; i < 8; i++) {
 800273a:	2b08      	cmp	r3, #8
 800273c:	d1f7      	bne.n	800272e <mw_ahrsv1_trans+0x2e>
	}

	if (HAL_CAN_Transmit(&hcan1, 10) != HAL_OK) {
 800273e:	210a      	movs	r1, #10
 8002740:	4808      	ldr	r0, [pc, #32]	; (8002764 <mw_ahrsv1_trans+0x64>)
 8002742:	f7fe fc35 	bl	8000fb0 <HAL_CAN_Transmit>
 8002746:	b100      	cbz	r0, 800274a <mw_ahrsv1_trans+0x4a>
 8002748:	e7fe      	b.n	8002748 <mw_ahrsv1_trans+0x48>
		Error_Handler();
	}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800274a:	4807      	ldr	r0, [pc, #28]	; (8002768 <mw_ahrsv1_trans+0x68>)
 800274c:	2201      	movs	r2, #1
 800274e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
}
 8002752:	b002      	add	sp, #8
 8002754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002758:	f7ff b818 	b.w	800178c <HAL_GPIO_WritePin>
 800275c:	20000028 	.word	0x20000028
 8002760:	200000fc 	.word	0x200000fc
 8002764:	200001a0 	.word	0x200001a0
 8002768:	40020000 	.word	0x40020000

0800276c <can_init_user>:
void can_init_user(void) {
 800276c:	b530      	push	{r4, r5, lr}
	CAN_FilterConfTypeDef canFilter;

	hcan1.pTxMsg = &CantxMessage;
 800276e:	480f      	ldr	r0, [pc, #60]	; (80027ac <can_init_user+0x40>)
	hcan1.pRxMsg = &CanrxMessage;
 8002770:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <can_init_user+0x44>)
	hcan1.pTxMsg = &CantxMessage;
 8002772:	4c10      	ldr	r4, [pc, #64]	; (80027b4 <can_init_user+0x48>)
	hcan1.pRxMsg = &CanrxMessage;
 8002774:	6343      	str	r3, [r0, #52]	; 0x34
void can_init_user(void) {
 8002776:	b08b      	sub	sp, #44	; 0x2c

	canFilter.FilterNumber = 0;
 8002778:	2300      	movs	r3, #0
	canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
	canFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 800277a:	2501      	movs	r5, #1
	canFilter.FilterMaskIdLow = 0x0000;
	canFilter.FilterFIFOAssignment = 0;
	canFilter.FilterActivation = ENABLE;
	canFilter.BankNumber = 0;

	if (HAL_CAN_ConfigFilter(&hcan1, &canFilter) != HAL_OK) {
 800277c:	4669      	mov	r1, sp
	hcan1.pTxMsg = &CantxMessage;
 800277e:	6304      	str	r4, [r0, #48]	; 0x30
	canFilter.FilterNumber = 0;
 8002780:	9305      	str	r3, [sp, #20]
	canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8002782:	9306      	str	r3, [sp, #24]
	canFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8002784:	9507      	str	r5, [sp, #28]
	canFilter.FilterIdHigh = 0x0000 << 5;
 8002786:	9300      	str	r3, [sp, #0]
	canFilter.FilterIdLow = 0x0000;
 8002788:	9301      	str	r3, [sp, #4]
	canFilter.FilterMaskIdHigh = 0x0000 << 5;
 800278a:	9302      	str	r3, [sp, #8]
	canFilter.FilterMaskIdLow = 0x0000;
 800278c:	9303      	str	r3, [sp, #12]
	canFilter.FilterFIFOAssignment = 0;
 800278e:	9304      	str	r3, [sp, #16]
	canFilter.FilterActivation = ENABLE;
 8002790:	9508      	str	r5, [sp, #32]
	canFilter.BankNumber = 0;
 8002792:	9309      	str	r3, [sp, #36]	; 0x24
	if (HAL_CAN_ConfigFilter(&hcan1, &canFilter) != HAL_OK) {
 8002794:	f7fe faf6 	bl	8000d84 <HAL_CAN_ConfigFilter>
 8002798:	b100      	cbz	r0, 800279c <can_init_user+0x30>
 800279a:	e7fe      	b.n	800279a <can_init_user+0x2e>

	CantxMessage.StdId = 0x01;
	CantxMessage.ExtId = 0x01;
	CantxMessage.RTR = CAN_RTR_DATA;
	CantxMessage.IDE = CAN_ID_STD;
	CantxMessage.DLC = 8;
 800279c:	2308      	movs	r3, #8
	CantxMessage.StdId = 0x01;
 800279e:	6025      	str	r5, [r4, #0]
	CantxMessage.ExtId = 0x01;
 80027a0:	6065      	str	r5, [r4, #4]
	CantxMessage.RTR = CAN_RTR_DATA;
 80027a2:	60e0      	str	r0, [r4, #12]
	CantxMessage.IDE = CAN_ID_STD;
 80027a4:	60a0      	str	r0, [r4, #8]
	CantxMessage.DLC = 8;
 80027a6:	6123      	str	r3, [r4, #16]
}
 80027a8:	b00b      	add	sp, #44	; 0x2c
 80027aa:	bd30      	pop	{r4, r5, pc}
 80027ac:	200001a0 	.word	0x200001a0
 80027b0:	200001e8 	.word	0x200001e8
 80027b4:	200000fc 	.word	0x200000fc

080027b8 <main>:
int main(void) {
 80027b8:	e92d 48ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, fp, lr}
	HAL_Init();
 80027bc:	f7fe faaa 	bl	8000d14 <HAL_Init>
	SystemClock_Config();
 80027c0:	f7ff ff0e 	bl	80025e0 <SystemClock_Config>
	__HAL_RCC_GPIOH_CLK_ENABLE()
 80027c4:	2300      	movs	r3, #0
 80027c6:	4aa6      	ldr	r2, [pc, #664]	; (8002a60 <main+0x2a8>)
 80027c8:	9301      	str	r3, [sp, #4]
 80027ca:	6b11      	ldr	r1, [r2, #48]	; 0x30
	hcan1.Instance = CAN1;
 80027cc:	4ca5      	ldr	r4, [pc, #660]	; (8002a64 <main+0x2ac>)
	__HAL_RCC_GPIOH_CLK_ENABLE()
 80027ce:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80027d2:	6311      	str	r1, [r2, #48]	; 0x30
 80027d4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80027d6:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80027da:	9101      	str	r1, [sp, #4]
 80027dc:	9901      	ldr	r1, [sp, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE()
 80027de:	9302      	str	r3, [sp, #8]
 80027e0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80027e2:	f041 0101 	orr.w	r1, r1, #1
 80027e6:	6311      	str	r1, [r2, #48]	; 0x30
 80027e8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80027ea:	f001 0101 	and.w	r1, r1, #1
 80027ee:	9102      	str	r1, [sp, #8]
 80027f0:	9902      	ldr	r1, [sp, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 80027f2:	9303      	str	r3, [sp, #12]
 80027f4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80027f6:	f041 0102 	orr.w	r1, r1, #2
 80027fa:	6311      	str	r1, [r2, #48]	; 0x30
 80027fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 80027fe:	60a3      	str	r3, [r4, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8002800:	f002 0202 	and.w	r2, r2, #2
 8002804:	9203      	str	r2, [sp, #12]
 8002806:	9a03      	ldr	r2, [sp, #12]
	hcan1.Init.Prescaler = 9;
 8002808:	4a97      	ldr	r2, [pc, #604]	; (8002a68 <main+0x2b0>)
	hcan1.Init.SJW = CAN_SJW_1TQ;
 800280a:	60e3      	str	r3, [r4, #12]
	hcan1.Init.Prescaler = 9;
 800280c:	2609      	movs	r6, #9
 800280e:	e884 0044 	stmia.w	r4, {r2, r6}
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8002812:	4620      	mov	r0, r4
	hcan1.Init.BS1 = CAN_BS1_3TQ;
 8002814:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002818:	6122      	str	r2, [r4, #16]
	hcan1.Init.BS2 = CAN_BS2_1TQ;
 800281a:	6163      	str	r3, [r4, #20]
	hcan1.Init.TTCM = DISABLE;
 800281c:	61a3      	str	r3, [r4, #24]
	hcan1.Init.ABOM = DISABLE;
 800281e:	61e3      	str	r3, [r4, #28]
	hcan1.Init.AWUM = DISABLE;
 8002820:	6223      	str	r3, [r4, #32]
	hcan1.Init.NART = DISABLE;
 8002822:	6263      	str	r3, [r4, #36]	; 0x24
	hcan1.Init.RFLM = DISABLE;
 8002824:	62a3      	str	r3, [r4, #40]	; 0x28
	hcan1.Init.TXFP = DISABLE;
 8002826:	62e3      	str	r3, [r4, #44]	; 0x2c
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8002828:	f7fe fb2c 	bl	8000e84 <HAL_CAN_Init>
 800282c:	b100      	cbz	r0, 8002830 <main+0x78>
 800282e:	e7fe      	b.n	800282e <main+0x76>
	htim6.Instance = TIM6;
 8002830:	4f8e      	ldr	r7, [pc, #568]	; (8002a6c <main+0x2b4>)
	htim6.Init.Prescaler = 89;
 8002832:	4b8f      	ldr	r3, [pc, #572]	; (8002a70 <main+0x2b8>)
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002834:	60b8      	str	r0, [r7, #8]
	htim6.Init.Prescaler = 89;
 8002836:	2559      	movs	r5, #89	; 0x59
 8002838:	e887 0028 	stmia.w	r7, {r3, r5}
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 800283c:	4638      	mov	r0, r7
	htim6.Init.Period = 999;
 800283e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002842:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8002844:	f7ff fb86 	bl	8001f54 <HAL_TIM_Base_Init>
 8002848:	b100      	cbz	r0, 800284c <main+0x94>
 800284a:	e7fe      	b.n	800284a <main+0x92>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800284c:	9004      	str	r0, [sp, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800284e:	9005      	str	r0, [sp, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 8002850:	a904      	add	r1, sp, #16
 8002852:	4638      	mov	r0, r7
 8002854:	f7ff fb98 	bl	8001f88 <HAL_TIMEx_MasterConfigSynchronization>
 8002858:	b100      	cbz	r0, 800285c <main+0xa4>
 800285a:	e7fe      	b.n	800285a <main+0xa2>
	htim7.Instance = TIM7;
 800285c:	4e85      	ldr	r6, [pc, #532]	; (8002a74 <main+0x2bc>)
	htim7.Init.Prescaler = 900;
 800285e:	4986      	ldr	r1, [pc, #536]	; (8002a78 <main+0x2c0>)
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002860:	60b0      	str	r0, [r6, #8]
	htim7.Init.Prescaler = 900;
 8002862:	f44f 7361 	mov.w	r3, #900	; 0x384
 8002866:	e886 000a 	stmia.w	r6, {r1, r3}
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 800286a:	4630      	mov	r0, r6
	htim7.Init.Period = 4000;
 800286c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002870:	60f3      	str	r3, [r6, #12]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8002872:	f7ff fb6f 	bl	8001f54 <HAL_TIM_Base_Init>
 8002876:	b100      	cbz	r0, 800287a <main+0xc2>
 8002878:	e7fe      	b.n	8002878 <main+0xc0>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800287a:	9004      	str	r0, [sp, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800287c:	9005      	str	r0, [sp, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 800287e:	a904      	add	r1, sp, #16
 8002880:	4630      	mov	r0, r6
 8002882:	f7ff fb81 	bl	8001f88 <HAL_TIMEx_MasterConfigSynchronization>
 8002886:	b100      	cbz	r0, 800288a <main+0xd2>
 8002888:	e7fe      	b.n	8002888 <main+0xd0>
	huart1.Instance = USART1;
 800288a:	4d7c      	ldr	r5, [pc, #496]	; (8002a7c <main+0x2c4>)
	huart1.Init.BaudRate = 1000000;
 800288c:	4a7c      	ldr	r2, [pc, #496]	; (8002a80 <main+0x2c8>)
 800288e:	4b7d      	ldr	r3, [pc, #500]	; (8002a84 <main+0x2cc>)
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002890:	60a8      	str	r0, [r5, #8]
	huart1.Init.BaudRate = 1000000;
 8002892:	e885 000c 	stmia.w	r5, {r2, r3}
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002896:	60e8      	str	r0, [r5, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002898:	6128      	str	r0, [r5, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800289a:	230c      	movs	r3, #12
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800289c:	61a8      	str	r0, [r5, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800289e:	61e8      	str	r0, [r5, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80028a0:	4628      	mov	r0, r5
	huart1.Init.Mode = UART_MODE_TX_RX;
 80028a2:	616b      	str	r3, [r5, #20]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80028a4:	f7ff fcd6 	bl	8002254 <HAL_UART_Init>
 80028a8:	4680      	mov	r8, r0
 80028aa:	b100      	cbz	r0, 80028ae <main+0xf6>
 80028ac:	e7fe      	b.n	80028ac <main+0xf4>
	can_init_user();
 80028ae:	f7ff ff5d 	bl	800276c <can_init_user>
	mw_ahrsv1_trans();
 80028b2:	f7ff ff25 	bl	8002700 <mw_ahrsv1_trans>
	HAL_TIM_Base_Start_IT(&htim6);
 80028b6:	4638      	mov	r0, r7
 80028b8:	f7ff fa36 	bl	8001d28 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 80028bc:	4630      	mov	r0, r6
 80028be:	f7ff fa33 	bl	8001d28 <HAL_TIM_Base_Start_IT>
	HAL_CAN_Receive_IT(&hcan1, CAN_FIFO0);
 80028c2:	4641      	mov	r1, r8
 80028c4:	4620      	mov	r0, r4
 80028c6:	f7fe fc43 	bl	8001150 <HAL_CAN_Receive_IT>
		ax12_SetRegister(3, 30, 1023-(roll_data*3.4));
 80028ca:	f20f 1984 	addw	r9, pc, #388	; 0x184
 80028ce:	e9d9 8900 	ldrd	r8, r9, [r9]
 80028d2:	a761      	add	r7, pc, #388	; (adr r7, 8002a58 <main+0x2a0>)
 80028d4:	e9d7 6700 	ldrd	r6, r7, [r7]
		HAL_UART_Transmit(&huart1, sendData, 9, 10);
 80028d8:	4c6b      	ldr	r4, [pc, #428]	; (8002a88 <main+0x2d0>)
		mainCounter++;
 80028da:	4a6c      	ldr	r2, [pc, #432]	; (8002a8c <main+0x2d4>)
 80028dc:	6813      	ldr	r3, [r2, #0]
		HAL_Delay(1);
 80028de:	2001      	movs	r0, #1
		mainCounter++;
 80028e0:	3301      	adds	r3, #1
 80028e2:	6013      	str	r3, [r2, #0]
		HAL_Delay(1);
 80028e4:	f7fe fa3e 	bl	8000d64 <HAL_Delay>
		yaw_data = ahrs_obj.e_yaw + 150;
 80028e8:	4a69      	ldr	r2, [pc, #420]	; (8002a90 <main+0x2d8>)
 80028ea:	eddf 7a6a 	vldr	s15, [pc, #424]	; 8002a94 <main+0x2dc>
 80028ee:	edd2 6a06 	vldr	s13, [r2, #24]
 80028f2:	4969      	ldr	r1, [pc, #420]	; (8002a98 <main+0x2e0>)
 80028f4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80028f8:	eeb0 7a67 	vmov.f32	s14, s15
		if(yaw_data <= 0){
 80028fc:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8002900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	d87e      	bhi.n	8002a08 <main+0x250>
			yaw_data = 0;
 800290a:	600b      	str	r3, [r1, #0]
		roll_data = ahrs_obj.e_roll + 150;
 800290c:	edd2 7a08 	vldr	s15, [r2, #32]
 8002910:	f8df b18c 	ldr.w	fp, [pc, #396]	; 8002aa0 <main+0x2e8>
 8002914:	ee77 7a87 	vadd.f32	s15, s15, s14
		if(roll_data <= 0){
 8002918:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800291c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002920:	d87e      	bhi.n	8002a20 <main+0x268>
			roll_data = 0;
 8002922:	f8cb 3000 	str.w	r3, [fp]
		pitch_data = ahrs_obj.e_pitch + 150;
 8002926:	edd2 7a07 	vldr	s15, [r2, #28]
 800292a:	f8df a178 	ldr.w	sl, [pc, #376]	; 8002aa4 <main+0x2ec>
 800292e:	ee77 7a87 	vadd.f32	s15, s15, s14
		if(pitch_data <= 0){
 8002932:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800293a:	d87d      	bhi.n	8002a38 <main+0x280>
			pitch_data = 0;
 800293c:	f8ca 3000 	str.w	r3, [sl]
		ax12_SetRegister(2, 30, 512);
 8002940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002944:	211e      	movs	r1, #30
 8002946:	2002      	movs	r0, #2
 8002948:	f7ff fea6 	bl	8002698 <ax12_SetRegister>
		HAL_UART_Transmit(&huart1, sendData, 9, 10);
 800294c:	230a      	movs	r3, #10
 800294e:	4621      	mov	r1, r4
 8002950:	2209      	movs	r2, #9
 8002952:	4628      	mov	r0, r5
 8002954:	f7ff fcac 	bl	80022b0 <HAL_UART_Transmit>
		ax12_SetRegister(2, 32, 150);
 8002958:	2296      	movs	r2, #150	; 0x96
 800295a:	2120      	movs	r1, #32
 800295c:	2002      	movs	r0, #2
 800295e:	f7ff fe9b 	bl	8002698 <ax12_SetRegister>
		HAL_UART_Transmit(&huart1, sendData, 9, 10);
 8002962:	230a      	movs	r3, #10
 8002964:	2209      	movs	r2, #9
 8002966:	4621      	mov	r1, r4
 8002968:	4628      	mov	r0, r5
 800296a:	f7ff fca1 	bl	80022b0 <HAL_UART_Transmit>
		ax12_SetRegister(3, 30, 1023-(roll_data*3.4));
 800296e:	f8db 0000 	ldr.w	r0, [fp]
 8002972:	f7fd fdad 	bl	80004d0 <__aeabi_f2d>
 8002976:	4642      	mov	r2, r8
 8002978:	464b      	mov	r3, r9
 800297a:	f7fd fdfd 	bl	8000578 <__aeabi_dmul>
 800297e:	460b      	mov	r3, r1
 8002980:	4602      	mov	r2, r0
 8002982:	4639      	mov	r1, r7
 8002984:	4630      	mov	r0, r6
 8002986:	f7fd fc43 	bl	8000210 <__aeabi_dsub>
 800298a:	f7fe f807 	bl	800099c <__aeabi_d2uiz>
 800298e:	211e      	movs	r1, #30
 8002990:	b282      	uxth	r2, r0
 8002992:	2003      	movs	r0, #3
 8002994:	f7ff fe80 	bl	8002698 <ax12_SetRegister>
		HAL_UART_Transmit(&huart1, sendData, 9, 10);
 8002998:	230a      	movs	r3, #10
 800299a:	4621      	mov	r1, r4
 800299c:	2209      	movs	r2, #9
 800299e:	4628      	mov	r0, r5
 80029a0:	f7ff fc86 	bl	80022b0 <HAL_UART_Transmit>
		ax12_SetRegister(3, 32, 150);
 80029a4:	2296      	movs	r2, #150	; 0x96
 80029a6:	2120      	movs	r1, #32
 80029a8:	2003      	movs	r0, #3
 80029aa:	f7ff fe75 	bl	8002698 <ax12_SetRegister>
		HAL_UART_Transmit(&huart1, sendData, 9, 10);
 80029ae:	230a      	movs	r3, #10
 80029b0:	2209      	movs	r2, #9
 80029b2:	4621      	mov	r1, r4
 80029b4:	4628      	mov	r0, r5
 80029b6:	f7ff fc7b 	bl	80022b0 <HAL_UART_Transmit>
		ax12_SetRegister(1, 30, 1023-(pitch_data*3.4));
 80029ba:	f8da 0000 	ldr.w	r0, [sl]
 80029be:	f7fd fd87 	bl	80004d0 <__aeabi_f2d>
 80029c2:	4642      	mov	r2, r8
 80029c4:	464b      	mov	r3, r9
 80029c6:	f7fd fdd7 	bl	8000578 <__aeabi_dmul>
 80029ca:	460b      	mov	r3, r1
 80029cc:	4602      	mov	r2, r0
 80029ce:	4639      	mov	r1, r7
 80029d0:	4630      	mov	r0, r6
 80029d2:	f7fd fc1d 	bl	8000210 <__aeabi_dsub>
 80029d6:	f7fd ffe1 	bl	800099c <__aeabi_d2uiz>
 80029da:	211e      	movs	r1, #30
 80029dc:	b282      	uxth	r2, r0
 80029de:	2001      	movs	r0, #1
 80029e0:	f7ff fe5a 	bl	8002698 <ax12_SetRegister>
		HAL_UART_Transmit(&huart1, sendData, 9, 10);
 80029e4:	230a      	movs	r3, #10
 80029e6:	4621      	mov	r1, r4
 80029e8:	2209      	movs	r2, #9
 80029ea:	4628      	mov	r0, r5
 80029ec:	f7ff fc60 	bl	80022b0 <HAL_UART_Transmit>
		ax12_SetRegister(1, 32, 150);
 80029f0:	2296      	movs	r2, #150	; 0x96
 80029f2:	2120      	movs	r1, #32
 80029f4:	2001      	movs	r0, #1
 80029f6:	f7ff fe4f 	bl	8002698 <ax12_SetRegister>
		HAL_UART_Transmit(&huart1, sendData, 9, 10);
 80029fa:	230a      	movs	r3, #10
 80029fc:	2209      	movs	r2, #9
 80029fe:	4621      	mov	r1, r4
 8002a00:	4628      	mov	r0, r5
 8002a02:	f7ff fc55 	bl	80022b0 <HAL_UART_Transmit>
		mainCounter++;
 8002a06:	e768      	b.n	80028da <main+0x122>
		else if(yaw_data >= 300){
 8002a08:	eddf 7a24 	vldr	s15, [pc, #144]	; 8002a9c <main+0x2e4>
		yaw_data = ahrs_obj.e_yaw + 150;
 8002a0c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a14:	bfa8      	it	ge
 8002a16:	eef0 6a67 	vmovge.f32	s13, s15
 8002a1a:	edc1 6a00 	vstr	s13, [r1]
 8002a1e:	e775      	b.n	800290c <main+0x154>
		else if(roll_data >= 300){
 8002a20:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8002a9c <main+0x2e4>
		roll_data = ahrs_obj.e_roll + 150;
 8002a24:	eef4 7ae6 	vcmpe.f32	s15, s13
 8002a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a2c:	bfa8      	it	ge
 8002a2e:	eef0 7a66 	vmovge.f32	s15, s13
 8002a32:	edcb 7a00 	vstr	s15, [fp]
 8002a36:	e776      	b.n	8002926 <main+0x16e>
		else if(pitch_data >= 300){
 8002a38:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002a9c <main+0x2e4>
		pitch_data = ahrs_obj.e_pitch + 150;
 8002a3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a44:	bfa8      	it	ge
 8002a46:	eef0 7a47 	vmovge.f32	s15, s14
 8002a4a:	edca 7a00 	vstr	s15, [sl]
 8002a4e:	e777      	b.n	8002940 <main+0x188>
 8002a50:	33333333 	.word	0x33333333
 8002a54:	400b3333 	.word	0x400b3333
 8002a58:	00000000 	.word	0x00000000
 8002a5c:	408ff800 	.word	0x408ff800
 8002a60:	40023800 	.word	0x40023800
 8002a64:	200001a0 	.word	0x200001a0
 8002a68:	40006400 	.word	0x40006400
 8002a6c:	20000160 	.word	0x20000160
 8002a70:	40001000 	.word	0x40001000
 8002a74:	2000020c 	.word	0x2000020c
 8002a78:	40001400 	.word	0x40001400
 8002a7c:	20000118 	.word	0x20000118
 8002a80:	40011000 	.word	0x40011000
 8002a84:	000f4240 	.word	0x000f4240
 8002a88:	20000084 	.word	0x20000084
 8002a8c:	20000080 	.word	0x20000080
 8002a90:	20000028 	.word	0x20000028
 8002a94:	43160000 	.word	0x43160000
 8002a98:	20000158 	.word	0x20000158
 8002a9c:	43960000 	.word	0x43960000
 8002aa0:	200000f8 	.word	0x200000f8
 8002aa4:	2000015c 	.word	0x2000015c

08002aa8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	if (htim->Instance == TIM6) {
 8002aa8:	6803      	ldr	r3, [r0, #0]
 8002aaa:	4a06      	ldr	r2, [pc, #24]	; (8002ac4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d104      	bne.n	8002aba <HAL_TIM_PeriodElapsedCallback+0x12>
		tim6Counter++;
 8002ab0:	4a05      	ldr	r2, [pc, #20]	; (8002ac8 <HAL_TIM_PeriodElapsedCallback+0x20>)
		//	ax12_SetRegister( 1, 30, 512);
		//	ax12_SetRegister(1,32, 80);
	} else if (htim->Instance == TIM7) {
		tim7Counter++;
 8002ab2:	6813      	ldr	r3, [r2, #0]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	6013      	str	r3, [r2, #0]
 8002ab8:	4770      	bx	lr
	} else if (htim->Instance == TIM7) {
 8002aba:	4a04      	ldr	r2, [pc, #16]	; (8002acc <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d1fb      	bne.n	8002ab8 <HAL_TIM_PeriodElapsedCallback+0x10>
		tim7Counter++;
 8002ac0:	4a03      	ldr	r2, [pc, #12]	; (8002ad0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002ac2:	e7f6      	b.n	8002ab2 <HAL_TIM_PeriodElapsedCallback+0xa>
 8002ac4:	40001000 	.word	0x40001000
 8002ac8:	200000e8 	.word	0x200000e8
 8002acc:	40001400 	.word	0x40001400
 8002ad0:	200000ec 	.word	0x200000ec

08002ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ad4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ad6:	2003      	movs	r0, #3
 8002ad8:	f7fe fd04 	bl	80014e4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002adc:	2200      	movs	r2, #0
 8002ade:	4611      	mov	r1, r2
 8002ae0:	f06f 000b 	mvn.w	r0, #11
 8002ae4:	f7fe fd10 	bl	8001508 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002ae8:	2200      	movs	r2, #0
 8002aea:	4611      	mov	r1, r2
 8002aec:	f06f 000a 	mvn.w	r0, #10
 8002af0:	f7fe fd0a 	bl	8001508 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002af4:	2200      	movs	r2, #0
 8002af6:	4611      	mov	r1, r2
 8002af8:	f06f 0009 	mvn.w	r0, #9
 8002afc:	f7fe fd04 	bl	8001508 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002b00:	2200      	movs	r2, #0
 8002b02:	4611      	mov	r1, r2
 8002b04:	f06f 0004 	mvn.w	r0, #4
 8002b08:	f7fe fcfe 	bl	8001508 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	4611      	mov	r1, r2
 8002b10:	f06f 0003 	mvn.w	r0, #3
 8002b14:	f7fe fcf8 	bl	8001508 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002b18:	2200      	movs	r2, #0
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	f06f 0001 	mvn.w	r0, #1
 8002b20:	f7fe fcf2 	bl	8001508 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002b24:	2200      	movs	r2, #0
 8002b26:	4611      	mov	r1, r2
 8002b28:	f04f 30ff 	mov.w	r0, #4294967295
 8002b2c:	f7fe fcec 	bl	8001508 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002b30:	2200      	movs	r2, #0
 8002b32:	2005      	movs	r0, #5
 8002b34:	4611      	mov	r1, r2
 8002b36:	f7fe fce7 	bl	8001508 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002b3a:	2005      	movs	r0, #5

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002b40:	f7fe bd16 	b.w	8001570 <HAL_NVIC_EnableIRQ>

08002b44 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002b44:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcan->Instance==CAN1)
 8002b46:	6802      	ldr	r2, [r0, #0]
 8002b48:	4b14      	ldr	r3, [pc, #80]	; (8002b9c <HAL_CAN_MspInit+0x58>)
 8002b4a:	429a      	cmp	r2, r3
{
 8002b4c:	b086      	sub	sp, #24
  if(hcan->Instance==CAN1)
 8002b4e:	d122      	bne.n	8002b96 <HAL_CAN_MspInit+0x52>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002b50:	2400      	movs	r4, #0
 8002b52:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8002b56:	9400      	str	r4, [sp, #0]
 8002b58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b5a:	4811      	ldr	r0, [pc, #68]	; (8002ba0 <HAL_CAN_MspInit+0x5c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002b5c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002b60:	641a      	str	r2, [r3, #64]	; 0x40
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b64:	9403      	str	r4, [sp, #12]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b72:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b74:	2302      	movs	r3, #2
 8002b76:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b7c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002b7e:	2309      	movs	r3, #9
 8002b80:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b82:	f7fe fd29 	bl	80015d8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002b86:	2014      	movs	r0, #20
 8002b88:	4622      	mov	r2, r4
 8002b8a:	4621      	mov	r1, r4
 8002b8c:	f7fe fcbc 	bl	8001508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002b90:	2014      	movs	r0, #20
 8002b92:	f7fe fced 	bl	8001570 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002b96:	b006      	add	sp, #24
 8002b98:	bd10      	pop	{r4, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40006400 	.word	0x40006400
 8002ba0:	40020400 	.word	0x40020400

08002ba4 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ba4:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM6)
 8002ba6:	6803      	ldr	r3, [r0, #0]
 8002ba8:	4a16      	ldr	r2, [pc, #88]	; (8002c04 <HAL_TIM_Base_MspInit+0x60>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d115      	bne.n	8002bda <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002bae:	2200      	movs	r2, #0
 8002bb0:	4b15      	ldr	r3, [pc, #84]	; (8002c08 <HAL_TIM_Base_MspInit+0x64>)
 8002bb2:	9200      	str	r2, [sp, #0]
 8002bb4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002bb6:	f041 0110 	orr.w	r1, r1, #16
 8002bba:	6419      	str	r1, [r3, #64]	; 0x40
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f003 0310 	and.w	r3, r3, #16
 8002bc2:	9300      	str	r3, [sp, #0]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002bc4:	2036      	movs	r0, #54	; 0x36
 8002bc6:	4611      	mov	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002bc8:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002bca:	f7fe fc9d 	bl	8001508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002bce:	2036      	movs	r0, #54	; 0x36
  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002bd0:	f7fe fcce 	bl	8001570 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002bd4:	b003      	add	sp, #12
 8002bd6:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM7)
 8002bda:	4a0c      	ldr	r2, [pc, #48]	; (8002c0c <HAL_TIM_Base_MspInit+0x68>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d1f9      	bne.n	8002bd4 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002be0:	2200      	movs	r2, #0
 8002be2:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <HAL_TIM_Base_MspInit+0x64>)
 8002be4:	9201      	str	r2, [sp, #4]
 8002be6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002be8:	f041 0120 	orr.w	r1, r1, #32
 8002bec:	6419      	str	r1, [r3, #64]	; 0x40
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	f003 0320 	and.w	r3, r3, #32
 8002bf4:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002bf6:	2037      	movs	r0, #55	; 0x37
 8002bf8:	4611      	mov	r1, r2
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002bfa:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002bfc:	f7fe fc84 	bl	8001508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002c00:	2037      	movs	r0, #55	; 0x37
 8002c02:	e7e5      	b.n	8002bd0 <HAL_TIM_Base_MspInit+0x2c>
 8002c04:	40001000 	.word	0x40001000
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	40001400 	.word	0x40001400

08002c10 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c10:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8002c12:	6802      	ldr	r2, [r0, #0]
 8002c14:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <HAL_UART_MspInit+0x48>)
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d11a      	bne.n	8002c50 <HAL_UART_MspInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	4b0f      	ldr	r3, [pc, #60]	; (8002c5c <HAL_UART_MspInit+0x4c>)
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c20:	480f      	ldr	r0, [pc, #60]	; (8002c60 <HAL_UART_MspInit+0x50>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c24:	f042 0210 	orr.w	r2, r2, #16
 8002c28:	645a      	str	r2, [r3, #68]	; 0x44
 8002c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2c:	f003 0310 	and.w	r3, r3, #16
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c34:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c38:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c42:	2303      	movs	r3, #3
 8002c44:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c46:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c48:	2307      	movs	r3, #7
 8002c4a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c4c:	f7fe fcc4 	bl	80015d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002c50:	b007      	add	sp, #28
 8002c52:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c56:	bf00      	nop
 8002c58:	40011000 	.word	0x40011000
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	40020000 	.word	0x40020000

08002c64 <NMI_Handler>:
 8002c64:	4770      	bx	lr

08002c66 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002c66:	e7fe      	b.n	8002c66 <HardFault_Handler>

08002c68 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002c68:	e7fe      	b.n	8002c68 <MemManage_Handler>

08002c6a <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002c6a:	e7fe      	b.n	8002c6a <BusFault_Handler>

08002c6c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002c6c:	e7fe      	b.n	8002c6c <UsageFault_Handler>

08002c6e <SVC_Handler>:
 8002c6e:	4770      	bx	lr

08002c70 <DebugMon_Handler>:
 8002c70:	4770      	bx	lr

08002c72 <PendSV_Handler>:
 8002c72:	4770      	bx	lr

08002c74 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002c74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c76:	f7fe f867 	bl	8000d48 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8002c7e:	f7fe bca6 	b.w	80015ce <HAL_SYSTICK_IRQHandler>

08002c82 <RCC_IRQHandler>:

/**
* @brief This function handles RCC global interrupt.
*/
void RCC_IRQHandler(void)
{
 8002c82:	4770      	bx	lr

08002c84 <CAN1_RX0_IRQHandler>:
void CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002c84:	4801      	ldr	r0, [pc, #4]	; (8002c8c <CAN1_RX0_IRQHandler+0x8>)
 8002c86:	f7fe bb41 	b.w	800130c <HAL_CAN_IRQHandler>
 8002c8a:	bf00      	nop
 8002c8c:	200001a0 	.word	0x200001a0

08002c90 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c90:	4801      	ldr	r0, [pc, #4]	; (8002c98 <TIM6_DAC_IRQHandler+0x8>)
 8002c92:	f7ff b858 	b.w	8001d46 <HAL_TIM_IRQHandler>
 8002c96:	bf00      	nop
 8002c98:	20000160 	.word	0x20000160

08002c9c <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002c9c:	4801      	ldr	r0, [pc, #4]	; (8002ca4 <TIM7_IRQHandler+0x8>)
 8002c9e:	f7ff b852 	b.w	8001d46 <HAL_TIM_IRQHandler>
 8002ca2:	bf00      	nop
 8002ca4:	2000020c 	.word	0x2000020c

08002ca8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ca8:	490f      	ldr	r1, [pc, #60]	; (8002ce8 <SystemInit+0x40>)
 8002caa:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002cae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002cb6:	4b0d      	ldr	r3, [pc, #52]	; (8002cec <SystemInit+0x44>)
 8002cb8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002cba:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002cbc:	f042 0201 	orr.w	r2, r2, #1
 8002cc0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002cc2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002cca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002cce:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002cd0:	4a07      	ldr	r2, [pc, #28]	; (8002cf0 <SystemInit+0x48>)
 8002cd2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cda:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002cdc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002cde:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002ce2:	608b      	str	r3, [r1, #8]
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	e000ed00 	.word	0xe000ed00
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	24003010 	.word	0x24003010

08002cf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002cf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d2c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002cf8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002cfa:	e003      	b.n	8002d04 <LoopCopyDataInit>

08002cfc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002cfc:	4b0c      	ldr	r3, [pc, #48]	; (8002d30 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002cfe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002d00:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002d02:	3104      	adds	r1, #4

08002d04 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002d04:	480b      	ldr	r0, [pc, #44]	; (8002d34 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002d06:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002d08:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002d0a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002d0c:	d3f6      	bcc.n	8002cfc <CopyDataInit>
  ldr  r2, =_sbss
 8002d0e:	4a0b      	ldr	r2, [pc, #44]	; (8002d3c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002d10:	e002      	b.n	8002d18 <LoopFillZerobss>

08002d12 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002d12:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002d14:	f842 3b04 	str.w	r3, [r2], #4

08002d18 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002d18:	4b09      	ldr	r3, [pc, #36]	; (8002d40 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002d1a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002d1c:	d3f9      	bcc.n	8002d12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d1e:	f7ff ffc3 	bl	8002ca8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d22:	f000 f811 	bl	8002d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d26:	f7ff fd47 	bl	80027b8 <main>
  bx  lr    
 8002d2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d2c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002d30:	08002fa4 	.word	0x08002fa4
  ldr  r0, =_sdata
 8002d34:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002d38:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8002d3c:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8002d40:	20000248 	.word	0x20000248

08002d44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d44:	e7fe      	b.n	8002d44 <ADC_IRQHandler>
	...

08002d48 <__libc_init_array>:
 8002d48:	b570      	push	{r4, r5, r6, lr}
 8002d4a:	4e0d      	ldr	r6, [pc, #52]	; (8002d80 <__libc_init_array+0x38>)
 8002d4c:	4c0d      	ldr	r4, [pc, #52]	; (8002d84 <__libc_init_array+0x3c>)
 8002d4e:	1ba4      	subs	r4, r4, r6
 8002d50:	10a4      	asrs	r4, r4, #2
 8002d52:	2500      	movs	r5, #0
 8002d54:	42a5      	cmp	r5, r4
 8002d56:	d109      	bne.n	8002d6c <__libc_init_array+0x24>
 8002d58:	4e0b      	ldr	r6, [pc, #44]	; (8002d88 <__libc_init_array+0x40>)
 8002d5a:	4c0c      	ldr	r4, [pc, #48]	; (8002d8c <__libc_init_array+0x44>)
 8002d5c:	f000 f8f2 	bl	8002f44 <_init>
 8002d60:	1ba4      	subs	r4, r4, r6
 8002d62:	10a4      	asrs	r4, r4, #2
 8002d64:	2500      	movs	r5, #0
 8002d66:	42a5      	cmp	r5, r4
 8002d68:	d105      	bne.n	8002d76 <__libc_init_array+0x2e>
 8002d6a:	bd70      	pop	{r4, r5, r6, pc}
 8002d6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d70:	4798      	blx	r3
 8002d72:	3501      	adds	r5, #1
 8002d74:	e7ee      	b.n	8002d54 <__libc_init_array+0xc>
 8002d76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d7a:	4798      	blx	r3
 8002d7c:	3501      	adds	r5, #1
 8002d7e:	e7f2      	b.n	8002d66 <__libc_init_array+0x1e>
 8002d80:	08002f9c 	.word	0x08002f9c
 8002d84:	08002f9c 	.word	0x08002f9c
 8002d88:	08002f9c 	.word	0x08002f9c
 8002d8c:	08002fa0 	.word	0x08002fa0

08002d90 <atanf>:
 8002d90:	b538      	push	{r3, r4, r5, lr}
 8002d92:	ee10 5a10 	vmov	r5, s0
 8002d96:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8002d9a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8002d9e:	eef0 7a40 	vmov.f32	s15, s0
 8002da2:	db10      	blt.n	8002dc6 <atanf+0x36>
 8002da4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8002da8:	dd04      	ble.n	8002db4 <atanf+0x24>
 8002daa:	ee70 7a00 	vadd.f32	s15, s0, s0
 8002dae:	eeb0 0a67 	vmov.f32	s0, s15
 8002db2:	bd38      	pop	{r3, r4, r5, pc}
 8002db4:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8002ee8 <atanf+0x158>
 8002db8:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8002eec <atanf+0x15c>
 8002dbc:	2d00      	cmp	r5, #0
 8002dbe:	bfc8      	it	gt
 8002dc0:	eef0 7a47 	vmovgt.f32	s15, s14
 8002dc4:	e7f3      	b.n	8002dae <atanf+0x1e>
 8002dc6:	4b4a      	ldr	r3, [pc, #296]	; (8002ef0 <atanf+0x160>)
 8002dc8:	429c      	cmp	r4, r3
 8002dca:	dc10      	bgt.n	8002dee <atanf+0x5e>
 8002dcc:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8002dd0:	da0a      	bge.n	8002de8 <atanf+0x58>
 8002dd2:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002ef4 <atanf+0x164>
 8002dd6:	ee30 7a07 	vadd.f32	s14, s0, s14
 8002dda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002dde:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8002de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002de6:	dce2      	bgt.n	8002dae <atanf+0x1e>
 8002de8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dec:	e013      	b.n	8002e16 <atanf+0x86>
 8002dee:	f000 f8a1 	bl	8002f34 <fabsf>
 8002df2:	4b41      	ldr	r3, [pc, #260]	; (8002ef8 <atanf+0x168>)
 8002df4:	429c      	cmp	r4, r3
 8002df6:	dc4d      	bgt.n	8002e94 <atanf+0x104>
 8002df8:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8002dfc:	429c      	cmp	r4, r3
 8002dfe:	dc3f      	bgt.n	8002e80 <atanf+0xf0>
 8002e00:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8002e04:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002e08:	eea0 7a27 	vfma.f32	s14, s0, s15
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002e12:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8002e1c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002efc <atanf+0x16c>
 8002e20:	eddf 5a37 	vldr	s11, [pc, #220]	; 8002f00 <atanf+0x170>
 8002e24:	ed9f 5a37 	vldr	s10, [pc, #220]	; 8002f04 <atanf+0x174>
 8002e28:	ee26 7a06 	vmul.f32	s14, s12, s12
 8002e2c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8002e30:	eddf 6a35 	vldr	s13, [pc, #212]	; 8002f08 <atanf+0x178>
 8002e34:	eee7 6a25 	vfma.f32	s13, s14, s11
 8002e38:	eddf 5a34 	vldr	s11, [pc, #208]	; 8002f0c <atanf+0x17c>
 8002e3c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8002e40:	eddf 6a33 	vldr	s13, [pc, #204]	; 8002f10 <atanf+0x180>
 8002e44:	eee7 6a25 	vfma.f32	s13, s14, s11
 8002e48:	eddf 5a32 	vldr	s11, [pc, #200]	; 8002f14 <atanf+0x184>
 8002e4c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8002e50:	eddf 6a31 	vldr	s13, [pc, #196]	; 8002f18 <atanf+0x188>
 8002e54:	eea7 5a26 	vfma.f32	s10, s14, s13
 8002e58:	eddf 6a30 	vldr	s13, [pc, #192]	; 8002f1c <atanf+0x18c>
 8002e5c:	eee7 6a05 	vfma.f32	s13, s14, s10
 8002e60:	ed9f 5a2f 	vldr	s10, [pc, #188]	; 8002f20 <atanf+0x190>
 8002e64:	eea7 5a26 	vfma.f32	s10, s14, s13
 8002e68:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8002f24 <atanf+0x194>
 8002e6c:	eee7 6a05 	vfma.f32	s13, s14, s10
 8002e70:	ee26 7a87 	vmul.f32	s14, s13, s14
 8002e74:	ee05 7a86 	vmla.f32	s14, s11, s12
 8002e78:	d121      	bne.n	8002ebe <atanf+0x12e>
 8002e7a:	eee7 7ac7 	vfms.f32	s15, s15, s14
 8002e7e:	e796      	b.n	8002dae <atanf+0x1e>
 8002e80:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002e84:	ee30 7a67 	vsub.f32	s14, s0, s15
 8002e88:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8002e92:	e7c0      	b.n	8002e16 <atanf+0x86>
 8002e94:	4b24      	ldr	r3, [pc, #144]	; (8002f28 <atanf+0x198>)
 8002e96:	429c      	cmp	r4, r3
 8002e98:	dc0b      	bgt.n	8002eb2 <atanf+0x122>
 8002e9a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8002e9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ea2:	eea0 7a27 	vfma.f32	s14, s0, s15
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	ee70 6a67 	vsub.f32	s13, s0, s15
 8002eac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002eb0:	e7b1      	b.n	8002e16 <atanf+0x86>
 8002eb2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002eb6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e7ab      	b.n	8002e16 <atanf+0x86>
 8002ebe:	4a1b      	ldr	r2, [pc, #108]	; (8002f2c <atanf+0x19c>)
 8002ec0:	491b      	ldr	r1, [pc, #108]	; (8002f30 <atanf+0x1a0>)
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	441a      	add	r2, r3
 8002ec6:	440b      	add	r3, r1
 8002ec8:	edd3 6a00 	vldr	s13, [r3]
 8002ecc:	eed7 6a87 	vfnms.f32	s13, s15, s14
 8002ed0:	2d00      	cmp	r5, #0
 8002ed2:	ed92 7a00 	vldr	s14, [r2]
 8002ed6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002eda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ede:	bfb8      	it	lt
 8002ee0:	eef1 7a67 	vneglt.f32	s15, s15
 8002ee4:	e763      	b.n	8002dae <atanf+0x1e>
 8002ee6:	bf00      	nop
 8002ee8:	bfc90fdb 	.word	0xbfc90fdb
 8002eec:	3fc90fdb 	.word	0x3fc90fdb
 8002ef0:	3edfffff 	.word	0x3edfffff
 8002ef4:	7149f2ca 	.word	0x7149f2ca
 8002ef8:	3f97ffff 	.word	0x3f97ffff
 8002efc:	3c8569d7 	.word	0x3c8569d7
 8002f00:	3d4bda59 	.word	0x3d4bda59
 8002f04:	bd6ef16b 	.word	0xbd6ef16b
 8002f08:	3d886b35 	.word	0x3d886b35
 8002f0c:	3dba2e6e 	.word	0x3dba2e6e
 8002f10:	3e124925 	.word	0x3e124925
 8002f14:	3eaaaaab 	.word	0x3eaaaaab
 8002f18:	bd15a221 	.word	0xbd15a221
 8002f1c:	bd9d8795 	.word	0xbd9d8795
 8002f20:	bde38e38 	.word	0xbde38e38
 8002f24:	be4ccccd 	.word	0xbe4ccccd
 8002f28:	401bffff 	.word	0x401bffff
 8002f2c:	08002f74 	.word	0x08002f74
 8002f30:	08002f84 	.word	0x08002f84

08002f34 <fabsf>:
 8002f34:	ee10 3a10 	vmov	r3, s0
 8002f38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f3c:	ee00 3a10 	vmov	s0, r3
 8002f40:	4770      	bx	lr
	...

08002f44 <_init>:
 8002f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f46:	bf00      	nop
 8002f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f4a:	bc08      	pop	{r3}
 8002f4c:	469e      	mov	lr, r3
 8002f4e:	4770      	bx	lr

08002f50 <_fini>:
 8002f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f52:	bf00      	nop
 8002f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f56:	bc08      	pop	{r3}
 8002f58:	469e      	mov	lr, r3
 8002f5a:	4770      	bx	lr
