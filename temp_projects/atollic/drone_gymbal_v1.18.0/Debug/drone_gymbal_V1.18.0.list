
drone_gymbal_V1.18.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024e8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080026ac  080026ac  000126ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080026e4  080026e4  000126e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080026ec  080026ec  000126ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080026f0  080026f0  000126f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  080026f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001fc  20000004  080026f8  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000200  080026f8  00020200  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   000179b0  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002eb4  00000000  00000000  000379e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000761c  00000000  00000000  0003a898  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000a40  00000000  00000000  00041eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000d40  00000000  00000000  000428f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00006271  00000000  00000000  00043638  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000457e  00000000  00000000  000498a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004de27  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001df4  00000000  00000000  0004dea4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002694 	.word	0x08002694

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08002694 	.word	0x08002694

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b97a 	b.w	8000510 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	468c      	mov	ip, r1
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	9e08      	ldr	r6, [sp, #32]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d151      	bne.n	80002e8 <__udivmoddi4+0xb4>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d96d      	bls.n	8000326 <__udivmoddi4+0xf2>
 800024a:	fab2 fe82 	clz	lr, r2
 800024e:	f1be 0f00 	cmp.w	lr, #0
 8000252:	d00b      	beq.n	800026c <__udivmoddi4+0x38>
 8000254:	f1ce 0c20 	rsb	ip, lr, #32
 8000258:	fa01 f50e 	lsl.w	r5, r1, lr
 800025c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000260:	fa02 f70e 	lsl.w	r7, r2, lr
 8000264:	ea4c 0c05 	orr.w	ip, ip, r5
 8000268:	fa00 f40e 	lsl.w	r4, r0, lr
 800026c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000270:	0c25      	lsrs	r5, r4, #16
 8000272:	fbbc f8fa 	udiv	r8, ip, sl
 8000276:	fa1f f987 	uxth.w	r9, r7
 800027a:	fb0a cc18 	mls	ip, sl, r8, ip
 800027e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000282:	fb08 f309 	mul.w	r3, r8, r9
 8000286:	42ab      	cmp	r3, r5
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x6c>
 800028a:	19ed      	adds	r5, r5, r7
 800028c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000290:	f080 8123 	bcs.w	80004da <__udivmoddi4+0x2a6>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f240 8120 	bls.w	80004da <__udivmoddi4+0x2a6>
 800029a:	f1a8 0802 	sub.w	r8, r8, #2
 800029e:	443d      	add	r5, r7
 80002a0:	1aed      	subs	r5, r5, r3
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b0:	fb00 f909 	mul.w	r9, r0, r9
 80002b4:	45a1      	cmp	r9, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x98>
 80002b8:	19e4      	adds	r4, r4, r7
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 810a 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80002c2:	45a1      	cmp	r9, r4
 80002c4:	f240 8107 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	eba4 0409 	sub.w	r4, r4, r9
 80002d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d4:	2100      	movs	r1, #0
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d061      	beq.n	800039e <__udivmoddi4+0x16a>
 80002da:	fa24 f40e 	lsr.w	r4, r4, lr
 80002de:	2300      	movs	r3, #0
 80002e0:	6034      	str	r4, [r6, #0]
 80002e2:	6073      	str	r3, [r6, #4]
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xc8>
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d054      	beq.n	800039a <__udivmoddi4+0x166>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	f040 808e 	bne.w	8000422 <__udivmoddi4+0x1ee>
 8000306:	42ab      	cmp	r3, r5
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xdc>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2d0>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb65 0503 	sbc.w	r5, r5, r3
 8000316:	2001      	movs	r0, #1
 8000318:	46ac      	mov	ip, r5
 800031a:	2e00      	cmp	r6, #0
 800031c:	d03f      	beq.n	800039e <__udivmoddi4+0x16a>
 800031e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b912      	cbnz	r2, 800032e <__udivmoddi4+0xfa>
 8000328:	2701      	movs	r7, #1
 800032a:	fbb7 f7f2 	udiv	r7, r7, r2
 800032e:	fab7 fe87 	clz	lr, r7
 8000332:	f1be 0f00 	cmp.w	lr, #0
 8000336:	d134      	bne.n	80003a2 <__udivmoddi4+0x16e>
 8000338:	1beb      	subs	r3, r5, r7
 800033a:	0c3a      	lsrs	r2, r7, #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb3 f8f2 	udiv	r8, r3, r2
 8000346:	0c25      	lsrs	r5, r4, #16
 8000348:	fb02 3318 	mls	r3, r2, r8, r3
 800034c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000350:	fb0c f308 	mul.w	r3, ip, r8
 8000354:	42ab      	cmp	r3, r5
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x134>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f108 30ff 	add.w	r0, r8, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x132>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f200 80d1 	bhi.w	8000508 <__udivmoddi4+0x2d4>
 8000366:	4680      	mov	r8, r0
 8000368:	1aed      	subs	r5, r5, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000370:	fb02 5510 	mls	r5, r2, r0, r5
 8000374:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000378:	fb0c fc00 	mul.w	ip, ip, r0
 800037c:	45a4      	cmp	ip, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x15c>
 8000380:	19e4      	adds	r4, r4, r7
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x15a>
 8000388:	45a4      	cmp	ip, r4
 800038a:	f200 80b8 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000398:	e79d      	b.n	80002d6 <__udivmoddi4+0xa2>
 800039a:	4631      	mov	r1, r6
 800039c:	4630      	mov	r0, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	f1ce 0420 	rsb	r4, lr, #32
 80003a6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	fa20 f804 	lsr.w	r8, r0, r4
 80003b2:	0c3a      	lsrs	r2, r7, #16
 80003b4:	fa25 f404 	lsr.w	r4, r5, r4
 80003b8:	ea48 0803 	orr.w	r8, r8, r3
 80003bc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c4:	fb02 4411 	mls	r4, r2, r1, r4
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d0:	fb01 f30c 	mul.w	r3, r1, ip
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1bc>
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e2:	f080 808a 	bcs.w	80004fa <__udivmoddi4+0x2c6>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	f240 8087 	bls.w	80004fa <__udivmoddi4+0x2c6>
 80003ec:	3902      	subs	r1, #2
 80003ee:	443d      	add	r5, r7
 80003f0:	1aeb      	subs	r3, r5, r3
 80003f2:	fa1f f588 	uxth.w	r5, r8
 80003f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fa:	fb02 3310 	mls	r3, r2, r0, r3
 80003fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000402:	fb00 f30c 	mul.w	r3, r0, ip
 8000406:	42ab      	cmp	r3, r5
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1e6>
 800040a:	19ed      	adds	r5, r5, r7
 800040c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000410:	d26f      	bcs.n	80004f2 <__udivmoddi4+0x2be>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d96d      	bls.n	80004f2 <__udivmoddi4+0x2be>
 8000416:	3802      	subs	r0, #2
 8000418:	443d      	add	r5, r7
 800041a:	1aeb      	subs	r3, r5, r3
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	e78f      	b.n	8000342 <__udivmoddi4+0x10e>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	fa22 f807 	lsr.w	r8, r2, r7
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 f401 	lsl.w	r4, r5, r1
 8000430:	ea48 0303 	orr.w	r3, r8, r3
 8000434:	fa20 fe07 	lsr.w	lr, r0, r7
 8000438:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800043c:	40fd      	lsrs	r5, r7
 800043e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000442:	fbb5 f9fc 	udiv	r9, r5, ip
 8000446:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044a:	fb0c 5519 	mls	r5, ip, r9, r5
 800044e:	fa1f f883 	uxth.w	r8, r3
 8000452:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000456:	fb09 f408 	mul.w	r4, r9, r8
 800045a:	42ac      	cmp	r4, r5
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 fa01 	lsl.w	sl, r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x244>
 8000466:	18ed      	adds	r5, r5, r3
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295
 800046c:	d243      	bcs.n	80004f6 <__udivmoddi4+0x2c2>
 800046e:	42ac      	cmp	r4, r5
 8000470:	d941      	bls.n	80004f6 <__udivmoddi4+0x2c2>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	441d      	add	r5, r3
 8000478:	1b2d      	subs	r5, r5, r4
 800047a:	fa1f fe8e 	uxth.w	lr, lr
 800047e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000482:	fb0c 5510 	mls	r5, ip, r0, r5
 8000486:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45a0      	cmp	r8, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x26e>
 8000492:	18e4      	adds	r4, r4, r3
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d229      	bcs.n	80004ee <__udivmoddi4+0x2ba>
 800049a:	45a0      	cmp	r8, r4
 800049c:	d927      	bls.n	80004ee <__udivmoddi4+0x2ba>
 800049e:	3802      	subs	r0, #2
 80004a0:	441c      	add	r4, r3
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba4 0408 	sub.w	r4, r4, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d315      	bcc.n	80004e2 <__udivmoddi4+0x2ae>
 80004b6:	d012      	beq.n	80004de <__udivmoddi4+0x2aa>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x29c>
 80004ba:	ebba 030e 	subs.w	r3, sl, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431f      	orrs	r7, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	6037      	str	r7, [r6, #0]
 80004ce:	6074      	str	r4, [r6, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	4618      	mov	r0, r3
 80004d8:	e6f8      	b.n	80002cc <__udivmoddi4+0x98>
 80004da:	4690      	mov	r8, r2
 80004dc:	e6e0      	b.n	80002a0 <__udivmoddi4+0x6c>
 80004de:	45c2      	cmp	sl, r8
 80004e0:	d2ea      	bcs.n	80004b8 <__udivmoddi4+0x284>
 80004e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7e4      	b.n	80004b8 <__udivmoddi4+0x284>
 80004ee:	4628      	mov	r0, r5
 80004f0:	e7d7      	b.n	80004a2 <__udivmoddi4+0x26e>
 80004f2:	4640      	mov	r0, r8
 80004f4:	e791      	b.n	800041a <__udivmoddi4+0x1e6>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e7be      	b.n	8000478 <__udivmoddi4+0x244>
 80004fa:	4601      	mov	r1, r0
 80004fc:	e778      	b.n	80003f0 <__udivmoddi4+0x1bc>
 80004fe:	3802      	subs	r0, #2
 8000500:	443c      	add	r4, r7
 8000502:	e745      	b.n	8000390 <__udivmoddi4+0x15c>
 8000504:	4608      	mov	r0, r1
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xe6>
 8000508:	f1a8 0802 	sub.w	r8, r8, #2
 800050c:	443d      	add	r5, r7
 800050e:	e72b      	b.n	8000368 <__udivmoddi4+0x134>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000514:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000516:	4b08      	ldr	r3, [pc, #32]	; (8000538 <HAL_InitTick+0x24>)
{
 8000518:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800051a:	6818      	ldr	r0, [r3, #0]
 800051c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000520:	fbb0 f0f3 	udiv	r0, r0, r3
 8000524:	f000 fc34 	bl	8000d90 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000528:	2200      	movs	r2, #0
 800052a:	4621      	mov	r1, r4
 800052c:	f04f 30ff 	mov.w	r0, #4294967295
 8000530:	f000 fbee 	bl	8000d10 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000534:	2000      	movs	r0, #0
 8000536:	bd10      	pop	{r4, pc}
 8000538:	20000000 	.word	0x20000000

0800053c <HAL_Init>:
{
 800053c:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800053e:	4b0b      	ldr	r3, [pc, #44]	; (800056c <HAL_Init+0x30>)
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000546:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000548:	681a      	ldr	r2, [r3, #0]
 800054a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800054e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000556:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000558:	2003      	movs	r0, #3
 800055a:	f000 fbc7 	bl	8000cec <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800055e:	2000      	movs	r0, #0
 8000560:	f7ff ffd8 	bl	8000514 <HAL_InitTick>
  HAL_MspInit();
 8000564:	f001 fe24 	bl	80021b0 <HAL_MspInit>
}
 8000568:	2000      	movs	r0, #0
 800056a:	bd08      	pop	{r3, pc}
 800056c:	40023c00 	.word	0x40023c00

08000570 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000570:	4a02      	ldr	r2, [pc, #8]	; (800057c <HAL_IncTick+0xc>)
 8000572:	6813      	ldr	r3, [r2, #0]
 8000574:	3301      	adds	r3, #1
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	20000080 	.word	0x20000080

08000580 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000580:	4b01      	ldr	r3, [pc, #4]	; (8000588 <HAL_GetTick+0x8>)
 8000582:	6818      	ldr	r0, [r3, #0]
}
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	20000080 	.word	0x20000080

0800058c <HAL_CAN_ConfigFilter>:
  assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
  assert_param(IS_CAN_BANKNUMBER(sFilterConfig->BankNumber));
  
  filternbrbitpos = 1U << sFilterConfig->FilterNumber;
 800058c:	694a      	ldr	r2, [r1, #20]
 800058e:	2301      	movs	r3, #1
{
 8000590:	b530      	push	{r4, r5, lr}
  filternbrbitpos = 1U << sFilterConfig->FilterNumber;
 8000592:	fa03 f502 	lsl.w	r5, r3, r2
#else
  can_ip = CAN1;
#endif
  
  /* Initialisation mode for the filter */
  can_ip->FMR |= (uint32_t)CAN_FMR_FINIT;
 8000596:	4b3c      	ldr	r3, [pc, #240]	; (8000688 <HAL_CAN_ConfigFilter+0xfc>)
 8000598:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
 800059c:	f040 0001 	orr.w	r0, r0, #1
 80005a0:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200

#if defined (CAN2)  
  /* Select the start slave bank */
  can_ip->FMR &= ~((uint32_t)CAN_FMR_CAN2SB);
 80005a4:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
 80005a8:	f420 507c 	bic.w	r0, r0, #16128	; 0x3f00
 80005ac:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
  can_ip->FMR |= (uint32_t)(sFilterConfig->BankNumber << 8U);
 80005b0:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
 80005b4:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80005b6:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 80005ba:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
#endif
     
  /* Filter Deactivation */
  can_ip->FA1R &= ~(uint32_t)filternbrbitpos;
 80005be:	f8d3 021c 	ldr.w	r0, [r3, #540]	; 0x21c
 80005c2:	43ec      	mvns	r4, r5
 80005c4:	4020      	ands	r0, r4
 80005c6:	f8c3 021c 	str.w	r0, [r3, #540]	; 0x21c

  /* Filter Scale */
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80005ca:	69c8      	ldr	r0, [r1, #28]
 80005cc:	2800      	cmp	r0, #0
 80005ce:	d136      	bne.n	800063e <HAL_CAN_ConfigFilter+0xb2>
  {
    /* 16-bit scale for the filter */
    can_ip->FS1R &= ~(uint32_t)filternbrbitpos;
 80005d0:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 80005d4:	4020      	ands	r0, r4
 80005d6:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
 80005da:	00d2      	lsls	r2, r2, #3

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    can_ip->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80005dc:	68c8      	ldr	r0, [r1, #12]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80005de:	888b      	ldrh	r3, [r1, #4]
 80005e0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80005e4:	f502 42c8 	add.w	r2, r2, #25600	; 0x6400
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80005e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    can_ip->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 80005ec:	f8c2 3240 	str.w	r3, [r2, #576]	; 0x240

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    can_ip->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80005f0:	6888      	ldr	r0, [r1, #8]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80005f2:	880b      	ldrh	r3, [r1, #0]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80005f4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    can_ip->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 80005f8:	f8c2 3244 	str.w	r3, [r2, #580]	; 0x244
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
  }

  /* Filter Mode */
  if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80005fc:	698b      	ldr	r3, [r1, #24]
 80005fe:	4822      	ldr	r0, [pc, #136]	; (8000688 <HAL_CAN_ConfigFilter+0xfc>)
 8000600:	2b00      	cmp	r3, #0
 8000602:	d135      	bne.n	8000670 <HAL_CAN_ConfigFilter+0xe4>
  {
    /*Id/Mask mode for the filter*/
    can_ip->FM1R &= ~(uint32_t)filternbrbitpos;
 8000604:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8000608:	4023      	ands	r3, r4
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    can_ip->FM1R |= (uint32_t)filternbrbitpos;
 800060a:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800060e:	690b      	ldr	r3, [r1, #16]
 8000610:	4a1d      	ldr	r2, [pc, #116]	; (8000688 <HAL_CAN_ConfigFilter+0xfc>)
 8000612:	bb8b      	cbnz	r3, 8000678 <HAL_CAN_ConfigFilter+0xec>
  {
    /* FIFO 0 assignation for the filter */
    can_ip->FFA1R &= ~(uint32_t)filternbrbitpos;
 8000614:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8000618:	401c      	ands	r4, r3
 800061a:	f8c0 4214 	str.w	r4, [r0, #532]	; 0x214
    /* FIFO 1 assignation for the filter */
    can_ip->FFA1R |= (uint32_t)filternbrbitpos;
  }
  
  /* Filter activation */
  if (sFilterConfig->FilterActivation == ENABLE)
 800061e:	6a0b      	ldr	r3, [r1, #32]
 8000620:	2b01      	cmp	r3, #1
  {
    can_ip->FA1R |= filternbrbitpos;
 8000622:	bf02      	ittt	eq
 8000624:	f8d2 321c 	ldreq.w	r3, [r2, #540]	; 0x21c
 8000628:	432b      	orreq	r3, r5
 800062a:	f8c2 321c 	streq.w	r3, [r2, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  can_ip->FMR &= ~((uint32_t)CAN_FMR_FINIT);
 800062e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8000632:	f023 0301 	bic.w	r3, r3, #1
 8000636:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  
  /* Return function status */
  return HAL_OK;
}
 800063a:	2000      	movs	r0, #0
 800063c:	bd30      	pop	{r4, r5, pc}
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800063e:	2801      	cmp	r0, #1
 8000640:	d1dc      	bne.n	80005fc <HAL_CAN_ConfigFilter+0x70>
    can_ip->FS1R |= filternbrbitpos;
 8000642:	f8d3 020c 	ldr.w	r0, [r3, #524]	; 0x20c
 8000646:	4328      	orrs	r0, r5
 8000648:	f8c3 020c 	str.w	r0, [r3, #524]	; 0x20c
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800064c:	680b      	ldr	r3, [r1, #0]
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800064e:	8888      	ldrh	r0, [r1, #4]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000650:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000654:	00d3      	lsls	r3, r2, #3
 8000656:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800065a:	f503 43c8 	add.w	r3, r3, #25600	; 0x6400
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800065e:	898a      	ldrh	r2, [r1, #12]
    can_ip->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8000660:	f8c3 0240 	str.w	r0, [r3, #576]	; 0x240
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000664:	6888      	ldr	r0, [r1, #8]
 8000666:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    can_ip->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 800066a:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 800066e:	e7c5      	b.n	80005fc <HAL_CAN_ConfigFilter+0x70>
    can_ip->FM1R |= (uint32_t)filternbrbitpos;
 8000670:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8000674:	432b      	orrs	r3, r5
 8000676:	e7c8      	b.n	800060a <HAL_CAN_ConfigFilter+0x7e>
  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO1)
 8000678:	2b01      	cmp	r3, #1
    can_ip->FFA1R |= (uint32_t)filternbrbitpos;
 800067a:	bf02      	ittt	eq
 800067c:	f8d2 3214 	ldreq.w	r3, [r2, #532]	; 0x214
 8000680:	432b      	orreq	r3, r5
 8000682:	f8c2 3214 	streq.w	r3, [r2, #532]	; 0x214
 8000686:	e7ca      	b.n	800061e <HAL_CAN_ConfigFilter+0x92>
 8000688:	40006400 	.word	0x40006400

0800068c <HAL_CAN_Init>:
{
 800068c:	b570      	push	{r4, r5, r6, lr}
  if(hcan == NULL)
 800068e:	4604      	mov	r4, r0
 8000690:	2800      	cmp	r0, #0
 8000692:	d072      	beq.n	800077a <HAL_CAN_Init+0xee>
  if(hcan->State == HAL_CAN_STATE_RESET)
 8000694:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000698:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800069c:	b91b      	cbnz	r3, 80006a6 <HAL_CAN_Init+0x1a>
    hcan->Lock = HAL_UNLOCKED;
 800069e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    HAL_CAN_MspInit(hcan);
 80006a2:	f001 fdbd 	bl	8002220 <HAL_CAN_MspInit>
  hcan->State = HAL_CAN_STATE_BUSY;
 80006a6:	2302      	movs	r3, #2
 80006a8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  hcan->Instance->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 80006ac:	6823      	ldr	r3, [r4, #0]
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	f022 0202 	bic.w	r2, r2, #2
 80006b4:	601a      	str	r2, [r3, #0]
  hcan->Instance->MCR |= CAN_MCR_INRQ ;
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	f042 0201 	orr.w	r2, r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80006be:	f7ff ff5f 	bl	8000580 <HAL_GetTick>
 80006c2:	4606      	mov	r6, r0
  while((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 80006c4:	6823      	ldr	r3, [r4, #0]
 80006c6:	685d      	ldr	r5, [r3, #4]
 80006c8:	f015 0501 	ands.w	r5, r5, #1
 80006cc:	d057      	beq.n	800077e <HAL_CAN_Init+0xf2>
  if ((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 80006ce:	685a      	ldr	r2, [r3, #4]
 80006d0:	07d1      	lsls	r1, r2, #31
 80006d2:	d54f      	bpl.n	8000774 <HAL_CAN_Init+0xe8>
    if (hcan->Init.TTCM == ENABLE)
 80006d4:	69a2      	ldr	r2, [r4, #24]
 80006d6:	2a01      	cmp	r2, #1
      hcan->Instance->MCR |= CAN_MCR_TTCM;
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	bf0c      	ite	eq
 80006dc:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 80006e0:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 80006e4:	601a      	str	r2, [r3, #0]
    if (hcan->Init.ABOM == ENABLE)
 80006e6:	69e2      	ldr	r2, [r4, #28]
 80006e8:	2a01      	cmp	r2, #1
      hcan->Instance->MCR |= CAN_MCR_ABOM;
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	bf0c      	ite	eq
 80006ee:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 80006f2:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 80006f6:	601a      	str	r2, [r3, #0]
    if (hcan->Init.AWUM == ENABLE)
 80006f8:	6a22      	ldr	r2, [r4, #32]
 80006fa:	2a01      	cmp	r2, #1
      hcan->Instance->MCR |= CAN_MCR_AWUM;
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	bf0c      	ite	eq
 8000700:	f042 0220 	orreq.w	r2, r2, #32
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 8000704:	f022 0220 	bicne.w	r2, r2, #32
 8000708:	601a      	str	r2, [r3, #0]
    if (hcan->Init.NART == ENABLE)
 800070a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800070c:	2a01      	cmp	r2, #1
      hcan->Instance->MCR |= CAN_MCR_NART;
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	bf0c      	ite	eq
 8000712:	f042 0210 	orreq.w	r2, r2, #16
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_NART;
 8000716:	f022 0210 	bicne.w	r2, r2, #16
 800071a:	601a      	str	r2, [r3, #0]
    if (hcan->Init.RFLM == ENABLE)
 800071c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800071e:	2a01      	cmp	r2, #1
      hcan->Instance->MCR |= CAN_MCR_RFLM;
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	bf0c      	ite	eq
 8000724:	f042 0208 	orreq.w	r2, r2, #8
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 8000728:	f022 0208 	bicne.w	r2, r2, #8
 800072c:	601a      	str	r2, [r3, #0]
    if (hcan->Init.TXFP == ENABLE)
 800072e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000730:	2a01      	cmp	r2, #1
      hcan->Instance->MCR |= CAN_MCR_TXFP;
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	bf0c      	ite	eq
 8000736:	f042 0204 	orreq.w	r2, r2, #4
      hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 800073a:	f022 0204 	bicne.w	r2, r2, #4
 800073e:	601a      	str	r2, [r3, #0]
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 8000740:	68e1      	ldr	r1, [r4, #12]
 8000742:	68a2      	ldr	r2, [r4, #8]
 8000744:	430a      	orrs	r2, r1
                ((uint32_t)hcan->Init.SJW) | \
 8000746:	6921      	ldr	r1, [r4, #16]
 8000748:	430a      	orrs	r2, r1
                ((uint32_t)hcan->Init.BS1) | \
 800074a:	6961      	ldr	r1, [r4, #20]
 800074c:	430a      	orrs	r2, r1
               ((uint32_t)hcan->Init.Prescaler - 1U);
 800074e:	6861      	ldr	r1, [r4, #4]
 8000750:	3901      	subs	r1, #1
                ((uint32_t)hcan->Init.BS2) | \
 8000752:	430a      	orrs	r2, r1
    hcan->Instance->BTR = (uint32_t)((uint32_t)hcan->Init.Mode) | \
 8000754:	61da      	str	r2, [r3, #28]
    hcan->Instance->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	f022 0201 	bic.w	r2, r2, #1
 800075c:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800075e:	f7ff ff0f 	bl	8000580 <HAL_GetTick>
 8000762:	4605      	mov	r5, r0
   while((hcan->Instance->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000764:	6823      	ldr	r3, [r4, #0]
 8000766:	685a      	ldr	r2, [r3, #4]
 8000768:	07d2      	lsls	r2, r2, #31
 800076a:	d413      	bmi.n	8000794 <HAL_CAN_Init+0x108>
    if ((hcan->Instance->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 800076c:	6858      	ldr	r0, [r3, #4]
 800076e:	f010 0001 	ands.w	r0, r0, #1
 8000772:	d01b      	beq.n	80007ac <HAL_CAN_Init+0x120>
    hcan->State = HAL_CAN_STATE_ERROR;
 8000774:	2304      	movs	r3, #4
 8000776:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 800077a:	2001      	movs	r0, #1
}
 800077c:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
 800077e:	f7ff feff 	bl	8000580 <HAL_GetTick>
 8000782:	1b80      	subs	r0, r0, r6
 8000784:	280a      	cmp	r0, #10
 8000786:	d99d      	bls.n	80006c4 <HAL_CAN_Init+0x38>
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 8000788:	2003      	movs	r0, #3
 800078a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hcan);
 800078e:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
      return HAL_TIMEOUT;
 8000792:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > CAN_TIMEOUT_VALUE)
 8000794:	f7ff fef4 	bl	8000580 <HAL_GetTick>
 8000798:	1b40      	subs	r0, r0, r5
 800079a:	280a      	cmp	r0, #10
 800079c:	d9e2      	bls.n	8000764 <HAL_CAN_Init+0xd8>
       hcan->State= HAL_CAN_STATE_TIMEOUT;
 800079e:	2003      	movs	r0, #3
       __HAL_UNLOCK(hcan);
 80007a0:	2300      	movs	r3, #0
       hcan->State= HAL_CAN_STATE_TIMEOUT;
 80007a2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
       __HAL_UNLOCK(hcan);
 80007a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
       return HAL_TIMEOUT;
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
    hcan->State = HAL_CAN_STATE_READY;
 80007ac:	2301      	movs	r3, #1
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80007ae:	6420      	str	r0, [r4, #64]	; 0x40
    hcan->State = HAL_CAN_STATE_READY;
 80007b0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080007b8 <HAL_CAN_Transmit>:
  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(hcan->pTxMsg->IDE));
  assert_param(IS_CAN_RTR(hcan->pTxMsg->RTR));
  assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));

  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 80007b8:	6802      	ldr	r2, [r0, #0]
{
 80007ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 80007be:	6893      	ldr	r3, [r2, #8]
 80007c0:	015b      	lsls	r3, r3, #5
{
 80007c2:	4604      	mov	r4, r0
 80007c4:	460f      	mov	r7, r1
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 80007c6:	d406      	bmi.n	80007d6 <HAL_CAN_Transmit+0x1e>
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 80007c8:	6893      	ldr	r3, [r2, #8]
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 80007ca:	011d      	lsls	r5, r3, #4
 80007cc:	d403      	bmi.n	80007d6 <HAL_CAN_Transmit+0x1e>
     ((hcan->Instance->TSR&CAN_TSR_TME2) == CAN_TSR_TME2))
 80007ce:	6893      	ldr	r3, [r2, #8]
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 80007d0:	00d8      	lsls	r0, r3, #3
 80007d2:	f140 80b1 	bpl.w	8000938 <HAL_CAN_Transmit+0x180>
  {  
    /* Process locked */
    __HAL_LOCK(hcan);
 80007d6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80007da:	2b01      	cmp	r3, #1
 80007dc:	f000 80b2 	beq.w	8000944 <HAL_CAN_Transmit+0x18c>
 80007e0:	2301      	movs	r3, #1
 80007e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  
    /* Change CAN state */
    switch(hcan->State)
 80007e6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	2b32      	cmp	r3, #50	; 0x32
 80007ee:	d066      	beq.n	80008be <HAL_CAN_Transmit+0x106>
 80007f0:	2b62      	cmp	r3, #98	; 0x62
 80007f2:	d066      	beq.n	80008c2 <HAL_CAN_Transmit+0x10a>
 80007f4:	2b22      	cmp	r3, #34	; 0x22
 80007f6:	d166      	bne.n	80008c6 <HAL_CAN_Transmit+0x10e>
    {
      case(HAL_CAN_STATE_BUSY_RX0):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 80007f8:	2342      	movs	r3, #66	; 0x42
          break;
      case(HAL_CAN_STATE_BUSY_RX0_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
          break;
      default: /* HAL_CAN_STATE_READY */
          hcan->State = HAL_CAN_STATE_BUSY_TX;
 80007fa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          break;
    }
  
    /* Select one empty transmit mailbox */
    if ((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 80007fe:	6893      	ldr	r3, [r2, #8]
 8000800:	0159      	lsls	r1, r3, #5
 8000802:	d462      	bmi.n	80008ca <HAL_CAN_Transmit+0x112>
    {
      transmitmailbox = CAN_TXMAILBOX_0;
    }
    else if ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 8000804:	6893      	ldr	r3, [r2, #8]
    {
      transmitmailbox = CAN_TXMAILBOX_1;
    }
    else
    {
      transmitmailbox = CAN_TXMAILBOX_2;
 8000806:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800080a:	bf14      	ite	ne
 800080c:	2601      	movne	r6, #1
 800080e:	2602      	moveq	r6, #2
 8000810:	ea4f 1e06 	mov.w	lr, r6, lsl #4
 8000814:	eb02 030e 	add.w	r3, r2, lr
    }

    /* Set up the Id */
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 8000818:	6b20      	ldr	r0, [r4, #48]	; 0x30
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 800081a:	f8d3 1180 	ldr.w	r1, [r3, #384]	; 0x180
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 800081e:	6885      	ldr	r5, [r0, #8]
 8000820:	f8d0 c00c 	ldr.w	ip, [r0, #12]
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 8000824:	f001 0101 	and.w	r1, r1, #1
 8000828:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 800082c:	2d00      	cmp	r5, #0
 800082e:	d14e      	bne.n	80008ce <HAL_CAN_Transmit+0x116>
    {
      assert_param(IS_CAN_STDID(hcan->pTxMsg->StdId));  
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << 21U) | \
 8000830:	6805      	ldr	r5, [r0, #0]
 8000832:	f8d3 1180 	ldr.w	r1, [r3, #384]	; 0x180
 8000836:	ea4c 5545 	orr.w	r5, ip, r5, lsl #21
 800083a:	430d      	orrs	r5, r1
                                                  hcan->pTxMsg->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(hcan->pTxMsg->ExtId));
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << 3U) | \
 800083c:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
                                                  hcan->pTxMsg->RTR);
    }
    
    /* Set up the DLC */
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= (uint32_t)0xFFFFFFF0U;
 8000840:	f8d3 5184 	ldr.w	r5, [r3, #388]	; 0x184
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
 8000844:	6901      	ldr	r1, [r0, #16]
  
    /* Get tick */
    tickstart = HAL_GetTick();
  
    /* Check End of transmission flag */
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 8000846:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8000950 <HAL_CAN_Transmit+0x198>
 800084a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8000954 <HAL_CAN_Transmit+0x19c>
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
 800084e:	f001 010f 	and.w	r1, r1, #15
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= (uint32_t)0xFFFFFFF0U;
 8000852:	f025 050f 	bic.w	r5, r5, #15
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000F;
 8000856:	6101      	str	r1, [r0, #16]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= (uint32_t)0xFFFFFFF0U;
 8000858:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
 800085c:	f8d3 5184 	ldr.w	r5, [r3, #388]	; 0x184
 8000860:	4329      	orrs	r1, r5
 8000862:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
    hcan->Instance->sTxMailBox[transmitmailbox].TDLR = (((uint32_t)hcan->pTxMsg->Data[3U] << 24U) | 
 8000866:	4472      	add	r2, lr
                                             ((uint32_t)hcan->pTxMsg->Data[1U] << 8U) | 
 8000868:	6941      	ldr	r1, [r0, #20]
    hcan->Instance->sTxMailBox[transmitmailbox].TDLR = (((uint32_t)hcan->pTxMsg->Data[3U] << 24U) | 
 800086a:	f8c2 1188 	str.w	r1, [r2, #392]	; 0x188
                                             ((uint32_t)hcan->pTxMsg->Data[5U] << 8U) |
 800086e:	6981      	ldr	r1, [r0, #24]
    hcan->Instance->sTxMailBox[transmitmailbox].TDHR = (((uint32_t)hcan->pTxMsg->Data[7U] << 24U) | 
 8000870:	f8c2 118c 	str.w	r1, [r2, #396]	; 0x18c
    hcan->Instance->sTxMailBox[transmitmailbox].TIR |= CAN_TI0R_TXRQ;
 8000874:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8000878:	f042 0201 	orr.w	r2, r2, #1
 800087c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    tickstart = HAL_GetTick();
 8000880:	f7ff fe7e 	bl	8000580 <HAL_GetTick>
 8000884:	4605      	mov	r5, r0
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 8000886:	4a31      	ldr	r2, [pc, #196]	; (800094c <HAL_CAN_Transmit+0x194>)
 8000888:	6823      	ldr	r3, [r4, #0]
 800088a:	689b      	ldr	r3, [r3, #8]
 800088c:	2e00      	cmp	r6, #0
 800088e:	d145      	bne.n	800091c <HAL_CAN_Transmit+0x164>
 8000890:	ea32 0303 	bics.w	r3, r2, r3
 8000894:	bf14      	ite	ne
 8000896:	2301      	movne	r3, #1
 8000898:	2300      	moveq	r3, #0
 800089a:	bb13      	cbnz	r3, 80008e2 <HAL_CAN_Transmit+0x12a>
        }
      }
    }

    /* Change CAN state */
    switch(hcan->State)
 800089c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	2b52      	cmp	r3, #82	; 0x52
 80008a4:	d042      	beq.n	800092c <HAL_CAN_Transmit+0x174>
 80008a6:	2b72      	cmp	r3, #114	; 0x72
 80008a8:	d042      	beq.n	8000930 <HAL_CAN_Transmit+0x178>
 80008aa:	2b42      	cmp	r3, #66	; 0x42
 80008ac:	d142      	bne.n	8000934 <HAL_CAN_Transmit+0x17c>
    {
      case(HAL_CAN_STATE_BUSY_TX_RX0):
          hcan->State = HAL_CAN_STATE_BUSY_RX0;
 80008ae:	2322      	movs	r3, #34	; 0x22
          hcan->State = HAL_CAN_STATE_READY;
          break;
    }

    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 80008b0:	2000      	movs	r0, #0
          hcan->State = HAL_CAN_STATE_READY;
 80008b2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hcan);
 80008b6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    
    /* Return function status */
    return HAL_OK;
 80008ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 80008be:	2352      	movs	r3, #82	; 0x52
 80008c0:	e79b      	b.n	80007fa <HAL_CAN_Transmit+0x42>
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 80008c2:	2372      	movs	r3, #114	; 0x72
 80008c4:	e799      	b.n	80007fa <HAL_CAN_Transmit+0x42>
          hcan->State = HAL_CAN_STATE_BUSY_TX;
 80008c6:	2312      	movs	r3, #18
 80008c8:	e797      	b.n	80007fa <HAL_CAN_Transmit+0x42>
      transmitmailbox = CAN_TXMAILBOX_0;
 80008ca:	2600      	movs	r6, #0
 80008cc:	e7a0      	b.n	8000810 <HAL_CAN_Transmit+0x58>
                                                  hcan->pTxMsg->IDE | \
 80008ce:	6841      	ldr	r1, [r0, #4]
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << 3U) | \
 80008d0:	f8d3 8180 	ldr.w	r8, [r3, #384]	; 0x180
                                                  hcan->pTxMsg->IDE | \
 80008d4:	ea45 050c 	orr.w	r5, r5, ip
 80008d8:	ea45 05c1 	orr.w	r5, r5, r1, lsl #3
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << 3U) | \
 80008dc:	ea45 0508 	orr.w	r5, r5, r8
 80008e0:	e7ac      	b.n	800083c <HAL_CAN_Transmit+0x84>
      if(Timeout != HAL_MAX_DELAY)
 80008e2:	1c7b      	adds	r3, r7, #1
 80008e4:	d0d0      	beq.n	8000888 <HAL_CAN_Transmit+0xd0>
       if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80008e6:	b95f      	cbnz	r7, 8000900 <HAL_CAN_Transmit+0x148>
         hcan->State = HAL_CAN_STATE_TIMEOUT;
 80008e8:	2303      	movs	r3, #3
 80008ea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80008ee:	6823      	ldr	r3, [r4, #0]
         __HAL_CAN_CANCEL_TRANSMIT(hcan, transmitmailbox);
 80008f0:	b166      	cbz	r6, 800090c <HAL_CAN_Transmit+0x154>
 80008f2:	2e01      	cmp	r6, #1
 80008f4:	bf0c      	ite	eq
 80008f6:	f44f 4200 	moveq.w	r2, #32768	; 0x8000
 80008fa:	f44f 0200 	movne.w	r2, #8388608	; 0x800000
 80008fe:	e006      	b.n	800090e <HAL_CAN_Transmit+0x156>
       if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000900:	f7ff fe3e 	bl	8000580 <HAL_GetTick>
 8000904:	1b40      	subs	r0, r0, r5
 8000906:	4287      	cmp	r7, r0
 8000908:	d2bd      	bcs.n	8000886 <HAL_CAN_Transmit+0xce>
 800090a:	e7ed      	b.n	80008e8 <HAL_CAN_Transmit+0x130>
         __HAL_CAN_CANCEL_TRANSMIT(hcan, transmitmailbox);
 800090c:	2280      	movs	r2, #128	; 0x80
 800090e:	609a      	str	r2, [r3, #8]
         __HAL_UNLOCK(hcan);
 8000910:	2300      	movs	r3, #0
 8000912:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
         return HAL_TIMEOUT;
 8000916:	2003      	movs	r0, #3
 8000918:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 800091c:	2e01      	cmp	r6, #1
 800091e:	d102      	bne.n	8000926 <HAL_CAN_Transmit+0x16e>
 8000920:	ea39 0303 	bics.w	r3, r9, r3
 8000924:	e7b6      	b.n	8000894 <HAL_CAN_Transmit+0xdc>
 8000926:	ea38 0303 	bics.w	r3, r8, r3
 800092a:	e7b3      	b.n	8000894 <HAL_CAN_Transmit+0xdc>
          hcan->State = HAL_CAN_STATE_BUSY_RX1;
 800092c:	2332      	movs	r3, #50	; 0x32
 800092e:	e7bf      	b.n	80008b0 <HAL_CAN_Transmit+0xf8>
          hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 8000930:	2362      	movs	r3, #98	; 0x62
 8000932:	e7bd      	b.n	80008b0 <HAL_CAN_Transmit+0xf8>
          hcan->State = HAL_CAN_STATE_READY;
 8000934:	2301      	movs	r3, #1
 8000936:	e7bb      	b.n	80008b0 <HAL_CAN_Transmit+0xf8>
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_ERROR; 
 8000938:	2304      	movs	r3, #4
 800093a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

    /* Return function status */
    return HAL_ERROR;
 800093e:	2001      	movs	r0, #1
 8000940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_LOCK(hcan);
 8000944:	2002      	movs	r0, #2
  }
}
 8000946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800094a:	bf00      	nop
 800094c:	04000003 	.word	0x04000003
 8000950:	10030000 	.word	0x10030000
 8000954:	08000300 	.word	0x08000300

08000958 <HAL_CAN_Receive_IT>:
  *         the configuration information for the specified CAN.  
  * @param  FIFONumber Specify the FIFO number    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 8000958:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_CAN_FIFO(FIFONumber));
  
  /* Check if CAN state is not busy for RX FIFO0 */
  if((FIFONumber == CAN_FIFO0) && ((hcan->State == HAL_CAN_STATE_BUSY_RX0) ||         \
 800095a:	2900      	cmp	r1, #0
 800095c:	d136      	bne.n	80009cc <HAL_CAN_Receive_IT+0x74>
 800095e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000962:	2b22      	cmp	r3, #34	; 0x22
 8000964:	d050      	beq.n	8000a08 <HAL_CAN_Receive_IT+0xb0>
                                   (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0) ||      \
 8000966:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if((FIFONumber == CAN_FIFO0) && ((hcan->State == HAL_CAN_STATE_BUSY_RX0) ||         \
 800096a:	2b42      	cmp	r3, #66	; 0x42
  {
    return HAL_BUSY;
  }

  /* Check if CAN state is not busy for RX FIFO1 */
  if((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||         \
 800096c:	d04c      	beq.n	8000a08 <HAL_CAN_Receive_IT+0xb0>
                                   (hcan->State == HAL_CAN_STATE_BUSY_TX_RX1) ||      \
                                   (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 800096e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
                                   (hcan->State == HAL_CAN_STATE_BUSY_TX_RX1) ||      \
 8000972:	2b62      	cmp	r3, #98	; 0x62
 8000974:	d048      	beq.n	8000a08 <HAL_CAN_Receive_IT+0xb0>
                                   (hcan->State == HAL_CAN_STATE_BUSY_TX_RX0_RX1)))
 8000976:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
                                   (hcan->State == HAL_CAN_STATE_BUSY_RX0_RX1) ||     \
 800097a:	2b72      	cmp	r3, #114	; 0x72
 800097c:	d044      	beq.n	8000a08 <HAL_CAN_Receive_IT+0xb0>
  {
    return HAL_BUSY;
  }

  /* Process locked */
  __HAL_LOCK(hcan);
 800097e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000982:	2b01      	cmp	r3, #1
 8000984:	d040      	beq.n	8000a08 <HAL_CAN_Receive_IT+0xb0>
 8000986:	2301      	movs	r3, #1
 8000988:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Change CAN state */
  if(FIFONumber == CAN_FIFO0)
  {
    switch(hcan->State)
 800098c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000990:	b2db      	uxtb	r3, r3
  if(FIFONumber == CAN_FIFO0)
 8000992:	bb29      	cbnz	r1, 80009e0 <HAL_CAN_Receive_IT+0x88>
    switch(hcan->State)
 8000994:	2b32      	cmp	r3, #50	; 0x32
 8000996:	d02b      	beq.n	80009f0 <HAL_CAN_Receive_IT+0x98>
 8000998:	2b52      	cmp	r3, #82	; 0x52
 800099a:	d02b      	beq.n	80009f4 <HAL_CAN_Receive_IT+0x9c>
 800099c:	2b12      	cmp	r3, #18
    {
      case(HAL_CAN_STATE_BUSY_TX):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 800099e:	bf0c      	ite	eq
 80009a0:	2342      	moveq	r3, #66	; 0x42
        break;
      case(HAL_CAN_STATE_BUSY_TX_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
        break;
      default: /* HAL_CAN_STATE_READY */
        hcan->State = HAL_CAN_STATE_BUSY_RX0;
 80009a2:	2322      	movne	r3, #34	; 0x22
        break;
      case(HAL_CAN_STATE_BUSY_TX_RX0):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
        break;
      default: /* HAL_CAN_STATE_READY */
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 80009a4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  /*  - Enable Error passive Interrupt */
  /*  - Enable Bus-off Interrupt */
  /*  - Enable Last error code Interrupt */
  /*  - Enable Error Interrupt */
  /*  - Enable Transmit mailbox empty Interrupt */
  __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 80009a8:	6802      	ldr	r2, [r0, #0]
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_CAN_ENABLE_IT(hcan, CAN_IT_EWG |
 80009ae:	6954      	ldr	r4, [r2, #20]
 80009b0:	f444 440f 	orr.w	r4, r4, #36608	; 0x8f00
 80009b4:	f044 0401 	orr.w	r4, r4, #1
 80009b8:	6154      	str	r4, [r2, #20]
                            CAN_IT_LEC |
                            CAN_IT_ERR |
                            CAN_IT_TME);

  /* Process unlocked */
   __HAL_UNLOCK(hcan);
 80009ba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  if(FIFONumber == CAN_FIFO0)
 80009be:	b9e9      	cbnz	r1, 80009fc <HAL_CAN_Receive_IT+0xa4>
  {
    /* Enable FIFO 0 overrun and message pending Interrupt */
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV0 | CAN_IT_FMP0);
 80009c0:	6953      	ldr	r3, [r2, #20]
 80009c2:	f043 030a 	orr.w	r3, r3, #10
 80009c6:	6153      	str	r3, [r2, #20]
    /* Enable FIFO 1 overrun and message pending Interrupt */
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
  }

  /* Return function status */
  return HAL_OK;
 80009c8:	4608      	mov	r0, r1
 80009ca:	bd10      	pop	{r4, pc}
  if((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||         \
 80009cc:	2901      	cmp	r1, #1
 80009ce:	d1d6      	bne.n	800097e <HAL_CAN_Receive_IT+0x26>
 80009d0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80009d4:	2b32      	cmp	r3, #50	; 0x32
 80009d6:	d017      	beq.n	8000a08 <HAL_CAN_Receive_IT+0xb0>
                                   (hcan->State == HAL_CAN_STATE_BUSY_TX_RX1) ||      \
 80009d8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if((FIFONumber == CAN_FIFO1) && ((hcan->State == HAL_CAN_STATE_BUSY_RX1) ||         \
 80009dc:	2b52      	cmp	r3, #82	; 0x52
 80009de:	e7c5      	b.n	800096c <HAL_CAN_Receive_IT+0x14>
    switch(hcan->State)
 80009e0:	2b22      	cmp	r3, #34	; 0x22
 80009e2:	d005      	beq.n	80009f0 <HAL_CAN_Receive_IT+0x98>
 80009e4:	2b42      	cmp	r3, #66	; 0x42
 80009e6:	d005      	beq.n	80009f4 <HAL_CAN_Receive_IT+0x9c>
 80009e8:	2b12      	cmp	r3, #18
 80009ea:	d105      	bne.n	80009f8 <HAL_CAN_Receive_IT+0xa0>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 80009ec:	2352      	movs	r3, #82	; 0x52
 80009ee:	e7d9      	b.n	80009a4 <HAL_CAN_Receive_IT+0x4c>
        hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 80009f0:	2362      	movs	r3, #98	; 0x62
 80009f2:	e7d7      	b.n	80009a4 <HAL_CAN_Receive_IT+0x4c>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 80009f4:	2372      	movs	r3, #114	; 0x72
 80009f6:	e7d5      	b.n	80009a4 <HAL_CAN_Receive_IT+0x4c>
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 80009f8:	2332      	movs	r3, #50	; 0x32
 80009fa:	e7d3      	b.n	80009a4 <HAL_CAN_Receive_IT+0x4c>
    __HAL_CAN_ENABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
 80009fc:	6951      	ldr	r1, [r2, #20]
 80009fe:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 8000a02:	6151      	str	r1, [r2, #20]
  return HAL_OK;
 8000a04:	4618      	mov	r0, r3
 8000a06:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8000a08:	2002      	movs	r0, #2
}
 8000a0a:	bd10      	pop	{r4, pc}

08000a0c <HAL_CAN_TxCpltCallback>:
 8000a0c:	4770      	bx	lr

08000a0e <CAN_Receive_IT>:
  * @param  FIFONumber Specify the FIFO number    
  * @retval HAL status
  * @retval None
  */
static HAL_StatusTypeDef CAN_Receive_IT(CAN_HandleTypeDef* hcan, uint8_t FIFONumber)
{
 8000a0e:	b538      	push	{r3, r4, r5, lr}
  CanRxMsgTypeDef* pRxMsg = NULL;

  /* Set RxMsg pointer */
  if(FIFONumber == CAN_FIFO0)
  {
    pRxMsg = hcan->pRxMsg;
 8000a10:	6b42      	ldr	r2, [r0, #52]	; 0x34
  }
  else /* FIFONumber == CAN_FIFO1 */
  {
    pRxMsg = hcan->pRx1Msg;
 8000a12:	6b83      	ldr	r3, [r0, #56]	; 0x38
    pRxMsg = hcan->pRxMsg;
 8000a14:	2900      	cmp	r1, #0
 8000a16:	bf08      	it	eq
 8000a18:	4613      	moveq	r3, r2
  }

  /* Get the Id */
  pRxMsg->IDE = (uint8_t)0x04 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 8000a1a:	6802      	ldr	r2, [r0, #0]
 8000a1c:	eb02 1401 	add.w	r4, r2, r1, lsl #4
 8000a20:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
 8000a24:	f005 0504 	and.w	r5, r5, #4
 8000a28:	609d      	str	r5, [r3, #8]
  if (pRxMsg->IDE == CAN_ID_STD)
 8000a2a:	2d00      	cmp	r5, #0
 8000a2c:	d151      	bne.n	8000ad2 <CAN_Receive_IT+0xc4>
  {
    pRxMsg->StdId = 0x000007FFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 21U);
 8000a2e:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
 8000a32:	0d6d      	lsrs	r5, r5, #21
 8000a34:	601d      	str	r5, [r3, #0]
  else
  {
    pRxMsg->ExtId = 0x1FFFFFFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 3U);
  }
  
  pRxMsg->RTR = (uint8_t)0x02 & hcan->Instance->sFIFOMailBox[FIFONumber].RIR;
 8000a36:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
 8000a3a:	f005 0502 	and.w	r5, r5, #2
 8000a3e:	60dd      	str	r5, [r3, #12]
  /* Get the DLC */
  pRxMsg->DLC = (uint8_t)0x0F & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
 8000a40:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
  /* Get the FIFONumber */
  pRxMsg->FIFONumber = FIFONumber;
  /* Get the FMI */
  pRxMsg->FMI = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDTR >> 8U);
 8000a44:	f8d4 41b4 	ldr.w	r4, [r4, #436]	; 0x1b4
  pRxMsg->FIFONumber = FIFONumber;
 8000a48:	6219      	str	r1, [r3, #32]
  pRxMsg->FMI = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDTR >> 8U);
 8000a4a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8000a4e:	61dc      	str	r4, [r3, #28]
  /* Get the data field */
  pRxMsg->Data[0] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR;
 8000a50:	eb02 1401 	add.w	r4, r2, r1, lsl #4
  pRxMsg->DLC = (uint8_t)0x0F & hcan->Instance->sFIFOMailBox[FIFONumber].RDTR;
 8000a54:	f005 050f 	and.w	r5, r5, #15
 8000a58:	611d      	str	r5, [r3, #16]
  pRxMsg->Data[0] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDLR;
 8000a5a:	f8d4 51b8 	ldr.w	r5, [r4, #440]	; 0x1b8
 8000a5e:	751d      	strb	r5, [r3, #20]
  pRxMsg->Data[1] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 8U);
 8000a60:	f8d4 51b8 	ldr.w	r5, [r4, #440]	; 0x1b8
 8000a64:	0a2d      	lsrs	r5, r5, #8
 8000a66:	755d      	strb	r5, [r3, #21]
  pRxMsg->Data[2] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 16U);
 8000a68:	f8d4 51b8 	ldr.w	r5, [r4, #440]	; 0x1b8
 8000a6c:	0c2d      	lsrs	r5, r5, #16
 8000a6e:	759d      	strb	r5, [r3, #22]
  pRxMsg->Data[3] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDLR >> 24U);
 8000a70:	f8d4 51b8 	ldr.w	r5, [r4, #440]	; 0x1b8
 8000a74:	0e2d      	lsrs	r5, r5, #24
 8000a76:	75dd      	strb	r5, [r3, #23]
  pRxMsg->Data[4] = (uint8_t)0xFF & hcan->Instance->sFIFOMailBox[FIFONumber].RDHR;
 8000a78:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
 8000a7c:	761d      	strb	r5, [r3, #24]
  pRxMsg->Data[5] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 8U);
 8000a7e:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
 8000a82:	0a2d      	lsrs	r5, r5, #8
 8000a84:	765d      	strb	r5, [r3, #25]
  pRxMsg->Data[6] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 16U);
 8000a86:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
 8000a8a:	0c2d      	lsrs	r5, r5, #16
 8000a8c:	769d      	strb	r5, [r3, #26]
  pRxMsg->Data[7] = (uint8_t)0xFF & (hcan->Instance->sFIFOMailBox[FIFONumber].RDHR >> 24U);
 8000a8e:	f8d4 41bc 	ldr.w	r4, [r4, #444]	; 0x1bc
 8000a92:	0e24      	lsrs	r4, r4, #24
 8000a94:	76dc      	strb	r4, [r3, #27]
 8000a96:	2320      	movs	r3, #32
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8000a98:	bb01      	cbnz	r1, 8000adc <CAN_Receive_IT+0xce>
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO0);
 8000a9a:	60d3      	str	r3, [r2, #12]

    /* Disable FIFO 0 overrun and message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV0 | CAN_IT_FMP0);
 8000a9c:	6953      	ldr	r3, [r2, #20]
 8000a9e:	f023 030a 	bic.w	r3, r3, #10
  else /* FIFONumber == CAN_FIFO1 */
  {
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);

    /* Disable FIFO 1 overrun and message pending Interrupt */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
 8000aa2:	6153      	str	r3, [r2, #20]
  }

  tmp1 = hcan->State;
 8000aa4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if((tmp1 == HAL_CAN_STATE_BUSY_RX0) || (tmp1 == HAL_CAN_STATE_BUSY_RX1))
 8000aa8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8000aac:	2b22      	cmp	r3, #34	; 0x22
  {   
    /* Disable Error warning, Error passive, Bus-off, Last error code
       and Error Interrupts */
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8000aae:	bf01      	itttt	eq
 8000ab0:	6802      	ldreq	r2, [r0, #0]
 8000ab2:	6953      	ldreq	r3, [r2, #20]
 8000ab4:	f423 430f 	biceq.w	r3, r3, #36608	; 0x8f00
 8000ab8:	6153      	streq	r3, [r2, #20]
  }

  /* Change CAN state */
  if (FIFONumber == CAN_FIFO0)
  {
    switch(hcan->State)
 8000aba:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000abe:	b2db      	uxtb	r3, r3
  if (FIFONumber == CAN_FIFO0)
 8000ac0:	b9d1      	cbnz	r1, 8000af8 <CAN_Receive_IT+0xea>
    switch(hcan->State)
 8000ac2:	2b62      	cmp	r3, #98	; 0x62
 8000ac4:	d00f      	beq.n	8000ae6 <CAN_Receive_IT+0xd8>
 8000ac6:	2b72      	cmp	r3, #114	; 0x72
 8000ac8:	d014      	beq.n	8000af4 <CAN_Receive_IT+0xe6>
 8000aca:	2b42      	cmp	r3, #66	; 0x42
        break;
    }
  }
  else /* FIFONumber == CAN_FIFO1 */
  {
    switch(hcan->State)
 8000acc:	d11e      	bne.n	8000b0c <CAN_Receive_IT+0xfe>
    {
      case(HAL_CAN_STATE_BUSY_TX_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX;
 8000ace:	2312      	movs	r3, #18
 8000ad0:	e00a      	b.n	8000ae8 <CAN_Receive_IT+0xda>
    pRxMsg->ExtId = 0x1FFFFFFFU & (hcan->Instance->sFIFOMailBox[FIFONumber].RIR >> 3U);
 8000ad2:	f8d4 51b0 	ldr.w	r5, [r4, #432]	; 0x1b0
 8000ad6:	08ed      	lsrs	r5, r5, #3
 8000ad8:	605d      	str	r5, [r3, #4]
 8000ada:	e7ac      	b.n	8000a36 <CAN_Receive_IT+0x28>
    __HAL_CAN_FIFO_RELEASE(hcan, CAN_FIFO1);
 8000adc:	6113      	str	r3, [r2, #16]
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_FOV1 | CAN_IT_FMP1);
 8000ade:	6953      	ldr	r3, [r2, #20]
 8000ae0:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8000ae4:	e7dd      	b.n	8000aa2 <CAN_Receive_IT+0x94>
        hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8000ae6:	2332      	movs	r3, #50	; 0x32
        break;
      case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
        break;
      default: /* HAL_CAN_STATE_BUSY_RX1 */
        hcan->State = HAL_CAN_STATE_READY;
 8000ae8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
        break;
    }
  }

  /* Receive complete callback */ 
  HAL_CAN_RxCpltCallback(hcan);
 8000aec:	f001 fa48 	bl	8001f80 <HAL_CAN_RxCpltCallback>

  /* Return function status */
  return HAL_OK;
}
 8000af0:	2000      	movs	r0, #0
 8000af2:	bd38      	pop	{r3, r4, r5, pc}
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 8000af4:	2352      	movs	r3, #82	; 0x52
 8000af6:	e7f7      	b.n	8000ae8 <CAN_Receive_IT+0xda>
    switch(hcan->State)
 8000af8:	2b62      	cmp	r3, #98	; 0x62
 8000afa:	d003      	beq.n	8000b04 <CAN_Receive_IT+0xf6>
 8000afc:	2b72      	cmp	r3, #114	; 0x72
 8000afe:	d003      	beq.n	8000b08 <CAN_Receive_IT+0xfa>
 8000b00:	2b52      	cmp	r3, #82	; 0x52
 8000b02:	e7e3      	b.n	8000acc <CAN_Receive_IT+0xbe>
        hcan->State = HAL_CAN_STATE_BUSY_RX0;
 8000b04:	2322      	movs	r3, #34	; 0x22
 8000b06:	e7ef      	b.n	8000ae8 <CAN_Receive_IT+0xda>
        hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 8000b08:	2342      	movs	r3, #66	; 0x42
 8000b0a:	e7ed      	b.n	8000ae8 <CAN_Receive_IT+0xda>
        hcan->State = HAL_CAN_STATE_READY;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	e7eb      	b.n	8000ae8 <CAN_Receive_IT+0xda>

08000b10 <HAL_CAN_ErrorCallback>:
{
 8000b10:	4770      	bx	lr
	...

08000b14 <HAL_CAN_IRQHandler>:
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0);
 8000b14:	6803      	ldr	r3, [r0, #0]
{
 8000b16:	b570      	push	{r4, r5, r6, lr}
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV0);
 8000b18:	68dd      	ldr	r5, [r3, #12]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FOV0);
 8000b1a:	695a      	ldr	r2, [r3, #20]
  if(tmp1 && tmp2)
 8000b1c:	f015 0510 	ands.w	r5, r5, #16
{
 8000b20:	4604      	mov	r4, r0
  if(tmp1 && tmp2)
 8000b22:	d006      	beq.n	8000b32 <HAL_CAN_IRQHandler+0x1e>
 8000b24:	f012 0508 	ands.w	r5, r2, #8
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000b28:	bf1e      	ittt	ne
 8000b2a:	2210      	movne	r2, #16
 8000b2c:	60da      	strne	r2, [r3, #12]
    errorcode |= HAL_CAN_ERROR_FOV0;
 8000b2e:	f44f 7500 	movne.w	r5, #512	; 0x200
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_FOV1);
 8000b32:	6919      	ldr	r1, [r3, #16]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FOV1);
 8000b34:	695a      	ldr	r2, [r3, #20]
  if(tmp1 && tmp2)
 8000b36:	06c9      	lsls	r1, r1, #27
 8000b38:	d505      	bpl.n	8000b46 <HAL_CAN_IRQHandler+0x32>
 8000b3a:	0652      	lsls	r2, r2, #25
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000b3c:	bf42      	ittt	mi
 8000b3e:	2210      	movmi	r2, #16
    errorcode |= HAL_CAN_ERROR_FOV1;
 8000b40:	f445 6580 	orrmi.w	r5, r5, #1024	; 0x400
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000b44:	611a      	strmi	r2, [r3, #16]
  if(__HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_TME))
 8000b46:	695a      	ldr	r2, [r3, #20]
 8000b48:	07d6      	lsls	r6, r2, #31
 8000b4a:	d535      	bpl.n	8000bb8 <HAL_CAN_IRQHandler+0xa4>
    tmp1 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_0);
 8000b4c:	689e      	ldr	r6, [r3, #8]
    if(tmp1 || tmp2 || tmp3)  
 8000b4e:	4a63      	ldr	r2, [pc, #396]	; (8000cdc <HAL_CAN_IRQHandler+0x1c8>)
    tmp2 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_1);
 8000b50:	6898      	ldr	r0, [r3, #8]
    tmp3 = __HAL_CAN_TRANSMIT_STATUS(hcan, CAN_TXMAILBOX_2);
 8000b52:	6899      	ldr	r1, [r3, #8]
    if(tmp1 || tmp2 || tmp3)  
 8000b54:	43b2      	bics	r2, r6
 8000b56:	d005      	beq.n	8000b64 <HAL_CAN_IRQHandler+0x50>
 8000b58:	4a61      	ldr	r2, [pc, #388]	; (8000ce0 <HAL_CAN_IRQHandler+0x1cc>)
 8000b5a:	4382      	bics	r2, r0
 8000b5c:	d002      	beq.n	8000b64 <HAL_CAN_IRQHandler+0x50>
 8000b5e:	4a61      	ldr	r2, [pc, #388]	; (8000ce4 <HAL_CAN_IRQHandler+0x1d0>)
 8000b60:	438a      	bics	r2, r1
 8000b62:	d129      	bne.n	8000bb8 <HAL_CAN_IRQHandler+0xa4>
      tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK0);
 8000b64:	6898      	ldr	r0, [r3, #8]
      tmp2 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK1);
 8000b66:	6899      	ldr	r1, [r3, #8]
      tmp3 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_TXOK2);
 8000b68:	689a      	ldr	r2, [r3, #8]
      if(tmp1 || tmp2 || tmp3)
 8000b6a:	0780      	lsls	r0, r0, #30
 8000b6c:	d404      	bmi.n	8000b78 <HAL_CAN_IRQHandler+0x64>
 8000b6e:	0589      	lsls	r1, r1, #22
 8000b70:	d402      	bmi.n	8000b78 <HAL_CAN_IRQHandler+0x64>
 8000b72:	0396      	lsls	r6, r2, #14
 8000b74:	f140 8090 	bpl.w	8000c98 <HAL_CAN_IRQHandler+0x184>
  __HAL_CAN_DISABLE_IT(hcan, CAN_IT_TME);
 8000b78:	695a      	ldr	r2, [r3, #20]
 8000b7a:	f022 0201 	bic.w	r2, r2, #1
 8000b7e:	615a      	str	r2, [r3, #20]
  if(hcan->State == HAL_CAN_STATE_BUSY_TX)
 8000b80:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 8000b84:	2a12      	cmp	r2, #18
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8000b86:	bf02      	ittt	eq
 8000b88:	695a      	ldreq	r2, [r3, #20]
 8000b8a:	f422 420f 	biceq.w	r2, r2, #36608	; 0x8f00
 8000b8e:	615a      	streq	r2, [r3, #20]
  switch(hcan->State)
 8000b90:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	2b52      	cmp	r3, #82	; 0x52
 8000b98:	d078      	beq.n	8000c8c <HAL_CAN_IRQHandler+0x178>
 8000b9a:	2b72      	cmp	r3, #114	; 0x72
 8000b9c:	d078      	beq.n	8000c90 <HAL_CAN_IRQHandler+0x17c>
 8000b9e:	2b42      	cmp	r3, #66	; 0x42
 8000ba0:	d178      	bne.n	8000c94 <HAL_CAN_IRQHandler+0x180>
      hcan->State = HAL_CAN_STATE_BUSY_RX0;
 8000ba2:	2322      	movs	r3, #34	; 0x22
      hcan->State = HAL_CAN_STATE_READY;
 8000ba4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_CAN_TxCpltCallback(hcan);
 8000ba8:	4620      	mov	r0, r4
 8000baa:	f7ff ff2f 	bl	8000a0c <HAL_CAN_TxCpltCallback>
      SET_BIT(hcan->Instance->TSR, CAN_TSR_RQCP0  | CAN_TSR_RQCP1  | CAN_TSR_RQCP2 | \
 8000bae:	6822      	ldr	r2, [r4, #0]
 8000bb0:	4b4d      	ldr	r3, [pc, #308]	; (8000ce8 <HAL_CAN_IRQHandler+0x1d4>)
 8000bb2:	6891      	ldr	r1, [r2, #8]
 8000bb4:	430b      	orrs	r3, r1
 8000bb6:	6093      	str	r3, [r2, #8]
  tmp1 = __HAL_CAN_MSG_PENDING(hcan, CAN_FIFO0);
 8000bb8:	6823      	ldr	r3, [r4, #0]
 8000bba:	68da      	ldr	r2, [r3, #12]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP0);
 8000bbc:	695b      	ldr	r3, [r3, #20]
  if((tmp1 != 0U) && tmp2)
 8000bbe:	0790      	lsls	r0, r2, #30
 8000bc0:	d005      	beq.n	8000bce <HAL_CAN_IRQHandler+0xba>
 8000bc2:	0799      	lsls	r1, r3, #30
 8000bc4:	d503      	bpl.n	8000bce <HAL_CAN_IRQHandler+0xba>
    CAN_Receive_IT(hcan, CAN_FIFO0);
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4620      	mov	r0, r4
 8000bca:	f7ff ff20 	bl	8000a0e <CAN_Receive_IT>
  tmp1 = __HAL_CAN_MSG_PENDING(hcan, CAN_FIFO1);
 8000bce:	6823      	ldr	r3, [r4, #0]
 8000bd0:	691a      	ldr	r2, [r3, #16]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_FMP1);
 8000bd2:	695b      	ldr	r3, [r3, #20]
  if((tmp1 != 0U) && tmp2)
 8000bd4:	0792      	lsls	r2, r2, #30
 8000bd6:	d005      	beq.n	8000be4 <HAL_CAN_IRQHandler+0xd0>
 8000bd8:	06de      	lsls	r6, r3, #27
 8000bda:	d503      	bpl.n	8000be4 <HAL_CAN_IRQHandler+0xd0>
    CAN_Receive_IT(hcan, CAN_FIFO1);
 8000bdc:	2101      	movs	r1, #1
 8000bde:	4620      	mov	r0, r4
 8000be0:	f7ff ff15 	bl	8000a0e <CAN_Receive_IT>
  hcan->ErrorCode |= errorcode;
 8000be4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000be6:	431d      	orrs	r5, r3
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG);
 8000be8:	6823      	ldr	r3, [r4, #0]
  hcan->ErrorCode |= errorcode;
 8000bea:	6425      	str	r5, [r4, #64]	; 0x40
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EWG);
 8000bec:	6998      	ldr	r0, [r3, #24]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EWG);
 8000bee:	6959      	ldr	r1, [r3, #20]
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);
 8000bf0:	695a      	ldr	r2, [r3, #20]
  if(tmp1 && tmp2 && tmp3)
 8000bf2:	07c0      	lsls	r0, r0, #31
 8000bf4:	d507      	bpl.n	8000c06 <HAL_CAN_IRQHandler+0xf2>
 8000bf6:	05ce      	lsls	r6, r1, #23
 8000bf8:	d505      	bpl.n	8000c06 <HAL_CAN_IRQHandler+0xf2>
 8000bfa:	0415      	lsls	r5, r2, #16
    hcan->ErrorCode |= HAL_CAN_ERROR_EWG;
 8000bfc:	bf42      	ittt	mi
 8000bfe:	6c22      	ldrmi	r2, [r4, #64]	; 0x40
 8000c00:	f042 0201 	orrmi.w	r2, r2, #1
 8000c04:	6422      	strmi	r2, [r4, #64]	; 0x40
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_EPV);
 8000c06:	6998      	ldr	r0, [r3, #24]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_EPV);
 8000c08:	6959      	ldr	r1, [r3, #20]
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR); 
 8000c0a:	695a      	ldr	r2, [r3, #20]
  if(tmp1 && tmp2 && tmp3)
 8000c0c:	0780      	lsls	r0, r0, #30
 8000c0e:	d507      	bpl.n	8000c20 <HAL_CAN_IRQHandler+0x10c>
 8000c10:	0589      	lsls	r1, r1, #22
 8000c12:	d505      	bpl.n	8000c20 <HAL_CAN_IRQHandler+0x10c>
 8000c14:	0412      	lsls	r2, r2, #16
    hcan->ErrorCode |= HAL_CAN_ERROR_EPV;
 8000c16:	bf42      	ittt	mi
 8000c18:	6c22      	ldrmi	r2, [r4, #64]	; 0x40
 8000c1a:	f042 0202 	orrmi.w	r2, r2, #2
 8000c1e:	6422      	strmi	r2, [r4, #64]	; 0x40
  tmp1 = __HAL_CAN_GET_FLAG(hcan, CAN_FLAG_BOF);
 8000c20:	6998      	ldr	r0, [r3, #24]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_BOF);
 8000c22:	6959      	ldr	r1, [r3, #20]
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);  
 8000c24:	695a      	ldr	r2, [r3, #20]
  if(tmp1 && tmp2 && tmp3)
 8000c26:	0746      	lsls	r6, r0, #29
 8000c28:	d507      	bpl.n	8000c3a <HAL_CAN_IRQHandler+0x126>
 8000c2a:	054d      	lsls	r5, r1, #21
 8000c2c:	d505      	bpl.n	8000c3a <HAL_CAN_IRQHandler+0x126>
 8000c2e:	0410      	lsls	r0, r2, #16
    hcan->ErrorCode |= HAL_CAN_ERROR_BOF;
 8000c30:	bf42      	ittt	mi
 8000c32:	6c22      	ldrmi	r2, [r4, #64]	; 0x40
 8000c34:	f042 0204 	orrmi.w	r2, r2, #4
 8000c38:	6422      	strmi	r2, [r4, #64]	; 0x40
  tmp1 = HAL_IS_BIT_CLR(hcan->Instance->ESR, CAN_ESR_LEC);
 8000c3a:	6998      	ldr	r0, [r3, #24]
  tmp2 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_LEC);
 8000c3c:	6959      	ldr	r1, [r3, #20]
  tmp3 = __HAL_CAN_GET_IT_SOURCE(hcan, CAN_IT_ERR);
 8000c3e:	695a      	ldr	r2, [r3, #20]
  if((!tmp1) && tmp2 && tmp3)
 8000c40:	f010 0f70 	tst.w	r0, #112	; 0x70
 8000c44:	d011      	beq.n	8000c6a <HAL_CAN_IRQHandler+0x156>
 8000c46:	0509      	lsls	r1, r1, #20
 8000c48:	d50f      	bpl.n	8000c6a <HAL_CAN_IRQHandler+0x156>
 8000c4a:	0412      	lsls	r2, r2, #16
 8000c4c:	d50d      	bpl.n	8000c6a <HAL_CAN_IRQHandler+0x156>
    tmp1 = (hcan->Instance->ESR) & CAN_ESR_LEC;
 8000c4e:	699a      	ldr	r2, [r3, #24]
 8000c50:	f002 0270 	and.w	r2, r2, #112	; 0x70
    switch(tmp1)
 8000c54:	2a30      	cmp	r2, #48	; 0x30
 8000c56:	d035      	beq.n	8000cc4 <HAL_CAN_IRQHandler+0x1b0>
 8000c58:	d821      	bhi.n	8000c9e <HAL_CAN_IRQHandler+0x18a>
 8000c5a:	2a10      	cmp	r2, #16
 8000c5c:	d029      	beq.n	8000cb2 <HAL_CAN_IRQHandler+0x19e>
 8000c5e:	2a20      	cmp	r2, #32
 8000c60:	d02c      	beq.n	8000cbc <HAL_CAN_IRQHandler+0x1a8>
    hcan->Instance->ESR &= ~(CAN_ESR_LEC);
 8000c62:	699a      	ldr	r2, [r3, #24]
 8000c64:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000c68:	619a      	str	r2, [r3, #24]
  if(hcan->ErrorCode != HAL_CAN_ERROR_NONE)
 8000c6a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000c6c:	b16a      	cbz	r2, 8000c8a <HAL_CAN_IRQHandler+0x176>
    hcan->Instance->MSR = CAN_MSR_ERRI; 
 8000c6e:	2204      	movs	r2, #4
 8000c70:	605a      	str	r2, [r3, #4]
    hcan->State = HAL_CAN_STATE_READY;
 8000c72:	2201      	movs	r2, #1
 8000c74:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    __HAL_CAN_DISABLE_IT(hcan, CAN_IT_EWG |
 8000c78:	695a      	ldr	r2, [r3, #20]
 8000c7a:	f422 420f 	bic.w	r2, r2, #36608	; 0x8f00
 8000c7e:	f022 025b 	bic.w	r2, r2, #91	; 0x5b
 8000c82:	615a      	str	r2, [r3, #20]
    HAL_CAN_ErrorCallback(hcan);
 8000c84:	4620      	mov	r0, r4
 8000c86:	f7ff ff43 	bl	8000b10 <HAL_CAN_ErrorCallback>
 8000c8a:	bd70      	pop	{r4, r5, r6, pc}
      hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8000c8c:	2332      	movs	r3, #50	; 0x32
 8000c8e:	e789      	b.n	8000ba4 <HAL_CAN_IRQHandler+0x90>
      hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 8000c90:	2362      	movs	r3, #98	; 0x62
 8000c92:	e787      	b.n	8000ba4 <HAL_CAN_IRQHandler+0x90>
      hcan->State = HAL_CAN_STATE_READY;
 8000c94:	2301      	movs	r3, #1
 8000c96:	e785      	b.n	8000ba4 <HAL_CAN_IRQHandler+0x90>
        errorcode |= HAL_CAN_ERROR_TXFAIL;
 8000c98:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 8000c9c:	e787      	b.n	8000bae <HAL_CAN_IRQHandler+0x9a>
    switch(tmp1)
 8000c9e:	2a50      	cmp	r2, #80	; 0x50
 8000ca0:	d014      	beq.n	8000ccc <HAL_CAN_IRQHandler+0x1b8>
 8000ca2:	2a60      	cmp	r2, #96	; 0x60
 8000ca4:	d016      	beq.n	8000cd4 <HAL_CAN_IRQHandler+0x1c0>
 8000ca6:	2a40      	cmp	r2, #64	; 0x40
 8000ca8:	d1db      	bne.n	8000c62 <HAL_CAN_IRQHandler+0x14e>
          hcan->ErrorCode |= HAL_CAN_ERROR_BR;
 8000caa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000cac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000cb0:	e002      	b.n	8000cb8 <HAL_CAN_IRQHandler+0x1a4>
          hcan->ErrorCode |= HAL_CAN_ERROR_STF;
 8000cb2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000cb4:	f042 0208 	orr.w	r2, r2, #8
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
 8000cb8:	6422      	str	r2, [r4, #64]	; 0x40
          break;
 8000cba:	e7d2      	b.n	8000c62 <HAL_CAN_IRQHandler+0x14e>
          hcan->ErrorCode |= HAL_CAN_ERROR_FOR;
 8000cbc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000cbe:	f042 0210 	orr.w	r2, r2, #16
 8000cc2:	e7f9      	b.n	8000cb8 <HAL_CAN_IRQHandler+0x1a4>
          hcan->ErrorCode |= HAL_CAN_ERROR_ACK;
 8000cc4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000cc6:	f042 0220 	orr.w	r2, r2, #32
 8000cca:	e7f5      	b.n	8000cb8 <HAL_CAN_IRQHandler+0x1a4>
          hcan->ErrorCode |= HAL_CAN_ERROR_BD;
 8000ccc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000cce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000cd2:	e7f1      	b.n	8000cb8 <HAL_CAN_IRQHandler+0x1a4>
          hcan->ErrorCode |= HAL_CAN_ERROR_CRC;
 8000cd4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000cd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000cda:	e7ed      	b.n	8000cb8 <HAL_CAN_IRQHandler+0x1a4>
 8000cdc:	04000003 	.word	0x04000003
 8000ce0:	08000300 	.word	0x08000300
 8000ce4:	10030000 	.word	0x10030000
 8000ce8:	00010519 	.word	0x00010519

08000cec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cec:	4a07      	ldr	r2, [pc, #28]	; (8000d0c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000cee:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cf0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000cf4:	041b      	lsls	r3, r3, #16
 8000cf6:	0c1b      	lsrs	r3, r3, #16
 8000cf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000cfc:	0200      	lsls	r0, r0, #8
 8000cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d02:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000d06:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000d08:	60d3      	str	r3, [r2, #12]
 8000d0a:	4770      	bx	lr
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d10:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d12:	b530      	push	{r4, r5, lr}
 8000d14:	68dc      	ldr	r4, [r3, #12]
 8000d16:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d1a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d1e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d20:	2b04      	cmp	r3, #4
 8000d22:	bf28      	it	cs
 8000d24:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d26:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	f04f 0501 	mov.w	r5, #1
 8000d2c:	fa05 f303 	lsl.w	r3, r5, r3
 8000d30:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d34:	bf8c      	ite	hi
 8000d36:	3c03      	subhi	r4, #3
 8000d38:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3a:	4019      	ands	r1, r3
 8000d3c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d3e:	fa05 f404 	lsl.w	r4, r5, r4
 8000d42:	3c01      	subs	r4, #1
 8000d44:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000d46:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	ea42 0201 	orr.w	r2, r2, r1
 8000d4c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d50:	bfaf      	iteee	ge
 8000d52:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d56:	f000 000f 	andlt.w	r0, r0, #15
 8000d5a:	4b06      	ldrlt	r3, [pc, #24]	; (8000d74 <HAL_NVIC_SetPriority+0x64>)
 8000d5c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5e:	bfa5      	ittet	ge
 8000d60:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000d64:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d66:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d68:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000d6c:	bd30      	pop	{r4, r5, pc}
 8000d6e:	bf00      	nop
 8000d70:	e000ed00 	.word	0xe000ed00
 8000d74:	e000ed14 	.word	0xe000ed14

08000d78 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000d78:	0942      	lsrs	r2, r0, #5
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	f000 001f 	and.w	r0, r0, #31
 8000d80:	fa03 f000 	lsl.w	r0, r3, r0
 8000d84:	4b01      	ldr	r3, [pc, #4]	; (8000d8c <HAL_NVIC_EnableIRQ+0x14>)
 8000d86:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000d8a:	4770      	bx	lr
 8000d8c:	e000e100 	.word	0xe000e100

08000d90 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d90:	3801      	subs	r0, #1
 8000d92:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d96:	d20a      	bcs.n	8000dae <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9a:	4a07      	ldr	r2, [pc, #28]	; (8000db8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9e:	21f0      	movs	r1, #240	; 0xf0
 8000da0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000dae:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000e010 	.word	0xe000e010
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000dbe:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000dc0:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000dc2:	bf0c      	ite	eq
 8000dc4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000dc8:	f022 0204 	bicne.w	r2, r2, #4
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	4770      	bx	lr
 8000dd0:	e000e010 	.word	0xe000e010

08000dd4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000dd4:	4770      	bx	lr

08000dd6 <HAL_SYSTICK_IRQHandler>:
{
 8000dd6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000dd8:	f7ff fffc 	bl	8000dd4 <HAL_SYSTICK_Callback>
 8000ddc:	bd08      	pop	{r3, pc}

08000dde <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dde:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d003      	beq.n	8000dee <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000de6:	2380      	movs	r3, #128	; 0x80
 8000de8:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000dea:	2001      	movs	r0, #1
 8000dec:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000dee:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000df0:	2305      	movs	r3, #5
 8000df2:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000df6:	6813      	ldr	r3, [r2, #0]
 8000df8:	f023 0301 	bic.w	r3, r3, #1
 8000dfc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000dfe:	2000      	movs	r0, #0
}
 8000e00:	4770      	bx	lr
	...

08000e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e08:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e0a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0c:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8000fb0 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e10:	4a65      	ldr	r2, [pc, #404]	; (8000fa8 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e12:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8000fb4 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e16:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e18:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000e1a:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e1e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000e20:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e24:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000e28:	45b6      	cmp	lr, r6
 8000e2a:	f040 80aa 	bne.w	8000f82 <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e2e:	684c      	ldr	r4, [r1, #4]
 8000e30:	f024 0710 	bic.w	r7, r4, #16
 8000e34:	2f02      	cmp	r7, #2
 8000e36:	d116      	bne.n	8000e66 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000e38:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000e3c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e40:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000e44:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e48:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000e4c:	f04f 0c0f 	mov.w	ip, #15
 8000e50:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000e54:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e58:	690d      	ldr	r5, [r1, #16]
 8000e5a:	fa05 f50b 	lsl.w	r5, r5, fp
 8000e5e:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000e62:	f8ca 5020 	str.w	r5, [sl, #32]
 8000e66:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e6a:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000e6c:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e70:	fa05 f50a 	lsl.w	r5, r5, sl
 8000e74:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e76:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e7a:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e7e:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e82:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e84:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e88:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000e8a:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e8e:	d811      	bhi.n	8000eb4 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000e90:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e92:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e96:	68cf      	ldr	r7, [r1, #12]
 8000e98:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000e9c:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000ea0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000ea2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ea4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ea8:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000eac:	409f      	lsls	r7, r3
 8000eae:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000eb2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000eb4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eb6:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eb8:	688f      	ldr	r7, [r1, #8]
 8000eba:	fa07 f70a 	lsl.w	r7, r7, sl
 8000ebe:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000ec0:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ec2:	00e5      	lsls	r5, r4, #3
 8000ec4:	d55d      	bpl.n	8000f82 <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec6:	f04f 0b00 	mov.w	fp, #0
 8000eca:	f8cd b00c 	str.w	fp, [sp, #12]
 8000ece:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ed2:	4d36      	ldr	r5, [pc, #216]	; (8000fac <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed4:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000ed8:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000edc:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000ee0:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000ee4:	9703      	str	r7, [sp, #12]
 8000ee6:	9f03      	ldr	r7, [sp, #12]
 8000ee8:	f023 0703 	bic.w	r7, r3, #3
 8000eec:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000ef0:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ef4:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000ef8:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000efc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000f00:	f04f 0e0f 	mov.w	lr, #15
 8000f04:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f08:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f0a:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f0e:	d03f      	beq.n	8000f90 <HAL_GPIO_Init+0x18c>
 8000f10:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f14:	42a8      	cmp	r0, r5
 8000f16:	d03d      	beq.n	8000f94 <HAL_GPIO_Init+0x190>
 8000f18:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f1c:	42a8      	cmp	r0, r5
 8000f1e:	d03b      	beq.n	8000f98 <HAL_GPIO_Init+0x194>
 8000f20:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f24:	42a8      	cmp	r0, r5
 8000f26:	d039      	beq.n	8000f9c <HAL_GPIO_Init+0x198>
 8000f28:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f2c:	42a8      	cmp	r0, r5
 8000f2e:	d037      	beq.n	8000fa0 <HAL_GPIO_Init+0x19c>
 8000f30:	4548      	cmp	r0, r9
 8000f32:	d037      	beq.n	8000fa4 <HAL_GPIO_Init+0x1a0>
 8000f34:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000f38:	42a8      	cmp	r0, r5
 8000f3a:	bf14      	ite	ne
 8000f3c:	2507      	movne	r5, #7
 8000f3e:	2506      	moveq	r5, #6
 8000f40:	fa05 f50c 	lsl.w	r5, r5, ip
 8000f44:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f48:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000f4a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000f4c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f4e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000f52:	bf0c      	ite	eq
 8000f54:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000f56:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000f58:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000f5a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f5c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000f60:	bf0c      	ite	eq
 8000f62:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000f64:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000f66:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f68:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f6a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000f6e:	bf0c      	ite	eq
 8000f70:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000f72:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000f74:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000f76:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f78:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000f7a:	bf54      	ite	pl
 8000f7c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000f7e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000f80:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f82:	3301      	adds	r3, #1
 8000f84:	2b10      	cmp	r3, #16
 8000f86:	f47f af48 	bne.w	8000e1a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000f8a:	b005      	add	sp, #20
 8000f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f90:	465d      	mov	r5, fp
 8000f92:	e7d5      	b.n	8000f40 <HAL_GPIO_Init+0x13c>
 8000f94:	2501      	movs	r5, #1
 8000f96:	e7d3      	b.n	8000f40 <HAL_GPIO_Init+0x13c>
 8000f98:	2502      	movs	r5, #2
 8000f9a:	e7d1      	b.n	8000f40 <HAL_GPIO_Init+0x13c>
 8000f9c:	2503      	movs	r5, #3
 8000f9e:	e7cf      	b.n	8000f40 <HAL_GPIO_Init+0x13c>
 8000fa0:	2504      	movs	r5, #4
 8000fa2:	e7cd      	b.n	8000f40 <HAL_GPIO_Init+0x13c>
 8000fa4:	2505      	movs	r5, #5
 8000fa6:	e7cb      	b.n	8000f40 <HAL_GPIO_Init+0x13c>
 8000fa8:	40013c00 	.word	0x40013c00
 8000fac:	40020000 	.word	0x40020000
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40021400 	.word	0x40021400

08000fb8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	9301      	str	r3, [sp, #4]
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000fc0:	4c18      	ldr	r4, [pc, #96]	; (8001024 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fc4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000fc8:	641a      	str	r2, [r3, #64]	; 0x40
 8000fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd0:	9301      	str	r3, [sp, #4]
 8000fd2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000fd4:	4b14      	ldr	r3, [pc, #80]	; (8001028 <HAL_PWREx_EnableOverDrive+0x70>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000fda:	f7ff fad1 	bl	8000580 <HAL_GetTick>
 8000fde:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000fe0:	6863      	ldr	r3, [r4, #4]
 8000fe2:	03da      	lsls	r2, r3, #15
 8000fe4:	d50b      	bpl.n	8000ffe <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000fe8:	4c0e      	ldr	r4, [pc, #56]	; (8001024 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000fea:	2201      	movs	r2, #1
 8000fec:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000fee:	f7ff fac7 	bl	8000580 <HAL_GetTick>
 8000ff2:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000ff4:	6863      	ldr	r3, [r4, #4]
 8000ff6:	039b      	lsls	r3, r3, #14
 8000ff8:	d50a      	bpl.n	8001010 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	e006      	b.n	800100c <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000ffe:	f7ff fabf 	bl	8000580 <HAL_GetTick>
 8001002:	1b40      	subs	r0, r0, r5
 8001004:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001008:	d9ea      	bls.n	8000fe0 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 800100a:	2003      	movs	r0, #3
}
 800100c:	b003      	add	sp, #12
 800100e:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001010:	f7ff fab6 	bl	8000580 <HAL_GetTick>
 8001014:	1b40      	subs	r0, r0, r5
 8001016:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800101a:	d9eb      	bls.n	8000ff4 <HAL_PWREx_EnableOverDrive+0x3c>
 800101c:	e7f5      	b.n	800100a <HAL_PWREx_EnableOverDrive+0x52>
 800101e:	bf00      	nop
 8001020:	40023800 	.word	0x40023800
 8001024:	40007000 	.word	0x40007000
 8001028:	420e0040 	.word	0x420e0040
 800102c:	420e0044 	.word	0x420e0044

08001030 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001034:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001036:	4604      	mov	r4, r0
 8001038:	b910      	cbnz	r0, 8001040 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 800103a:	2001      	movs	r0, #1
 800103c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001040:	4b44      	ldr	r3, [pc, #272]	; (8001154 <HAL_RCC_ClockConfig+0x124>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	f002 020f 	and.w	r2, r2, #15
 8001048:	428a      	cmp	r2, r1
 800104a:	d328      	bcc.n	800109e <HAL_RCC_ClockConfig+0x6e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800104c:	6821      	ldr	r1, [r4, #0]
 800104e:	078f      	lsls	r7, r1, #30
 8001050:	d42d      	bmi.n	80010ae <HAL_RCC_ClockConfig+0x7e>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001052:	07c8      	lsls	r0, r1, #31
 8001054:	d440      	bmi.n	80010d8 <HAL_RCC_ClockConfig+0xa8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001056:	4b3f      	ldr	r3, [pc, #252]	; (8001154 <HAL_RCC_ClockConfig+0x124>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	f002 020f 	and.w	r2, r2, #15
 800105e:	4295      	cmp	r5, r2
 8001060:	d366      	bcc.n	8001130 <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001062:	6822      	ldr	r2, [r4, #0]
 8001064:	0751      	lsls	r1, r2, #29
 8001066:	d46c      	bmi.n	8001142 <HAL_RCC_ClockConfig+0x112>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001068:	0713      	lsls	r3, r2, #28
 800106a:	d507      	bpl.n	800107c <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800106c:	4a3a      	ldr	r2, [pc, #232]	; (8001158 <HAL_RCC_ClockConfig+0x128>)
 800106e:	6921      	ldr	r1, [r4, #16]
 8001070:	6893      	ldr	r3, [r2, #8]
 8001072:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001076:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800107a:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800107c:	f000 f898 	bl	80011b0 <HAL_RCC_GetSysClockFreq>
 8001080:	4b35      	ldr	r3, [pc, #212]	; (8001158 <HAL_RCC_ClockConfig+0x128>)
 8001082:	4a36      	ldr	r2, [pc, #216]	; (800115c <HAL_RCC_ClockConfig+0x12c>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800108a:	5cd3      	ldrb	r3, [r2, r3]
 800108c:	40d8      	lsrs	r0, r3
 800108e:	4b34      	ldr	r3, [pc, #208]	; (8001160 <HAL_RCC_ClockConfig+0x130>)
 8001090:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001092:	2000      	movs	r0, #0
 8001094:	f7ff fa3e 	bl	8000514 <HAL_InitTick>

  return HAL_OK;
 8001098:	2000      	movs	r0, #0
 800109a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800109e:	b2ca      	uxtb	r2, r1
 80010a0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 030f 	and.w	r3, r3, #15
 80010a8:	4299      	cmp	r1, r3
 80010aa:	d1c6      	bne.n	800103a <HAL_RCC_ClockConfig+0xa>
 80010ac:	e7ce      	b.n	800104c <HAL_RCC_ClockConfig+0x1c>
 80010ae:	4b2a      	ldr	r3, [pc, #168]	; (8001158 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010b0:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010b4:	bf1e      	ittt	ne
 80010b6:	689a      	ldrne	r2, [r3, #8]
 80010b8:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80010bc:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010be:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010c0:	bf42      	ittt	mi
 80010c2:	689a      	ldrmi	r2, [r3, #8]
 80010c4:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80010c8:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010ca:	689a      	ldr	r2, [r3, #8]
 80010cc:	68a0      	ldr	r0, [r4, #8]
 80010ce:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80010d2:	4302      	orrs	r2, r0
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	e7bc      	b.n	8001052 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010d8:	6862      	ldr	r2, [r4, #4]
 80010da:	4b1f      	ldr	r3, [pc, #124]	; (8001158 <HAL_RCC_ClockConfig+0x128>)
 80010dc:	2a01      	cmp	r2, #1
 80010de:	d11d      	bne.n	800111c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e6:	d0a8      	beq.n	800103a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010e8:	4e1b      	ldr	r6, [pc, #108]	; (8001158 <HAL_RCC_ClockConfig+0x128>)
 80010ea:	68b3      	ldr	r3, [r6, #8]
 80010ec:	f023 0303 	bic.w	r3, r3, #3
 80010f0:	4313      	orrs	r3, r2
 80010f2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80010f4:	f7ff fa44 	bl	8000580 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010f8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80010fc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010fe:	68b3      	ldr	r3, [r6, #8]
 8001100:	6862      	ldr	r2, [r4, #4]
 8001102:	f003 030c 	and.w	r3, r3, #12
 8001106:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800110a:	d0a4      	beq.n	8001056 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800110c:	f7ff fa38 	bl	8000580 <HAL_GetTick>
 8001110:	1bc0      	subs	r0, r0, r7
 8001112:	4540      	cmp	r0, r8
 8001114:	d9f3      	bls.n	80010fe <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001116:	2003      	movs	r0, #3
}
 8001118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800111c:	1e91      	subs	r1, r2, #2
 800111e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001120:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001122:	d802      	bhi.n	800112a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001124:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001128:	e7dd      	b.n	80010e6 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800112a:	f013 0f02 	tst.w	r3, #2
 800112e:	e7da      	b.n	80010e6 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001130:	b2ea      	uxtb	r2, r5
 8001132:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 030f 	and.w	r3, r3, #15
 800113a:	429d      	cmp	r5, r3
 800113c:	f47f af7d 	bne.w	800103a <HAL_RCC_ClockConfig+0xa>
 8001140:	e78f      	b.n	8001062 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001142:	4905      	ldr	r1, [pc, #20]	; (8001158 <HAL_RCC_ClockConfig+0x128>)
 8001144:	68e0      	ldr	r0, [r4, #12]
 8001146:	688b      	ldr	r3, [r1, #8]
 8001148:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800114c:	4303      	orrs	r3, r0
 800114e:	608b      	str	r3, [r1, #8]
 8001150:	e78a      	b.n	8001068 <HAL_RCC_ClockConfig+0x38>
 8001152:	bf00      	nop
 8001154:	40023c00 	.word	0x40023c00
 8001158:	40023800 	.word	0x40023800
 800115c:	080026ac 	.word	0x080026ac
 8001160:	20000000 	.word	0x20000000

08001164 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001164:	4b01      	ldr	r3, [pc, #4]	; (800116c <HAL_RCC_GetHCLKFreq+0x8>)
 8001166:	6818      	ldr	r0, [r3, #0]
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20000000 	.word	0x20000000

08001170 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001172:	4a05      	ldr	r2, [pc, #20]	; (8001188 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800117a:	5cd3      	ldrb	r3, [r2, r3]
 800117c:	4a03      	ldr	r2, [pc, #12]	; (800118c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800117e:	6810      	ldr	r0, [r2, #0]
}
 8001180:	40d8      	lsrs	r0, r3
 8001182:	4770      	bx	lr
 8001184:	40023800 	.word	0x40023800
 8001188:	080026bc 	.word	0x080026bc
 800118c:	20000000 	.word	0x20000000

08001190 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001190:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001192:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800119a:	5cd3      	ldrb	r3, [r2, r3]
 800119c:	4a03      	ldr	r2, [pc, #12]	; (80011ac <HAL_RCC_GetPCLK2Freq+0x1c>)
 800119e:	6810      	ldr	r0, [r2, #0]
}
 80011a0:	40d8      	lsrs	r0, r3
 80011a2:	4770      	bx	lr
 80011a4:	40023800 	.word	0x40023800
 80011a8:	080026bc 	.word	0x080026bc
 80011ac:	20000000 	.word	0x20000000

080011b0 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011b0:	491c      	ldr	r1, [pc, #112]	; (8001224 <HAL_RCC_GetSysClockFreq+0x74>)
{
 80011b2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011b4:	688b      	ldr	r3, [r1, #8]
 80011b6:	f003 030c 	and.w	r3, r3, #12
 80011ba:	2b08      	cmp	r3, #8
 80011bc:	d003      	beq.n	80011c6 <HAL_RCC_GetSysClockFreq+0x16>
 80011be:	2b0c      	cmp	r3, #12
 80011c0:	d01a      	beq.n	80011f8 <HAL_RCC_GetSysClockFreq+0x48>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80011c2:	4819      	ldr	r0, [pc, #100]	; (8001228 <HAL_RCC_GetSysClockFreq+0x78>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80011c4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011c6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011c8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011ca:	6849      	ldr	r1, [r1, #4]
 80011cc:	4816      	ldr	r0, [pc, #88]	; (8001228 <HAL_RCC_GetSysClockFreq+0x78>)
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011ce:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011d2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80011d6:	bf18      	it	ne
 80011d8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011da:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011de:	fba1 0100 	umull	r0, r1, r1, r0
 80011e2:	f7ff f80f 	bl	8000204 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80011e6:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <HAL_RCC_GetSysClockFreq+0x74>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80011ee:	3301      	adds	r3, #1
 80011f0:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllr;
 80011f2:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80011f6:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011f8:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80011fa:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011fc:	6849      	ldr	r1, [r1, #4]
 80011fe:	480a      	ldr	r0, [pc, #40]	; (8001228 <HAL_RCC_GetSysClockFreq+0x78>)
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001200:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001204:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001208:	bf18      	it	ne
 800120a:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800120c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001210:	fba1 0100 	umull	r0, r1, r1, r0
 8001214:	f7fe fff6 	bl	8000204 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001218:	4b02      	ldr	r3, [pc, #8]	; (8001224 <HAL_RCC_GetSysClockFreq+0x74>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8001220:	e7e7      	b.n	80011f2 <HAL_RCC_GetSysClockFreq+0x42>
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800
 8001228:	00f42400 	.word	0x00f42400

0800122c <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800122c:	6803      	ldr	r3, [r0, #0]
{
 800122e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001230:	07de      	lsls	r6, r3, #31
{
 8001232:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001234:	d43b      	bmi.n	80012ae <HAL_RCC_OscConfig+0x82>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001236:	6823      	ldr	r3, [r4, #0]
 8001238:	079d      	lsls	r5, r3, #30
 800123a:	f100 8092 	bmi.w	8001362 <HAL_RCC_OscConfig+0x136>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800123e:	6823      	ldr	r3, [r4, #0]
 8001240:	071e      	lsls	r6, r3, #28
 8001242:	f100 80dc 	bmi.w	80013fe <HAL_RCC_OscConfig+0x1d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001246:	6823      	ldr	r3, [r4, #0]
 8001248:	075d      	lsls	r5, r3, #29
 800124a:	d52a      	bpl.n	80012a2 <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800124c:	2300      	movs	r3, #0
 800124e:	9301      	str	r3, [sp, #4]
 8001250:	4b93      	ldr	r3, [pc, #588]	; (80014a0 <HAL_RCC_OscConfig+0x274>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001252:	4d94      	ldr	r5, [pc, #592]	; (80014a4 <HAL_RCC_OscConfig+0x278>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001254:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001256:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800125a:	641a      	str	r2, [r3, #64]	; 0x40
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001262:	9301      	str	r3, [sp, #4]
 8001264:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001266:	682b      	ldr	r3, [r5, #0]
 8001268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800126c:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800126e:	f7ff f987 	bl	8000580 <HAL_GetTick>
 8001272:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001274:	682b      	ldr	r3, [r5, #0]
 8001276:	05da      	lsls	r2, r3, #23
 8001278:	f140 80e3 	bpl.w	8001442 <HAL_RCC_OscConfig+0x216>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800127c:	68a3      	ldr	r3, [r4, #8]
 800127e:	4d88      	ldr	r5, [pc, #544]	; (80014a0 <HAL_RCC_OscConfig+0x274>)
 8001280:	2b01      	cmp	r3, #1
 8001282:	f040 80e5 	bne.w	8001450 <HAL_RCC_OscConfig+0x224>
 8001286:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800128e:	f7ff f977 	bl	8000580 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001292:	4d83      	ldr	r5, [pc, #524]	; (80014a0 <HAL_RCC_OscConfig+0x274>)
      tickstart = HAL_GetTick();
 8001294:	4606      	mov	r6, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001296:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800129a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800129c:	079b      	lsls	r3, r3, #30
 800129e:	f140 80f8 	bpl.w	8001492 <HAL_RCC_OscConfig+0x266>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012a2:	69a2      	ldr	r2, [r4, #24]
 80012a4:	2a00      	cmp	r2, #0
 80012a6:	f040 8103 	bne.w	80014b0 <HAL_RCC_OscConfig+0x284>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80012aa:	2000      	movs	r0, #0
 80012ac:	e01e      	b.n	80012ec <HAL_RCC_OscConfig+0xc0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80012ae:	4b7c      	ldr	r3, [pc, #496]	; (80014a0 <HAL_RCC_OscConfig+0x274>)
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	f002 020c 	and.w	r2, r2, #12
 80012b6:	2a04      	cmp	r2, #4
 80012b8:	d010      	beq.n	80012dc <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80012c0:	2a08      	cmp	r2, #8
 80012c2:	d102      	bne.n	80012ca <HAL_RCC_OscConfig+0x9e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	0258      	lsls	r0, r3, #9
 80012c8:	d408      	bmi.n	80012dc <HAL_RCC_OscConfig+0xb0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012ca:	4b75      	ldr	r3, [pc, #468]	; (80014a0 <HAL_RCC_OscConfig+0x274>)
 80012cc:	689a      	ldr	r2, [r3, #8]
 80012ce:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80012d2:	2a0c      	cmp	r2, #12
 80012d4:	d10c      	bne.n	80012f0 <HAL_RCC_OscConfig+0xc4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	0251      	lsls	r1, r2, #9
 80012da:	d509      	bpl.n	80012f0 <HAL_RCC_OscConfig+0xc4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012dc:	4b70      	ldr	r3, [pc, #448]	; (80014a0 <HAL_RCC_OscConfig+0x274>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	039a      	lsls	r2, r3, #14
 80012e2:	d5a8      	bpl.n	8001236 <HAL_RCC_OscConfig+0xa>
 80012e4:	6863      	ldr	r3, [r4, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1a5      	bne.n	8001236 <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 80012ea:	2001      	movs	r0, #1
}
 80012ec:	b003      	add	sp, #12
 80012ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f0:	6862      	ldr	r2, [r4, #4]
 80012f2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80012f6:	d111      	bne.n	800131c <HAL_RCC_OscConfig+0xf0>
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80012fe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001300:	f7ff f93e 	bl	8000580 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001304:	4d66      	ldr	r5, [pc, #408]	; (80014a0 <HAL_RCC_OscConfig+0x274>)
        tickstart = HAL_GetTick();
 8001306:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001308:	682b      	ldr	r3, [r5, #0]
 800130a:	039b      	lsls	r3, r3, #14
 800130c:	d493      	bmi.n	8001236 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800130e:	f7ff f937 	bl	8000580 <HAL_GetTick>
 8001312:	1b80      	subs	r0, r0, r6
 8001314:	2864      	cmp	r0, #100	; 0x64
 8001316:	d9f7      	bls.n	8001308 <HAL_RCC_OscConfig+0xdc>
            return HAL_TIMEOUT;
 8001318:	2003      	movs	r0, #3
 800131a:	e7e7      	b.n	80012ec <HAL_RCC_OscConfig+0xc0>
 800131c:	4d60      	ldr	r5, [pc, #384]	; (80014a0 <HAL_RCC_OscConfig+0x274>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800131e:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001322:	682b      	ldr	r3, [r5, #0]
 8001324:	d107      	bne.n	8001336 <HAL_RCC_OscConfig+0x10a>
 8001326:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800132a:	602b      	str	r3, [r5, #0]
 800132c:	682b      	ldr	r3, [r5, #0]
 800132e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001332:	602b      	str	r3, [r5, #0]
 8001334:	e7e4      	b.n	8001300 <HAL_RCC_OscConfig+0xd4>
 8001336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800133a:	602b      	str	r3, [r5, #0]
 800133c:	682b      	ldr	r3, [r5, #0]
 800133e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001342:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001344:	2a00      	cmp	r2, #0
 8001346:	d1db      	bne.n	8001300 <HAL_RCC_OscConfig+0xd4>
        tickstart = HAL_GetTick();
 8001348:	f7ff f91a 	bl	8000580 <HAL_GetTick>
 800134c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800134e:	682b      	ldr	r3, [r5, #0]
 8001350:	039f      	lsls	r7, r3, #14
 8001352:	f57f af70 	bpl.w	8001236 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001356:	f7ff f913 	bl	8000580 <HAL_GetTick>
 800135a:	1b80      	subs	r0, r0, r6
 800135c:	2864      	cmp	r0, #100	; 0x64
 800135e:	d9f6      	bls.n	800134e <HAL_RCC_OscConfig+0x122>
 8001360:	e7da      	b.n	8001318 <HAL_RCC_OscConfig+0xec>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001362:	4b4f      	ldr	r3, [pc, #316]	; (80014a0 <HAL_RCC_OscConfig+0x274>)
 8001364:	689a      	ldr	r2, [r3, #8]
 8001366:	f012 0f0c 	tst.w	r2, #12
 800136a:	d010      	beq.n	800138e <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800136c:	689a      	ldr	r2, [r3, #8]
 800136e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001372:	2a08      	cmp	r2, #8
 8001374:	d102      	bne.n	800137c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	0258      	lsls	r0, r3, #9
 800137a:	d508      	bpl.n	800138e <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800137c:	4a48      	ldr	r2, [pc, #288]	; (80014a0 <HAL_RCC_OscConfig+0x274>)
 800137e:	6893      	ldr	r3, [r2, #8]
 8001380:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001384:	2b0c      	cmp	r3, #12
 8001386:	d111      	bne.n	80013ac <HAL_RCC_OscConfig+0x180>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001388:	6853      	ldr	r3, [r2, #4]
 800138a:	0259      	lsls	r1, r3, #9
 800138c:	d40e      	bmi.n	80013ac <HAL_RCC_OscConfig+0x180>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800138e:	4b44      	ldr	r3, [pc, #272]	; (80014a0 <HAL_RCC_OscConfig+0x274>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	0792      	lsls	r2, r2, #30
 8001394:	d502      	bpl.n	800139c <HAL_RCC_OscConfig+0x170>
 8001396:	68e2      	ldr	r2, [r4, #12]
 8001398:	2a01      	cmp	r2, #1
 800139a:	d1a6      	bne.n	80012ea <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	6921      	ldr	r1, [r4, #16]
 80013a0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80013a4:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80013a8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013aa:	e748      	b.n	800123e <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013ac:	68e2      	ldr	r2, [r4, #12]
 80013ae:	4b3e      	ldr	r3, [pc, #248]	; (80014a8 <HAL_RCC_OscConfig+0x27c>)
 80013b0:	b1b2      	cbz	r2, 80013e0 <HAL_RCC_OscConfig+0x1b4>
        __HAL_RCC_HSI_ENABLE();
 80013b2:	2201      	movs	r2, #1
 80013b4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013b6:	f7ff f8e3 	bl	8000580 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ba:	4d39      	ldr	r5, [pc, #228]	; (80014a0 <HAL_RCC_OscConfig+0x274>)
        tickstart = HAL_GetTick();
 80013bc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013be:	682b      	ldr	r3, [r5, #0]
 80013c0:	079b      	lsls	r3, r3, #30
 80013c2:	d507      	bpl.n	80013d4 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c4:	682b      	ldr	r3, [r5, #0]
 80013c6:	6922      	ldr	r2, [r4, #16]
 80013c8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80013cc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80013d0:	602b      	str	r3, [r5, #0]
 80013d2:	e734      	b.n	800123e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d4:	f7ff f8d4 	bl	8000580 <HAL_GetTick>
 80013d8:	1b80      	subs	r0, r0, r6
 80013da:	2802      	cmp	r0, #2
 80013dc:	d9ef      	bls.n	80013be <HAL_RCC_OscConfig+0x192>
 80013de:	e79b      	b.n	8001318 <HAL_RCC_OscConfig+0xec>
        __HAL_RCC_HSI_DISABLE();
 80013e0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013e2:	f7ff f8cd 	bl	8000580 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e6:	4d2e      	ldr	r5, [pc, #184]	; (80014a0 <HAL_RCC_OscConfig+0x274>)
        tickstart = HAL_GetTick();
 80013e8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ea:	682b      	ldr	r3, [r5, #0]
 80013ec:	079f      	lsls	r7, r3, #30
 80013ee:	f57f af26 	bpl.w	800123e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f2:	f7ff f8c5 	bl	8000580 <HAL_GetTick>
 80013f6:	1b80      	subs	r0, r0, r6
 80013f8:	2802      	cmp	r0, #2
 80013fa:	d9f6      	bls.n	80013ea <HAL_RCC_OscConfig+0x1be>
 80013fc:	e78c      	b.n	8001318 <HAL_RCC_OscConfig+0xec>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013fe:	6962      	ldr	r2, [r4, #20]
 8001400:	4b2a      	ldr	r3, [pc, #168]	; (80014ac <HAL_RCC_OscConfig+0x280>)
 8001402:	b17a      	cbz	r2, 8001424 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_LSI_ENABLE();
 8001404:	2201      	movs	r2, #1
 8001406:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001408:	f7ff f8ba 	bl	8000580 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800140c:	4d24      	ldr	r5, [pc, #144]	; (80014a0 <HAL_RCC_OscConfig+0x274>)
      tickstart = HAL_GetTick();
 800140e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001410:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001412:	0798      	lsls	r0, r3, #30
 8001414:	f53f af17 	bmi.w	8001246 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001418:	f7ff f8b2 	bl	8000580 <HAL_GetTick>
 800141c:	1b80      	subs	r0, r0, r6
 800141e:	2802      	cmp	r0, #2
 8001420:	d9f6      	bls.n	8001410 <HAL_RCC_OscConfig+0x1e4>
 8001422:	e779      	b.n	8001318 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_LSI_DISABLE();
 8001424:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001426:	f7ff f8ab 	bl	8000580 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800142a:	4d1d      	ldr	r5, [pc, #116]	; (80014a0 <HAL_RCC_OscConfig+0x274>)
      tickstart = HAL_GetTick();
 800142c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800142e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001430:	0799      	lsls	r1, r3, #30
 8001432:	f57f af08 	bpl.w	8001246 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001436:	f7ff f8a3 	bl	8000580 <HAL_GetTick>
 800143a:	1b80      	subs	r0, r0, r6
 800143c:	2802      	cmp	r0, #2
 800143e:	d9f6      	bls.n	800142e <HAL_RCC_OscConfig+0x202>
 8001440:	e76a      	b.n	8001318 <HAL_RCC_OscConfig+0xec>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001442:	f7ff f89d 	bl	8000580 <HAL_GetTick>
 8001446:	1b80      	subs	r0, r0, r6
 8001448:	2802      	cmp	r0, #2
 800144a:	f67f af13 	bls.w	8001274 <HAL_RCC_OscConfig+0x48>
 800144e:	e763      	b.n	8001318 <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001450:	2b05      	cmp	r3, #5
 8001452:	d104      	bne.n	800145e <HAL_RCC_OscConfig+0x232>
 8001454:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001456:	f043 0304 	orr.w	r3, r3, #4
 800145a:	672b      	str	r3, [r5, #112]	; 0x70
 800145c:	e713      	b.n	8001286 <HAL_RCC_OscConfig+0x5a>
 800145e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001460:	f022 0201 	bic.w	r2, r2, #1
 8001464:	672a      	str	r2, [r5, #112]	; 0x70
 8001466:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001468:	f022 0204 	bic.w	r2, r2, #4
 800146c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800146e:	2b00      	cmp	r3, #0
 8001470:	f47f af0d 	bne.w	800128e <HAL_RCC_OscConfig+0x62>
      tickstart = HAL_GetTick();
 8001474:	f7ff f884 	bl	8000580 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001478:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800147c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800147e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001480:	0798      	lsls	r0, r3, #30
 8001482:	f57f af0e 	bpl.w	80012a2 <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001486:	f7ff f87b 	bl	8000580 <HAL_GetTick>
 800148a:	1b80      	subs	r0, r0, r6
 800148c:	42b8      	cmp	r0, r7
 800148e:	d9f6      	bls.n	800147e <HAL_RCC_OscConfig+0x252>
 8001490:	e742      	b.n	8001318 <HAL_RCC_OscConfig+0xec>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001492:	f7ff f875 	bl	8000580 <HAL_GetTick>
 8001496:	1b80      	subs	r0, r0, r6
 8001498:	42b8      	cmp	r0, r7
 800149a:	f67f aefe 	bls.w	800129a <HAL_RCC_OscConfig+0x6e>
 800149e:	e73b      	b.n	8001318 <HAL_RCC_OscConfig+0xec>
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40007000 	.word	0x40007000
 80014a8:	42470000 	.word	0x42470000
 80014ac:	42470e80 	.word	0x42470e80
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014b0:	4d23      	ldr	r5, [pc, #140]	; (8001540 <HAL_RCC_OscConfig+0x314>)
 80014b2:	68ab      	ldr	r3, [r5, #8]
 80014b4:	f003 030c 	and.w	r3, r3, #12
 80014b8:	2b08      	cmp	r3, #8
 80014ba:	f43f af16 	beq.w	80012ea <HAL_RCC_OscConfig+0xbe>
 80014be:	4e21      	ldr	r6, [pc, #132]	; (8001544 <HAL_RCC_OscConfig+0x318>)
 80014c0:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014c2:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80014c4:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014c6:	d12d      	bne.n	8001524 <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 80014c8:	f7ff f85a 	bl	8000580 <HAL_GetTick>
 80014cc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ce:	682b      	ldr	r3, [r5, #0]
 80014d0:	0199      	lsls	r1, r3, #6
 80014d2:	d421      	bmi.n	8001518 <HAL_RCC_OscConfig+0x2ec>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014d4:	6a22      	ldr	r2, [r4, #32]
 80014d6:	69e3      	ldr	r3, [r4, #28]
 80014d8:	4313      	orrs	r3, r2
 80014da:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80014dc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80014e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80014e2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80014e6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80014e8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80014ec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ee:	4c14      	ldr	r4, [pc, #80]	; (8001540 <HAL_RCC_OscConfig+0x314>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014f0:	0852      	lsrs	r2, r2, #1
 80014f2:	3a01      	subs	r2, #1
 80014f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80014f8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80014fa:	2301      	movs	r3, #1
 80014fc:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80014fe:	f7ff f83f 	bl	8000580 <HAL_GetTick>
 8001502:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001504:	6823      	ldr	r3, [r4, #0]
 8001506:	019a      	lsls	r2, r3, #6
 8001508:	f53f aecf 	bmi.w	80012aa <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800150c:	f7ff f838 	bl	8000580 <HAL_GetTick>
 8001510:	1b40      	subs	r0, r0, r5
 8001512:	2802      	cmp	r0, #2
 8001514:	d9f6      	bls.n	8001504 <HAL_RCC_OscConfig+0x2d8>
 8001516:	e6ff      	b.n	8001318 <HAL_RCC_OscConfig+0xec>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001518:	f7ff f832 	bl	8000580 <HAL_GetTick>
 800151c:	1bc0      	subs	r0, r0, r7
 800151e:	2802      	cmp	r0, #2
 8001520:	d9d5      	bls.n	80014ce <HAL_RCC_OscConfig+0x2a2>
 8001522:	e6f9      	b.n	8001318 <HAL_RCC_OscConfig+0xec>
        tickstart = HAL_GetTick();
 8001524:	f7ff f82c 	bl	8000580 <HAL_GetTick>
 8001528:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800152a:	682b      	ldr	r3, [r5, #0]
 800152c:	019b      	lsls	r3, r3, #6
 800152e:	f57f aebc 	bpl.w	80012aa <HAL_RCC_OscConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001532:	f7ff f825 	bl	8000580 <HAL_GetTick>
 8001536:	1b00      	subs	r0, r0, r4
 8001538:	2802      	cmp	r0, #2
 800153a:	d9f6      	bls.n	800152a <HAL_RCC_OscConfig+0x2fe>
 800153c:	e6ec      	b.n	8001318 <HAL_RCC_OscConfig+0xec>
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800
 8001544:	42470060 	.word	0x42470060

08001548 <HAL_TIM_PeriodElapsedCallback>:
 8001548:	4770      	bx	lr

0800154a <HAL_TIM_OC_DelayElapsedCallback>:
 800154a:	4770      	bx	lr

0800154c <HAL_TIM_IC_CaptureCallback>:
 800154c:	4770      	bx	lr

0800154e <HAL_TIM_PWM_PulseFinishedCallback>:
 800154e:	4770      	bx	lr

08001550 <HAL_TIM_TriggerCallback>:
 8001550:	4770      	bx	lr

08001552 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001552:	6803      	ldr	r3, [r0, #0]
 8001554:	691a      	ldr	r2, [r3, #16]
 8001556:	0791      	lsls	r1, r2, #30
{
 8001558:	b510      	push	{r4, lr}
 800155a:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800155c:	d50e      	bpl.n	800157c <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800155e:	68da      	ldr	r2, [r3, #12]
 8001560:	0792      	lsls	r2, r2, #30
 8001562:	d50b      	bpl.n	800157c <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001564:	f06f 0202 	mvn.w	r2, #2
 8001568:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800156a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800156c:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800156e:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001570:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001572:	d077      	beq.n	8001664 <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001574:	f7ff ffea 	bl	800154c <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001578:	2300      	movs	r3, #0
 800157a:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800157c:	6823      	ldr	r3, [r4, #0]
 800157e:	691a      	ldr	r2, [r3, #16]
 8001580:	0750      	lsls	r0, r2, #29
 8001582:	d510      	bpl.n	80015a6 <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001584:	68da      	ldr	r2, [r3, #12]
 8001586:	0751      	lsls	r1, r2, #29
 8001588:	d50d      	bpl.n	80015a6 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800158a:	f06f 0204 	mvn.w	r2, #4
 800158e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001590:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001592:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001594:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001598:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800159a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800159c:	d068      	beq.n	8001670 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800159e:	f7ff ffd5 	bl	800154c <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015a2:	2300      	movs	r3, #0
 80015a4:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80015a6:	6823      	ldr	r3, [r4, #0]
 80015a8:	691a      	ldr	r2, [r3, #16]
 80015aa:	0712      	lsls	r2, r2, #28
 80015ac:	d50f      	bpl.n	80015ce <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80015ae:	68da      	ldr	r2, [r3, #12]
 80015b0:	0710      	lsls	r0, r2, #28
 80015b2:	d50c      	bpl.n	80015ce <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80015b4:	f06f 0208 	mvn.w	r2, #8
 80015b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015ba:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015bc:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015be:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015c0:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80015c2:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015c4:	d05a      	beq.n	800167c <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80015c6:	f7ff ffc1 	bl	800154c <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015ca:	2300      	movs	r3, #0
 80015cc:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80015ce:	6823      	ldr	r3, [r4, #0]
 80015d0:	691a      	ldr	r2, [r3, #16]
 80015d2:	06d2      	lsls	r2, r2, #27
 80015d4:	d510      	bpl.n	80015f8 <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80015d6:	68da      	ldr	r2, [r3, #12]
 80015d8:	06d0      	lsls	r0, r2, #27
 80015da:	d50d      	bpl.n	80015f8 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80015dc:	f06f 0210 	mvn.w	r2, #16
 80015e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80015e2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80015e4:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80015e6:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80015ea:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80015ec:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80015ee:	d04b      	beq.n	8001688 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80015f0:	f7ff ffac 	bl	800154c <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015f4:	2300      	movs	r3, #0
 80015f6:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80015f8:	6823      	ldr	r3, [r4, #0]
 80015fa:	691a      	ldr	r2, [r3, #16]
 80015fc:	07d1      	lsls	r1, r2, #31
 80015fe:	d508      	bpl.n	8001612 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001600:	68da      	ldr	r2, [r3, #12]
 8001602:	07d2      	lsls	r2, r2, #31
 8001604:	d505      	bpl.n	8001612 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001606:	f06f 0201 	mvn.w	r2, #1
 800160a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800160c:	4620      	mov	r0, r4
 800160e:	f7ff ff9b 	bl	8001548 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001612:	6823      	ldr	r3, [r4, #0]
 8001614:	691a      	ldr	r2, [r3, #16]
 8001616:	0610      	lsls	r0, r2, #24
 8001618:	d508      	bpl.n	800162c <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800161a:	68da      	ldr	r2, [r3, #12]
 800161c:	0611      	lsls	r1, r2, #24
 800161e:	d505      	bpl.n	800162c <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001620:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001624:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001626:	4620      	mov	r0, r4
 8001628:	f000 f8d7 	bl	80017da <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800162c:	6823      	ldr	r3, [r4, #0]
 800162e:	691a      	ldr	r2, [r3, #16]
 8001630:	0652      	lsls	r2, r2, #25
 8001632:	d508      	bpl.n	8001646 <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001634:	68da      	ldr	r2, [r3, #12]
 8001636:	0650      	lsls	r0, r2, #25
 8001638:	d505      	bpl.n	8001646 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800163a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800163e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001640:	4620      	mov	r0, r4
 8001642:	f7ff ff85 	bl	8001550 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001646:	6823      	ldr	r3, [r4, #0]
 8001648:	691a      	ldr	r2, [r3, #16]
 800164a:	0691      	lsls	r1, r2, #26
 800164c:	d522      	bpl.n	8001694 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800164e:	68da      	ldr	r2, [r3, #12]
 8001650:	0692      	lsls	r2, r2, #26
 8001652:	d51f      	bpl.n	8001694 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001654:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001658:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800165a:	611a      	str	r2, [r3, #16]
    }
  }
}
 800165c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8001660:	f000 b8ba 	b.w	80017d8 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001664:	f7ff ff71 	bl	800154a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001668:	4620      	mov	r0, r4
 800166a:	f7ff ff70 	bl	800154e <HAL_TIM_PWM_PulseFinishedCallback>
 800166e:	e783      	b.n	8001578 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001670:	f7ff ff6b 	bl	800154a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001674:	4620      	mov	r0, r4
 8001676:	f7ff ff6a 	bl	800154e <HAL_TIM_PWM_PulseFinishedCallback>
 800167a:	e792      	b.n	80015a2 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800167c:	f7ff ff65 	bl	800154a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001680:	4620      	mov	r0, r4
 8001682:	f7ff ff64 	bl	800154e <HAL_TIM_PWM_PulseFinishedCallback>
 8001686:	e7a0      	b.n	80015ca <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001688:	f7ff ff5f 	bl	800154a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800168c:	4620      	mov	r0, r4
 800168e:	f7ff ff5e 	bl	800154e <HAL_TIM_PWM_PulseFinishedCallback>
 8001692:	e7af      	b.n	80015f4 <HAL_TIM_IRQHandler+0xa2>
 8001694:	bd10      	pop	{r4, pc}
	...

08001698 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001698:	4a2e      	ldr	r2, [pc, #184]	; (8001754 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 800169a:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800169c:	4290      	cmp	r0, r2
 800169e:	d012      	beq.n	80016c6 <TIM_Base_SetConfig+0x2e>
 80016a0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80016a4:	d00f      	beq.n	80016c6 <TIM_Base_SetConfig+0x2e>
 80016a6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80016aa:	4290      	cmp	r0, r2
 80016ac:	d00b      	beq.n	80016c6 <TIM_Base_SetConfig+0x2e>
 80016ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016b2:	4290      	cmp	r0, r2
 80016b4:	d007      	beq.n	80016c6 <TIM_Base_SetConfig+0x2e>
 80016b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016ba:	4290      	cmp	r0, r2
 80016bc:	d003      	beq.n	80016c6 <TIM_Base_SetConfig+0x2e>
 80016be:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80016c2:	4290      	cmp	r0, r2
 80016c4:	d11d      	bne.n	8001702 <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80016c6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80016cc:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80016ce:	4a21      	ldr	r2, [pc, #132]	; (8001754 <TIM_Base_SetConfig+0xbc>)
 80016d0:	4290      	cmp	r0, r2
 80016d2:	d104      	bne.n	80016de <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016d4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80016d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016da:	4313      	orrs	r3, r2
 80016dc:	e028      	b.n	8001730 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80016de:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80016e2:	d0f7      	beq.n	80016d4 <TIM_Base_SetConfig+0x3c>
 80016e4:	4a1c      	ldr	r2, [pc, #112]	; (8001758 <TIM_Base_SetConfig+0xc0>)
 80016e6:	4290      	cmp	r0, r2
 80016e8:	d0f4      	beq.n	80016d4 <TIM_Base_SetConfig+0x3c>
 80016ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016ee:	4290      	cmp	r0, r2
 80016f0:	d0f0      	beq.n	80016d4 <TIM_Base_SetConfig+0x3c>
 80016f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016f6:	4290      	cmp	r0, r2
 80016f8:	d0ec      	beq.n	80016d4 <TIM_Base_SetConfig+0x3c>
 80016fa:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80016fe:	4290      	cmp	r0, r2
 8001700:	d0e8      	beq.n	80016d4 <TIM_Base_SetConfig+0x3c>
 8001702:	4a16      	ldr	r2, [pc, #88]	; (800175c <TIM_Base_SetConfig+0xc4>)
 8001704:	4290      	cmp	r0, r2
 8001706:	d0e5      	beq.n	80016d4 <TIM_Base_SetConfig+0x3c>
 8001708:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800170c:	4290      	cmp	r0, r2
 800170e:	d0e1      	beq.n	80016d4 <TIM_Base_SetConfig+0x3c>
 8001710:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001714:	4290      	cmp	r0, r2
 8001716:	d0dd      	beq.n	80016d4 <TIM_Base_SetConfig+0x3c>
 8001718:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800171c:	4290      	cmp	r0, r2
 800171e:	d0d9      	beq.n	80016d4 <TIM_Base_SetConfig+0x3c>
 8001720:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001724:	4290      	cmp	r0, r2
 8001726:	d0d5      	beq.n	80016d4 <TIM_Base_SetConfig+0x3c>
 8001728:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800172c:	4290      	cmp	r0, r2
 800172e:	d0d1      	beq.n	80016d4 <TIM_Base_SetConfig+0x3c>
  }

  TIMx->CR1 = tmpcr1;
 8001730:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001732:	688b      	ldr	r3, [r1, #8]
 8001734:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001736:	680b      	ldr	r3, [r1, #0]
 8001738:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <TIM_Base_SetConfig+0xbc>)
 800173c:	4298      	cmp	r0, r3
 800173e:	d006      	beq.n	800174e <TIM_Base_SetConfig+0xb6>
 8001740:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001744:	4298      	cmp	r0, r3
 8001746:	d002      	beq.n	800174e <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001748:	2301      	movs	r3, #1
 800174a:	6143      	str	r3, [r0, #20]
}
 800174c:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800174e:	690b      	ldr	r3, [r1, #16]
 8001750:	6303      	str	r3, [r0, #48]	; 0x30
 8001752:	e7f9      	b.n	8001748 <TIM_Base_SetConfig+0xb0>
 8001754:	40010000 	.word	0x40010000
 8001758:	40000400 	.word	0x40000400
 800175c:	40014000 	.word	0x40014000

08001760 <HAL_TIM_Base_Init>:
{ 
 8001760:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001762:	4604      	mov	r4, r0
 8001764:	b1a0      	cbz	r0, 8001790 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001766:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800176a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800176e:	b91b      	cbnz	r3, 8001778 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001770:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8001774:	f000 fd84 	bl	8002280 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001778:	2302      	movs	r3, #2
 800177a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800177e:	6820      	ldr	r0, [r4, #0]
 8001780:	1d21      	adds	r1, r4, #4
 8001782:	f7ff ff89 	bl	8001698 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001786:	2301      	movs	r3, #1
 8001788:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800178c:	2000      	movs	r0, #0
 800178e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001790:	2001      	movs	r0, #1
}
 8001792:	bd10      	pop	{r4, pc}

08001794 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001794:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001798:	2b01      	cmp	r3, #1
{
 800179a:	b510      	push	{r4, lr}
 800179c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80017a0:	d018      	beq.n	80017d4 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 80017a2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80017a6:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80017a8:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80017aa:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80017ac:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80017ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80017b2:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	4322      	orrs	r2, r4
 80017b8:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017c0:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80017c8:	2301      	movs	r3, #1
 80017ca:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80017ce:	2300      	movs	r3, #0
 80017d0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 80017d4:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 80017d6:	bd10      	pop	{r4, pc}

080017d8 <HAL_TIMEx_CommutationCallback>:
 80017d8:	4770      	bx	lr

080017da <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80017da:	4770      	bx	lr

080017dc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80017dc:	6803      	ldr	r3, [r0, #0]
 80017de:	68da      	ldr	r2, [r3, #12]
 80017e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80017e4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017e6:	695a      	ldr	r2, [r3, #20]
 80017e8:	f022 0201 	bic.w	r2, r2, #1
 80017ec:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80017ee:	2320      	movs	r3, #32
 80017f0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80017f4:	4770      	bx	lr
	...

080017f8 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80017f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80017fc:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80017fe:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8001800:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001802:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001804:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001808:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800180a:	6133      	str	r3, [r6, #16]
{
 800180c:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800180e:	6883      	ldr	r3, [r0, #8]
 8001810:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8001812:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001814:	4303      	orrs	r3, r0
 8001816:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001818:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800181c:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800181e:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001822:	430b      	orrs	r3, r1
 8001824:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001826:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001828:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800182a:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800182c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001830:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001832:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001836:	6173      	str	r3, [r6, #20]
 8001838:	4b7a      	ldr	r3, [pc, #488]	; (8001a24 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800183a:	d17c      	bne.n	8001936 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800183c:	429e      	cmp	r6, r3
 800183e:	d003      	beq.n	8001848 <UART_SetConfig+0x50>
 8001840:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001844:	429e      	cmp	r6, r3
 8001846:	d144      	bne.n	80018d2 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001848:	f7ff fca2 	bl	8001190 <HAL_RCC_GetPCLK2Freq>
 800184c:	2519      	movs	r5, #25
 800184e:	fb05 f300 	mul.w	r3, r5, r0
 8001852:	6860      	ldr	r0, [r4, #4]
 8001854:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001858:	0040      	lsls	r0, r0, #1
 800185a:	fbb3 f3f0 	udiv	r3, r3, r0
 800185e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001862:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001866:	f7ff fc93 	bl	8001190 <HAL_RCC_GetPCLK2Freq>
 800186a:	6863      	ldr	r3, [r4, #4]
 800186c:	4368      	muls	r0, r5
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	fbb0 f7f3 	udiv	r7, r0, r3
 8001874:	f7ff fc8c 	bl	8001190 <HAL_RCC_GetPCLK2Freq>
 8001878:	6863      	ldr	r3, [r4, #4]
 800187a:	4368      	muls	r0, r5
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001882:	fbb3 f3f9 	udiv	r3, r3, r9
 8001886:	fb09 7313 	mls	r3, r9, r3, r7
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	3332      	adds	r3, #50	; 0x32
 800188e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001898:	f7ff fc7a 	bl	8001190 <HAL_RCC_GetPCLK2Freq>
 800189c:	6862      	ldr	r2, [r4, #4]
 800189e:	4368      	muls	r0, r5
 80018a0:	0052      	lsls	r2, r2, #1
 80018a2:	fbb0 faf2 	udiv	sl, r0, r2
 80018a6:	f7ff fc73 	bl	8001190 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80018aa:	6863      	ldr	r3, [r4, #4]
 80018ac:	4368      	muls	r0, r5
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80018b4:	fbb3 f3f9 	udiv	r3, r3, r9
 80018b8:	fb09 a313 	mls	r3, r9, r3, sl
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	3332      	adds	r3, #50	; 0x32
 80018c0:	fbb3 f3f9 	udiv	r3, r3, r9
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80018ca:	443b      	add	r3, r7
 80018cc:	60b3      	str	r3, [r6, #8]
 80018ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80018d2:	f7ff fc4d 	bl	8001170 <HAL_RCC_GetPCLK1Freq>
 80018d6:	2519      	movs	r5, #25
 80018d8:	fb05 f300 	mul.w	r3, r5, r0
 80018dc:	6860      	ldr	r0, [r4, #4]
 80018de:	f04f 0964 	mov.w	r9, #100	; 0x64
 80018e2:	0040      	lsls	r0, r0, #1
 80018e4:	fbb3 f3f0 	udiv	r3, r3, r0
 80018e8:	fbb3 f3f9 	udiv	r3, r3, r9
 80018ec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80018f0:	f7ff fc3e 	bl	8001170 <HAL_RCC_GetPCLK1Freq>
 80018f4:	6863      	ldr	r3, [r4, #4]
 80018f6:	4368      	muls	r0, r5
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	fbb0 f7f3 	udiv	r7, r0, r3
 80018fe:	f7ff fc37 	bl	8001170 <HAL_RCC_GetPCLK1Freq>
 8001902:	6863      	ldr	r3, [r4, #4]
 8001904:	4368      	muls	r0, r5
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	fbb0 f3f3 	udiv	r3, r0, r3
 800190c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001910:	fb09 7313 	mls	r3, r9, r3, r7
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	3332      	adds	r3, #50	; 0x32
 8001918:	fbb3 f3f9 	udiv	r3, r3, r9
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001922:	f7ff fc25 	bl	8001170 <HAL_RCC_GetPCLK1Freq>
 8001926:	6862      	ldr	r2, [r4, #4]
 8001928:	4368      	muls	r0, r5
 800192a:	0052      	lsls	r2, r2, #1
 800192c:	fbb0 faf2 	udiv	sl, r0, r2
 8001930:	f7ff fc1e 	bl	8001170 <HAL_RCC_GetPCLK1Freq>
 8001934:	e7b9      	b.n	80018aa <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001936:	429e      	cmp	r6, r3
 8001938:	d002      	beq.n	8001940 <UART_SetConfig+0x148>
 800193a:	4b3b      	ldr	r3, [pc, #236]	; (8001a28 <UART_SetConfig+0x230>)
 800193c:	429e      	cmp	r6, r3
 800193e:	d140      	bne.n	80019c2 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001940:	f7ff fc26 	bl	8001190 <HAL_RCC_GetPCLK2Freq>
 8001944:	6867      	ldr	r7, [r4, #4]
 8001946:	2519      	movs	r5, #25
 8001948:	f04f 0964 	mov.w	r9, #100	; 0x64
 800194c:	fb05 f300 	mul.w	r3, r5, r0
 8001950:	00bf      	lsls	r7, r7, #2
 8001952:	fbb3 f3f7 	udiv	r3, r3, r7
 8001956:	fbb3 f3f9 	udiv	r3, r3, r9
 800195a:	011f      	lsls	r7, r3, #4
 800195c:	f7ff fc18 	bl	8001190 <HAL_RCC_GetPCLK2Freq>
 8001960:	6863      	ldr	r3, [r4, #4]
 8001962:	4368      	muls	r0, r5
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	fbb0 f8f3 	udiv	r8, r0, r3
 800196a:	f7ff fc11 	bl	8001190 <HAL_RCC_GetPCLK2Freq>
 800196e:	6863      	ldr	r3, [r4, #4]
 8001970:	4368      	muls	r0, r5
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	fbb0 f3f3 	udiv	r3, r0, r3
 8001978:	fbb3 f3f9 	udiv	r3, r3, r9
 800197c:	fb09 8313 	mls	r3, r9, r3, r8
 8001980:	011b      	lsls	r3, r3, #4
 8001982:	3332      	adds	r3, #50	; 0x32
 8001984:	fbb3 f3f9 	udiv	r3, r3, r9
 8001988:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800198c:	f7ff fc00 	bl	8001190 <HAL_RCC_GetPCLK2Freq>
 8001990:	6862      	ldr	r2, [r4, #4]
 8001992:	4368      	muls	r0, r5
 8001994:	0092      	lsls	r2, r2, #2
 8001996:	fbb0 faf2 	udiv	sl, r0, r2
 800199a:	f7ff fbf9 	bl	8001190 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800199e:	6863      	ldr	r3, [r4, #4]
 80019a0:	4368      	muls	r0, r5
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80019a8:	fbb3 f3f9 	udiv	r3, r3, r9
 80019ac:	fb09 a313 	mls	r3, r9, r3, sl
 80019b0:	011b      	lsls	r3, r3, #4
 80019b2:	3332      	adds	r3, #50	; 0x32
 80019b4:	fbb3 f3f9 	udiv	r3, r3, r9
 80019b8:	f003 030f 	and.w	r3, r3, #15
 80019bc:	ea43 0308 	orr.w	r3, r3, r8
 80019c0:	e783      	b.n	80018ca <UART_SetConfig+0xd2>
 80019c2:	f7ff fbd5 	bl	8001170 <HAL_RCC_GetPCLK1Freq>
 80019c6:	6867      	ldr	r7, [r4, #4]
 80019c8:	2519      	movs	r5, #25
 80019ca:	f04f 0964 	mov.w	r9, #100	; 0x64
 80019ce:	fb05 f300 	mul.w	r3, r5, r0
 80019d2:	00bf      	lsls	r7, r7, #2
 80019d4:	fbb3 f3f7 	udiv	r3, r3, r7
 80019d8:	fbb3 f3f9 	udiv	r3, r3, r9
 80019dc:	011f      	lsls	r7, r3, #4
 80019de:	f7ff fbc7 	bl	8001170 <HAL_RCC_GetPCLK1Freq>
 80019e2:	6863      	ldr	r3, [r4, #4]
 80019e4:	4368      	muls	r0, r5
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	fbb0 f8f3 	udiv	r8, r0, r3
 80019ec:	f7ff fbc0 	bl	8001170 <HAL_RCC_GetPCLK1Freq>
 80019f0:	6863      	ldr	r3, [r4, #4]
 80019f2:	4368      	muls	r0, r5
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80019fa:	fbb3 f3f9 	udiv	r3, r3, r9
 80019fe:	fb09 8313 	mls	r3, r9, r3, r8
 8001a02:	011b      	lsls	r3, r3, #4
 8001a04:	3332      	adds	r3, #50	; 0x32
 8001a06:	fbb3 f3f9 	udiv	r3, r3, r9
 8001a0a:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001a0e:	f7ff fbaf 	bl	8001170 <HAL_RCC_GetPCLK1Freq>
 8001a12:	6862      	ldr	r2, [r4, #4]
 8001a14:	4368      	muls	r0, r5
 8001a16:	0092      	lsls	r2, r2, #2
 8001a18:	fbb0 faf2 	udiv	sl, r0, r2
 8001a1c:	f7ff fba8 	bl	8001170 <HAL_RCC_GetPCLK1Freq>
 8001a20:	e7bd      	b.n	800199e <UART_SetConfig+0x1a6>
 8001a22:	bf00      	nop
 8001a24:	40011000 	.word	0x40011000
 8001a28:	40011400 	.word	0x40011400

08001a2c <HAL_UART_Init>:
{
 8001a2c:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001a2e:	4604      	mov	r4, r0
 8001a30:	b340      	cbz	r0, 8001a84 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001a32:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001a36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001a3a:	b91b      	cbnz	r3, 8001a44 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001a3c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001a40:	f000 fc54 	bl	80022ec <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001a44:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001a46:	2324      	movs	r3, #36	; 0x24
 8001a48:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001a4c:	68d3      	ldr	r3, [r2, #12]
 8001a4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a52:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001a54:	4620      	mov	r0, r4
 8001a56:	f7ff fecf 	bl	80017f8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a5a:	6823      	ldr	r3, [r4, #0]
 8001a5c:	691a      	ldr	r2, [r3, #16]
 8001a5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a62:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a64:	695a      	ldr	r2, [r3, #20]
 8001a66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a6a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001a6c:	68da      	ldr	r2, [r3, #12]
 8001a6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a72:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a74:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001a76:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a78:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001a7a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001a7e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001a82:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001a84:	2001      	movs	r0, #1
}
 8001a86:	bd10      	pop	{r4, pc}

08001a88 <HAL_UART_TxCpltCallback>:
 8001a88:	4770      	bx	lr

08001a8a <HAL_UART_RxCpltCallback>:
 8001a8a:	4770      	bx	lr

08001a8c <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001a8c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001a90:	2b22      	cmp	r3, #34	; 0x22
{
 8001a92:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001a94:	d132      	bne.n	8001afc <UART_Receive_IT+0x70>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a96:	6883      	ldr	r3, [r0, #8]
 8001a98:	6901      	ldr	r1, [r0, #16]
 8001a9a:	6802      	ldr	r2, [r0, #0]
 8001a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aa0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001aa2:	d11f      	bne.n	8001ae4 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001aa4:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001aa6:	b9c9      	cbnz	r1, 8001adc <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001aa8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001aac:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001ab0:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8001ab2:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001ab4:	3c01      	subs	r4, #1
 8001ab6:	b2a4      	uxth	r4, r4
 8001ab8:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001aba:	b96c      	cbnz	r4, 8001ad8 <UART_Receive_IT+0x4c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001abc:	6803      	ldr	r3, [r0, #0]
 8001abe:	68da      	ldr	r2, [r3, #12]
 8001ac0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001ac4:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ac6:	695a      	ldr	r2, [r3, #20]
 8001ac8:	f022 0201 	bic.w	r2, r2, #1
 8001acc:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001ace:	2320      	movs	r3, #32
 8001ad0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8001ad4:	f7ff ffd9 	bl	8001a8a <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8001ad8:	2000      	movs	r0, #0
}
 8001ada:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	f823 2b01 	strh.w	r2, [r3], #1
 8001ae2:	e7e5      	b.n	8001ab0 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001ae4:	b921      	cbnz	r1, 8001af0 <UART_Receive_IT+0x64>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001ae6:	1c59      	adds	r1, r3, #1
 8001ae8:	6852      	ldr	r2, [r2, #4]
 8001aea:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001aec:	701a      	strb	r2, [r3, #0]
 8001aee:	e7e0      	b.n	8001ab2 <UART_Receive_IT+0x26>
 8001af0:	6852      	ldr	r2, [r2, #4]
 8001af2:	1c59      	adds	r1, r3, #1
 8001af4:	6281      	str	r1, [r0, #40]	; 0x28
 8001af6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001afa:	e7f7      	b.n	8001aec <UART_Receive_IT+0x60>
    return HAL_BUSY;
 8001afc:	2002      	movs	r0, #2
 8001afe:	bd10      	pop	{r4, pc}

08001b00 <HAL_UART_ErrorCallback>:
 8001b00:	4770      	bx	lr
	...

08001b04 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001b04:	6803      	ldr	r3, [r0, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001b08:	68d9      	ldr	r1, [r3, #12]
{
 8001b0a:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 8001b0c:	0716      	lsls	r6, r2, #28
{
 8001b0e:	4604      	mov	r4, r0
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001b10:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 8001b12:	d107      	bne.n	8001b24 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b14:	0696      	lsls	r6, r2, #26
 8001b16:	d55a      	bpl.n	8001bce <HAL_UART_IRQHandler+0xca>
 8001b18:	068d      	lsls	r5, r1, #26
 8001b1a:	d558      	bpl.n	8001bce <HAL_UART_IRQHandler+0xca>
}
 8001b1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001b20:	f7ff bfb4 	b.w	8001a8c <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001b24:	f015 0501 	ands.w	r5, r5, #1
 8001b28:	d102      	bne.n	8001b30 <HAL_UART_IRQHandler+0x2c>
 8001b2a:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001b2e:	d04e      	beq.n	8001bce <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001b30:	07d3      	lsls	r3, r2, #31
 8001b32:	d505      	bpl.n	8001b40 <HAL_UART_IRQHandler+0x3c>
 8001b34:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001b36:	bf42      	ittt	mi
 8001b38:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001b3a:	f043 0301 	orrmi.w	r3, r3, #1
 8001b3e:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b40:	0750      	lsls	r0, r2, #29
 8001b42:	d504      	bpl.n	8001b4e <HAL_UART_IRQHandler+0x4a>
 8001b44:	b11d      	cbz	r5, 8001b4e <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001b46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b48:	f043 0302 	orr.w	r3, r3, #2
 8001b4c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b4e:	0793      	lsls	r3, r2, #30
 8001b50:	d504      	bpl.n	8001b5c <HAL_UART_IRQHandler+0x58>
 8001b52:	b11d      	cbz	r5, 8001b5c <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001b54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b56:	f043 0304 	orr.w	r3, r3, #4
 8001b5a:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b5c:	0716      	lsls	r6, r2, #28
 8001b5e:	d504      	bpl.n	8001b6a <HAL_UART_IRQHandler+0x66>
 8001b60:	b11d      	cbz	r5, 8001b6a <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001b62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b64:	f043 0308 	orr.w	r3, r3, #8
 8001b68:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001b6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d066      	beq.n	8001c3e <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b70:	0695      	lsls	r5, r2, #26
 8001b72:	d504      	bpl.n	8001b7e <HAL_UART_IRQHandler+0x7a>
 8001b74:	0688      	lsls	r0, r1, #26
 8001b76:	d502      	bpl.n	8001b7e <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001b78:	4620      	mov	r0, r4
 8001b7a:	f7ff ff87 	bl	8001a8c <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001b7e:	6823      	ldr	r3, [r4, #0]
 8001b80:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001b82:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001b84:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 8001b86:	4620      	mov	r0, r4
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001b88:	d402      	bmi.n	8001b90 <HAL_UART_IRQHandler+0x8c>
 8001b8a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001b8e:	d01a      	beq.n	8001bc6 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001b90:	f7ff fe24 	bl	80017dc <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b94:	6823      	ldr	r3, [r4, #0]
 8001b96:	695a      	ldr	r2, [r3, #20]
 8001b98:	0652      	lsls	r2, r2, #25
 8001b9a:	d510      	bpl.n	8001bbe <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b9c:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001b9e:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ba0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ba4:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001ba6:	b150      	cbz	r0, 8001bbe <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001ba8:	4b25      	ldr	r3, [pc, #148]	; (8001c40 <HAL_UART_IRQHandler+0x13c>)
 8001baa:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001bac:	f7ff f917 	bl	8000dde <HAL_DMA_Abort_IT>
 8001bb0:	2800      	cmp	r0, #0
 8001bb2:	d044      	beq.n	8001c3e <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001bb4:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8001bb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001bba:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001bbc:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001bbe:	4620      	mov	r0, r4
 8001bc0:	f7ff ff9e 	bl	8001b00 <HAL_UART_ErrorCallback>
 8001bc4:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001bc6:	f7ff ff9b 	bl	8001b00 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bca:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001bcc:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001bce:	0616      	lsls	r6, r2, #24
 8001bd0:	d527      	bpl.n	8001c22 <HAL_UART_IRQHandler+0x11e>
 8001bd2:	060d      	lsls	r5, r1, #24
 8001bd4:	d525      	bpl.n	8001c22 <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001bd6:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001bda:	2a21      	cmp	r2, #33	; 0x21
 8001bdc:	d12f      	bne.n	8001c3e <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001bde:	68a2      	ldr	r2, [r4, #8]
 8001be0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001be4:	6a22      	ldr	r2, [r4, #32]
 8001be6:	d117      	bne.n	8001c18 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001be8:	8811      	ldrh	r1, [r2, #0]
 8001bea:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001bee:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001bf0:	6921      	ldr	r1, [r4, #16]
 8001bf2:	b979      	cbnz	r1, 8001c14 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8001bf4:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8001bf6:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 8001bf8:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001bfa:	3a01      	subs	r2, #1
 8001bfc:	b292      	uxth	r2, r2
 8001bfe:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001c00:	b9ea      	cbnz	r2, 8001c3e <HAL_UART_IRQHandler+0x13a>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001c02:	68da      	ldr	r2, [r3, #12]
 8001c04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c08:	60da      	str	r2, [r3, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001c0a:	68da      	ldr	r2, [r3, #12]
 8001c0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001c14:	3201      	adds	r2, #1
 8001c16:	e7ee      	b.n	8001bf6 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001c18:	1c51      	adds	r1, r2, #1
 8001c1a:	6221      	str	r1, [r4, #32]
 8001c1c:	7812      	ldrb	r2, [r2, #0]
 8001c1e:	605a      	str	r2, [r3, #4]
 8001c20:	e7ea      	b.n	8001bf8 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001c22:	0650      	lsls	r0, r2, #25
 8001c24:	d50b      	bpl.n	8001c3e <HAL_UART_IRQHandler+0x13a>
 8001c26:	064a      	lsls	r2, r1, #25
 8001c28:	d509      	bpl.n	8001c3e <HAL_UART_IRQHandler+0x13a>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001c2a:	68da      	ldr	r2, [r3, #12]
 8001c2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c30:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8001c32:	2320      	movs	r3, #32
 8001c34:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001c38:	4620      	mov	r0, r4
 8001c3a:	f7ff ff25 	bl	8001a88 <HAL_UART_TxCpltCallback>
 8001c3e:	bd70      	pop	{r4, r5, r6, pc}
 8001c40:	08001c45 	.word	0x08001c45

08001c44 <UART_DMAAbortOnError>:
{
 8001c44:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c46:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0U;
 8001c4c:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001c4e:	f7ff ff57 	bl	8001b00 <HAL_UART_ErrorCallback>
 8001c52:	bd08      	pop	{r3, pc}

08001c54 <mw_ahrs_input_data>:
char direction[] = "i";
float Azimuth = 0;
float value = 0;

void mw_ahrs_input_data(MW_AHRS *dst)
{
 8001c54:	b508      	push	{r3, lr}
	 if(dst->can_read_data[0] == 0xF0)
 8001c56:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8001c5a:	2bf0      	cmp	r3, #240	; 0xf0
 8001c5c:	d14f      	bne.n	8001cfe <mw_ahrs_input_data+0xaa>
	{
		switch(dst->can_read_data[1])
 8001c5e:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001c62:	3b33      	subs	r3, #51	; 0x33
 8001c64:	2b03      	cmp	r3, #3
 8001c66:	d838      	bhi.n	8001cda <mw_ahrs_input_data+0x86>
 8001c68:	e8df f003 	tbb	[pc, r3]
 8001c6c:	b8814a02 	.word	0xb8814a02
		{
		case ACCELERATION:
			memcpy(dst->a_raw_data, &dst->can_read_data[2], 6);
 8001c70:	4603      	mov	r3, r0
			dst->a_x = GET_S16_BYTE(dst->a_raw_data[0], dst->a_raw_data[1]) / 1000.0f;
 8001c72:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8001e4c <mw_ahrs_input_data+0x1f8>
			memcpy(dst->a_raw_data, &dst->can_read_data[2], 6);
 8001c76:	f853 2f52 	ldr.w	r2, [r3, #82]!
 8001c7a:	6302      	str	r2, [r0, #48]	; 0x30
 8001c7c:	889b      	ldrh	r3, [r3, #4]
 8001c7e:	8683      	strh	r3, [r0, #52]	; 0x34
			dst->a_x = GET_S16_BYTE(dst->a_raw_data[0], dst->a_raw_data[1]) / 1000.0f;
 8001c80:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
 8001c84:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8001c88:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001c8c:	b21b      	sxth	r3, r3
 8001c8e:	ee07 3a90 	vmov	s15, r3
 8001c92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			dst->a_y = GET_S16_BYTE(dst->a_raw_data[2], dst->a_raw_data[3]) / 1000.0f;
 8001c96:	f890 2033 	ldrb.w	r2, [r0, #51]	; 0x33
 8001c9a:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
			dst->a_x = GET_S16_BYTE(dst->a_raw_data[0], dst->a_raw_data[1]) / 1000.0f;
 8001c9e:	eec7 6a87 	vdiv.f32	s13, s15, s14
			dst->a_y = GET_S16_BYTE(dst->a_raw_data[2], dst->a_raw_data[3]) / 1000.0f;
 8001ca2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001ca6:	b21b      	sxth	r3, r3
			dst->a_z = GET_S16_BYTE(dst->a_raw_data[4], dst->a_raw_data[5]) / 1000.0f;
 8001ca8:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
			dst->a_y = GET_S16_BYTE(dst->a_raw_data[2], dst->a_raw_data[3]) / 1000.0f;
 8001cac:	ee07 3a90 	vmov	s15, r3
 8001cb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			dst->a_x = GET_S16_BYTE(dst->a_raw_data[0], dst->a_raw_data[1]) / 1000.0f;
 8001cb4:	edc0 6a00 	vstr	s13, [r0]
			dst->a_y = GET_S16_BYTE(dst->a_raw_data[2], dst->a_raw_data[3]) / 1000.0f;
 8001cb8:	eec7 6a87 	vdiv.f32	s13, s15, s14
			dst->a_z = GET_S16_BYTE(dst->a_raw_data[4], dst->a_raw_data[5]) / 1000.0f;
 8001cbc:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8001cc0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001cc4:	b21b      	sxth	r3, r3
 8001cc6:	ee07 3a90 	vmov	s15, r3
 8001cca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			dst->a_y = GET_S16_BYTE(dst->a_raw_data[2], dst->a_raw_data[3]) / 1000.0f;
 8001cce:	edc0 6a01 	vstr	s13, [r0, #4]
			dst->a_z = GET_S16_BYTE(dst->a_raw_data[4], dst->a_raw_data[5]) / 1000.0f;
 8001cd2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001cd6:	edc0 6a02 	vstr	s13, [r0, #8]
			dst->m_y = GET_S16_BYTE(dst->m_raw_data[2], dst->m_raw_data[3]) / 10.0f;
			dst->m_z = GET_S16_BYTE(dst->m_raw_data[4], dst->m_raw_data[5]) / 10.0f;
			break;
                }

                value = dst->m_x / dst->m_y;
 8001cda:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
 8001cde:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
 8001ce2:	4b5b      	ldr	r3, [pc, #364]	; (8001e50 <mw_ahrs_input_data+0x1fc>)
 8001ce4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8001ce8:	ed83 0a00 	vstr	s0, [r3]
                Azimuth = 90 - atanf(value);
 8001cec:	f000 fbf8 	bl	80024e0 <atanf>
 8001cf0:	eddf 7a58 	vldr	s15, [pc, #352]	; 8001e54 <mw_ahrs_input_data+0x200>
 8001cf4:	4b58      	ldr	r3, [pc, #352]	; (8001e58 <mw_ahrs_input_data+0x204>)
 8001cf6:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8001cfa:	ed83 0a00 	vstr	s0, [r3]
 8001cfe:	bd08      	pop	{r3, pc}
			memcpy(dst->g_raw_data, &dst->can_read_data[2], 6);
 8001d00:	4603      	mov	r3, r0
			dst->g_x = GET_S16_BYTE(dst->g_raw_data[0], dst->g_raw_data[1]) / 10.0f;
 8001d02:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
			memcpy(dst->g_raw_data, &dst->can_read_data[2], 6);
 8001d06:	f853 2f52 	ldr.w	r2, [r3, #82]!
 8001d0a:	f8c0 2036 	str.w	r2, [r0, #54]	; 0x36
 8001d0e:	889b      	ldrh	r3, [r3, #4]
 8001d10:	8743      	strh	r3, [r0, #58]	; 0x3a
			dst->g_x = GET_S16_BYTE(dst->g_raw_data[0], dst->g_raw_data[1]) / 10.0f;
 8001d12:	f890 2037 	ldrb.w	r2, [r0, #55]	; 0x37
 8001d16:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8001d1a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001d1e:	b21b      	sxth	r3, r3
 8001d20:	ee07 3a90 	vmov	s15, r3
 8001d24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			dst->g_y = GET_S16_BYTE(dst->g_raw_data[2], dst->g_raw_data[3]) / 10.0f;
 8001d28:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 8001d2c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
			dst->g_x = GET_S16_BYTE(dst->g_raw_data[0], dst->g_raw_data[1]) / 10.0f;
 8001d30:	eec7 6a87 	vdiv.f32	s13, s15, s14
			dst->g_y = GET_S16_BYTE(dst->g_raw_data[2], dst->g_raw_data[3]) / 10.0f;
 8001d34:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001d38:	b21b      	sxth	r3, r3
			dst->g_z = GET_S16_BYTE(dst->g_raw_data[4], dst->g_raw_data[5]) / 10.0f;
 8001d3a:	f890 203b 	ldrb.w	r2, [r0, #59]	; 0x3b
			dst->g_y = GET_S16_BYTE(dst->g_raw_data[2], dst->g_raw_data[3]) / 10.0f;
 8001d3e:	ee07 3a90 	vmov	s15, r3
 8001d42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			dst->g_x = GET_S16_BYTE(dst->g_raw_data[0], dst->g_raw_data[1]) / 10.0f;
 8001d46:	edc0 6a03 	vstr	s13, [r0, #12]
			dst->g_y = GET_S16_BYTE(dst->g_raw_data[2], dst->g_raw_data[3]) / 10.0f;
 8001d4a:	eec7 6a87 	vdiv.f32	s13, s15, s14
			dst->g_z = GET_S16_BYTE(dst->g_raw_data[4], dst->g_raw_data[5]) / 10.0f;
 8001d4e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001d52:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001d56:	b21b      	sxth	r3, r3
 8001d58:	ee07 3a90 	vmov	s15, r3
 8001d5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			dst->g_y = GET_S16_BYTE(dst->g_raw_data[2], dst->g_raw_data[3]) / 10.0f;
 8001d60:	edc0 6a04 	vstr	s13, [r0, #16]
			dst->g_z = GET_S16_BYTE(dst->g_raw_data[4], dst->g_raw_data[5]) / 10.0f;
 8001d64:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001d68:	edc0 6a05 	vstr	s13, [r0, #20]
			break;
 8001d6c:	e7b5      	b.n	8001cda <mw_ahrs_input_data+0x86>
			memcpy(dst->e_raw_data, &dst->can_read_data[2], 6);
 8001d6e:	4603      	mov	r3, r0
			dst->e_roll = GET_S16_BYTE(dst->e_raw_data[0], dst->e_raw_data[1]) / 100.0f;
 8001d70:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001e5c <mw_ahrs_input_data+0x208>
			memcpy(dst->e_raw_data, &dst->can_read_data[2], 6);
 8001d74:	f853 2f52 	ldr.w	r2, [r3, #82]!
 8001d78:	63c2      	str	r2, [r0, #60]	; 0x3c
 8001d7a:	889b      	ldrh	r3, [r3, #4]
 8001d7c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			dst->e_roll = GET_S16_BYTE(dst->e_raw_data[0], dst->e_raw_data[1]) / 100.0f;
 8001d80:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8001d84:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001d88:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001d8c:	b21b      	sxth	r3, r3
 8001d8e:	ee07 3a90 	vmov	s15, r3
 8001d92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			dst->e_pitch = GET_S16_BYTE(dst->e_raw_data[2], dst->e_raw_data[3]) / 100.0f;
 8001d96:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
 8001d9a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
			dst->e_roll = GET_S16_BYTE(dst->e_raw_data[0], dst->e_raw_data[1]) / 100.0f;
 8001d9e:	eec7 6a87 	vdiv.f32	s13, s15, s14
			dst->e_pitch = GET_S16_BYTE(dst->e_raw_data[2], dst->e_raw_data[3]) / 100.0f;
 8001da2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001da6:	b21b      	sxth	r3, r3
			dst->e_yaw = GET_S16_BYTE(dst->e_raw_data[4], dst->e_raw_data[5]) / 100.0f;
 8001da8:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
			dst->e_pitch = GET_S16_BYTE(dst->e_raw_data[2], dst->e_raw_data[3]) / 100.0f;
 8001dac:	ee07 3a90 	vmov	s15, r3
 8001db0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			dst->e_roll = GET_S16_BYTE(dst->e_raw_data[0], dst->e_raw_data[1]) / 100.0f;
 8001db4:	edc0 6a08 	vstr	s13, [r0, #32]
			dst->e_pitch = GET_S16_BYTE(dst->e_raw_data[2], dst->e_raw_data[3]) / 100.0f;
 8001db8:	eec7 6a87 	vdiv.f32	s13, s15, s14
			dst->e_yaw = GET_S16_BYTE(dst->e_raw_data[4], dst->e_raw_data[5]) / 100.0f;
 8001dbc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001dc0:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001dc4:	b21b      	sxth	r3, r3
 8001dc6:	ee07 3a90 	vmov	s15, r3
 8001dca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			dst->e_pitch = GET_S16_BYTE(dst->e_raw_data[2], dst->e_raw_data[3]) / 100.0f;
 8001dce:	edc0 6a07 	vstr	s13, [r0, #28]
			dst->e_yaw = GET_S16_BYTE(dst->e_raw_data[4], dst->e_raw_data[5]) / 100.0f;
 8001dd2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001dd6:	edc0 6a06 	vstr	s13, [r0, #24]
			break;
 8001dda:	e77e      	b.n	8001cda <mw_ahrs_input_data+0x86>
			memcpy(dst->m_raw_data, &dst->can_read_data[2], 6);
 8001ddc:	4603      	mov	r3, r0
			dst->m_x = GET_S16_BYTE(dst->m_raw_data[0], dst->m_raw_data[1]) / 10.0f;
 8001dde:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
			memcpy(dst->m_raw_data, &dst->can_read_data[2], 6);
 8001de2:	f853 2f52 	ldr.w	r2, [r3, #82]!
 8001de6:	f8c0 2042 	str.w	r2, [r0, #66]	; 0x42
 8001dea:	889b      	ldrh	r3, [r3, #4]
 8001dec:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
			dst->m_x = GET_S16_BYTE(dst->m_raw_data[0], dst->m_raw_data[1]) / 10.0f;
 8001df0:	f890 2043 	ldrb.w	r2, [r0, #67]	; 0x43
 8001df4:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8001df8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001dfc:	b21b      	sxth	r3, r3
 8001dfe:	ee07 3a90 	vmov	s15, r3
 8001e02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			dst->m_y = GET_S16_BYTE(dst->m_raw_data[2], dst->m_raw_data[3]) / 10.0f;
 8001e06:	f890 2045 	ldrb.w	r2, [r0, #69]	; 0x45
 8001e0a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
			dst->m_x = GET_S16_BYTE(dst->m_raw_data[0], dst->m_raw_data[1]) / 10.0f;
 8001e0e:	eec7 6a87 	vdiv.f32	s13, s15, s14
			dst->m_y = GET_S16_BYTE(dst->m_raw_data[2], dst->m_raw_data[3]) / 10.0f;
 8001e12:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001e16:	b21b      	sxth	r3, r3
			dst->m_z = GET_S16_BYTE(dst->m_raw_data[4], dst->m_raw_data[5]) / 10.0f;
 8001e18:	f890 2047 	ldrb.w	r2, [r0, #71]	; 0x47
			dst->m_y = GET_S16_BYTE(dst->m_raw_data[2], dst->m_raw_data[3]) / 10.0f;
 8001e1c:	ee07 3a90 	vmov	s15, r3
 8001e20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			dst->m_x = GET_S16_BYTE(dst->m_raw_data[0], dst->m_raw_data[1]) / 10.0f;
 8001e24:	edc0 6a09 	vstr	s13, [r0, #36]	; 0x24
			dst->m_y = GET_S16_BYTE(dst->m_raw_data[2], dst->m_raw_data[3]) / 10.0f;
 8001e28:	eec7 6a87 	vdiv.f32	s13, s15, s14
			dst->m_z = GET_S16_BYTE(dst->m_raw_data[4], dst->m_raw_data[5]) / 10.0f;
 8001e2c:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
 8001e30:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001e34:	b21b      	sxth	r3, r3
 8001e36:	ee07 3a90 	vmov	s15, r3
 8001e3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			dst->m_y = GET_S16_BYTE(dst->m_raw_data[2], dst->m_raw_data[3]) / 10.0f;
 8001e3e:	edc0 6a0a 	vstr	s13, [r0, #40]	; 0x28
			dst->m_z = GET_S16_BYTE(dst->m_raw_data[4], dst->m_raw_data[5]) / 10.0f;
 8001e42:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001e46:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
			break;
 8001e4a:	e746      	b.n	8001cda <mw_ahrs_input_data+0x86>
 8001e4c:	447a0000 	.word	0x447a0000
 8001e50:	20000024 	.word	0x20000024
 8001e54:	42b40000 	.word	0x42b40000
 8001e58:	20000020 	.word	0x20000020
 8001e5c:	42c80000 	.word	0x42c80000

08001e60 <mw_ahrs_set_data_type>:
	}
}


void mw_ahrs_set_data_type(MW_AHRS *dst, uint8_t acc, uint8_t gyro, uint8_t angle, uint8_t mangetic)
{
 8001e60:	b510      	push	{r4, lr}
	dst->can_write_data[0] = AC_OBJECT_WRITE_REQ + OT_INT32;
	dst->can_write_data[1] = SET_CAN_DATA;
	dst->can_write_data[2] = 0;
	dst->can_write_data[3] = 0;

	dst->can_write_data[4] = (acc << DT_ACC) + (gyro << DT_GYRO) + (angle << DT_ANGLE) + (mangetic << DT_MAGNETIC);
 8001e62:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8001e66:	f89d 1008 	ldrb.w	r1, [sp, #8]
	dst->can_write_data[0] = AC_OBJECT_WRITE_REQ + OT_INT32;
 8001e6a:	2418      	movs	r4, #24
 8001e6c:	f880 4048 	strb.w	r4, [r0, #72]	; 0x48
	dst->can_write_data[4] = (acc << DT_ACC) + (gyro << DT_GYRO) + (angle << DT_ANGLE) + (mangetic << DT_MAGNETIC);
 8001e70:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
	dst->can_write_data[1] = SET_CAN_DATA;
 8001e74:	2416      	movs	r4, #22
 8001e76:	f880 4049 	strb.w	r4, [r0, #73]	; 0x49
	dst->can_write_data[4] = (acc << DT_ACC) + (gyro << DT_GYRO) + (angle << DT_ANGLE) + (mangetic << DT_MAGNETIC);
 8001e7a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	dst->can_write_data[2] = 0;
 8001e7e:	2400      	movs	r4, #0
 8001e80:	f880 404a 	strb.w	r4, [r0, #74]	; 0x4a
	dst->can_write_data[3] = 0;
 8001e84:	f880 404b 	strb.w	r4, [r0, #75]	; 0x4b
	dst->can_write_data[4] = (acc << DT_ACC) + (gyro << DT_GYRO) + (angle << DT_ANGLE) + (mangetic << DT_MAGNETIC);
 8001e88:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
	dst->can_write_data[5] = 0;
 8001e8c:	f880 404d 	strb.w	r4, [r0, #77]	; 0x4d
	dst->can_write_data[6] = 0;
 8001e90:	f880 404e 	strb.w	r4, [r0, #78]	; 0x4e
	dst->can_write_data[7] = 0;
 8001e94:	f880 404f 	strb.w	r4, [r0, #79]	; 0x4f
 8001e98:	bd10      	pop	{r4, pc}

08001e9a <mw_ahrs_set_period>:
}

void mw_ahrs_set_period(MW_AHRS *dst, uint32_t time)
{
	dst->can_write_data[0] = AC_OBJECT_WRITE_REQ + OT_INT32;
 8001e9a:	2318      	movs	r3, #24
 8001e9c:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
	dst->can_write_data[1] = SET_PERIOD;
 8001ea0:	f880 3049 	strb.w	r3, [r0, #73]	; 0x49
	dst->can_write_data[2] = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
	dst->can_write_data[3] = 0;
 8001eaa:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b

	dst->can_write_data[4] = GET_LOWBYTE_16(GET_LOWWORD_32(time));
	dst->can_write_data[5] = GET_HIGHBYTE_16(GET_LOWWORD_32(time));
 8001eae:	0a0b      	lsrs	r3, r1, #8
	dst->can_write_data[4] = GET_LOWBYTE_16(GET_LOWWORD_32(time));
 8001eb0:	f880 104c 	strb.w	r1, [r0, #76]	; 0x4c
	dst->can_write_data[5] = GET_HIGHBYTE_16(GET_LOWWORD_32(time));
 8001eb4:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
	dst->can_write_data[6] = GET_LOWBYTE_16(GET_HIGHWORD_32(time));
 8001eb8:	0c0b      	lsrs	r3, r1, #16
	dst->can_write_data[7] = GET_HIGHBYTE_16(GET_HIGHWORD_32(time));
 8001eba:	0e09      	lsrs	r1, r1, #24
	dst->can_write_data[6] = GET_LOWBYTE_16(GET_HIGHWORD_32(time));
 8001ebc:	f880 304e 	strb.w	r3, [r0, #78]	; 0x4e
	dst->can_write_data[7] = GET_HIGHBYTE_16(GET_HIGHWORD_32(time));
 8001ec0:	f880 104f 	strb.w	r1, [r0, #79]	; 0x4f
 8001ec4:	4770      	bx	lr
	...

08001ec8 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8001ec8:	b510      	push	{r4, lr}
 8001eca:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ecc:	4b2a      	ldr	r3, [pc, #168]	; (8001f78 <SystemClock_Config+0xb0>)
 8001ece:	2100      	movs	r1, #0
 8001ed0:	9100      	str	r1, [sp, #0]
 8001ed2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ed4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ed8:	641a      	str	r2, [r3, #64]	; 0x40
 8001eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	9b00      	ldr	r3, [sp, #0]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ee4:	4b25      	ldr	r3, [pc, #148]	; (8001f7c <SystemClock_Config+0xb4>)
 8001ee6:	9101      	str	r1, [sp, #4]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ef6:	9301      	str	r3, [sp, #4]
 8001ef8:	9b01      	ldr	r3, [sp, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001efa:	2301      	movs	r3, #1
 8001efc:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001efe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f02:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f04:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f08:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f0a:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f0c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001f0e:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f10:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001f12:	23b4      	movs	r3, #180	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f14:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001f16:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f18:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001f1a:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f1c:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f1e:	f7ff f985 	bl	800122c <HAL_RCC_OscConfig>
 8001f22:	b100      	cbz	r0, 8001f26 <SystemClock_Config+0x5e>
 8001f24:	e7fe      	b.n	8001f24 <SystemClock_Config+0x5c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001f26:	f7ff f847 	bl	8000fb8 <HAL_PWREx_EnableOverDrive>
 8001f2a:	b100      	cbz	r0, 8001f2e <SystemClock_Config+0x66>
 8001f2c:	e7fe      	b.n	8001f2c <SystemClock_Config+0x64>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f2e:	230f      	movs	r3, #15
 8001f30:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f32:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f36:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f38:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f3a:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f40:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f42:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f44:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f46:	f7ff f873 	bl	8001030 <HAL_RCC_ClockConfig>
 8001f4a:	4604      	mov	r4, r0
 8001f4c:	b100      	cbz	r0, 8001f50 <SystemClock_Config+0x88>
 8001f4e:	e7fe      	b.n	8001f4e <SystemClock_Config+0x86>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001f50:	f7ff f908 	bl	8001164 <HAL_RCC_GetHCLKFreq>
 8001f54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f58:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f5c:	f7fe ff18 	bl	8000d90 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001f60:	2004      	movs	r0, #4
 8001f62:	f7fe ff2b 	bl	8000dbc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001f66:	4622      	mov	r2, r4
 8001f68:	4621      	mov	r1, r4
 8001f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8001f6e:	f7fe fecf 	bl	8000d10 <HAL_NVIC_SetPriority>
}
 8001f72:	b014      	add	sp, #80	; 0x50
 8001f74:	bd10      	pop	{r4, pc}
 8001f76:	bf00      	nop
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40007000 	.word	0x40007000

08001f80 <HAL_CAN_RxCpltCallback>:
}

/* USER CODE BEGIN 4 */

void HAL_CAN_RxCpltCallback(CAN_HandleTypeDef* hcan)
{
 8001f80:	b538      	push	{r3, r4, r5, lr}
 8001f82:	4604      	mov	r4, r0
  for(int i=0; i<8; i++)
  {
    ahrs_obj.can_read_data[i] = rxMessage.Data[i];
 8001f84:	4d0a      	ldr	r5, [pc, #40]	; (8001fb0 <HAL_CAN_RxCpltCallback+0x30>)
 8001f86:	480b      	ldr	r0, [pc, #44]	; (8001fb4 <HAL_CAN_RxCpltCallback+0x34>)
  for(int i=0; i<8; i++)
 8001f88:	2300      	movs	r3, #0
    ahrs_obj.can_read_data[i] = rxMessage.Data[i];
 8001f8a:	1819      	adds	r1, r3, r0
 8001f8c:	18ea      	adds	r2, r5, r3
  for(int i=0; i<8; i++)
 8001f8e:	3301      	adds	r3, #1
    ahrs_obj.can_read_data[i] = rxMessage.Data[i];
 8001f90:	7d09      	ldrb	r1, [r1, #20]
 8001f92:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50
  for(int i=0; i<8; i++)
 8001f96:	2b08      	cmp	r3, #8
 8001f98:	d1f7      	bne.n	8001f8a <HAL_CAN_RxCpltCallback+0xa>
  }

  mw_ahrs_input_data(&ahrs_obj);
 8001f9a:	4805      	ldr	r0, [pc, #20]	; (8001fb0 <HAL_CAN_RxCpltCallback+0x30>)
 8001f9c:	f7ff fe5a 	bl	8001c54 <mw_ahrs_input_data>


  if (HAL_CAN_Receive_IT(hcan, CAN_FIFO0) != HAL_OK)
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	f7fe fcd8 	bl	8000958 <HAL_CAN_Receive_IT>
 8001fa8:	b100      	cbz	r0, 8001fac <HAL_CAN_RxCpltCallback+0x2c>
 8001faa:	e7fe      	b.n	8001faa <HAL_CAN_RxCpltCallback+0x2a>
 8001fac:	bd38      	pop	{r3, r4, r5, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000028 	.word	0x20000028
 8001fb4:	200001a0 	.word	0x200001a0

08001fb8 <mw_ahrsv1_trans>:
  {
    Error_Handler();
  }
}
void mw_ahrsv1_trans(void)
{
 8001fb8:	b513      	push	{r0, r1, r4, lr}
	int i = 0;
	mw_ahrs_set_period(&ahrs_obj, 1);
 8001fba:	2101      	movs	r1, #1
 8001fbc:	4811      	ldr	r0, [pc, #68]	; (8002004 <mw_ahrsv1_trans+0x4c>)
	mw_ahrs_set_data_type(&ahrs_obj, 0, 0, 1, 1);
	HAL_CAN_Transmit(&hcan1, 10);

	for(i=0; i<8; i++)
	{
	txMessage.Data[i] = ahrs_obj.can_write_data[i];
 8001fbe:	4c12      	ldr	r4, [pc, #72]	; (8002008 <mw_ahrsv1_trans+0x50>)
	mw_ahrs_set_period(&ahrs_obj, 1);
 8001fc0:	f7ff ff6b 	bl	8001e9a <mw_ahrs_set_period>
	HAL_CAN_Transmit(&hcan1, 10);
 8001fc4:	210a      	movs	r1, #10
 8001fc6:	4811      	ldr	r0, [pc, #68]	; (800200c <mw_ahrsv1_trans+0x54>)
 8001fc8:	f7fe fbf6 	bl	80007b8 <HAL_CAN_Transmit>
	mw_ahrs_set_data_type(&ahrs_obj, 0, 0, 1, 1);
 8001fcc:	2301      	movs	r3, #1
 8001fce:	2200      	movs	r2, #0
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	480b      	ldr	r0, [pc, #44]	; (8002004 <mw_ahrsv1_trans+0x4c>)
 8001fd6:	f7ff ff43 	bl	8001e60 <mw_ahrs_set_data_type>
	HAL_CAN_Transmit(&hcan1, 10);
 8001fda:	210a      	movs	r1, #10
 8001fdc:	480b      	ldr	r0, [pc, #44]	; (800200c <mw_ahrsv1_trans+0x54>)
 8001fde:	f7fe fbeb 	bl	80007b8 <HAL_CAN_Transmit>
	txMessage.Data[i] = ahrs_obj.can_write_data[i];
 8001fe2:	4808      	ldr	r0, [pc, #32]	; (8002004 <mw_ahrsv1_trans+0x4c>)
	for(i=0; i<8; i++)
 8001fe4:	2300      	movs	r3, #0
	txMessage.Data[i] = ahrs_obj.can_write_data[i];
 8001fe6:	18c1      	adds	r1, r0, r3
 8001fe8:	191a      	adds	r2, r3, r4
	for(i=0; i<8; i++)
 8001fea:	3301      	adds	r3, #1
	txMessage.Data[i] = ahrs_obj.can_write_data[i];
 8001fec:	f891 1048 	ldrb.w	r1, [r1, #72]	; 0x48
 8001ff0:	7511      	strb	r1, [r2, #20]
	for(i=0; i<8; i++)
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d1f7      	bne.n	8001fe6 <mw_ahrsv1_trans+0x2e>
	}

	HAL_CAN_Transmit(&hcan1, 10);
 8001ff6:	4805      	ldr	r0, [pc, #20]	; (800200c <mw_ahrsv1_trans+0x54>)
 8001ff8:	210a      	movs	r1, #10
}
 8001ffa:	b002      	add	sp, #8
 8001ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_CAN_Transmit(&hcan1, 10);
 8002000:	f7fe bbda 	b.w	80007b8 <HAL_CAN_Transmit>
 8002004:	20000028 	.word	0x20000028
 8002008:	200000c4 	.word	0x200000c4
 800200c:	2000015c 	.word	0x2000015c

08002010 <can_init_user>:
void can_init_user(void)
{
 8002010:	b530      	push	{r4, r5, lr}
	CAN_FilterConfTypeDef canFilter;

	hcan1.pTxMsg = &txMessage;
 8002012:	480f      	ldr	r0, [pc, #60]	; (8002050 <can_init_user+0x40>)
	hcan1.pRxMsg = &rxMessage;
 8002014:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <can_init_user+0x44>)
	hcan1.pTxMsg = &txMessage;
 8002016:	4c10      	ldr	r4, [pc, #64]	; (8002058 <can_init_user+0x48>)
	hcan1.pRxMsg = &rxMessage;
 8002018:	6343      	str	r3, [r0, #52]	; 0x34
{
 800201a:	b08b      	sub	sp, #44	; 0x2c

	canFilter.FilterNumber = 0;
 800201c:	2300      	movs	r3, #0
	canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
	canFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 800201e:	2501      	movs	r5, #1
	canFilter.FilterMaskIdLow = 0x0000;
	canFilter.FilterFIFOAssignment = 0;
	canFilter.FilterActivation = ENABLE;
	canFilter.BankNumber = 0;

	if(HAL_CAN_ConfigFilter(&hcan1, &canFilter) != HAL_OK)
 8002020:	4669      	mov	r1, sp
	hcan1.pTxMsg = &txMessage;
 8002022:	6304      	str	r4, [r0, #48]	; 0x30
	canFilter.FilterNumber = 0;
 8002024:	9305      	str	r3, [sp, #20]
	canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8002026:	9306      	str	r3, [sp, #24]
	canFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8002028:	9507      	str	r5, [sp, #28]
	canFilter.FilterIdHigh = 0x0000 << 5;
 800202a:	9300      	str	r3, [sp, #0]
	canFilter.FilterIdLow = 0x0000;
 800202c:	9301      	str	r3, [sp, #4]
	canFilter.FilterMaskIdHigh = 0x0000 << 5;
 800202e:	9302      	str	r3, [sp, #8]
	canFilter.FilterMaskIdLow = 0x0000;
 8002030:	9303      	str	r3, [sp, #12]
	canFilter.FilterFIFOAssignment = 0;
 8002032:	9304      	str	r3, [sp, #16]
	canFilter.FilterActivation = ENABLE;
 8002034:	9508      	str	r5, [sp, #32]
	canFilter.BankNumber = 0;
 8002036:	9309      	str	r3, [sp, #36]	; 0x24
	if(HAL_CAN_ConfigFilter(&hcan1, &canFilter) != HAL_OK)
 8002038:	f7fe faa8 	bl	800058c <HAL_CAN_ConfigFilter>
 800203c:	b100      	cbz	r0, 8002040 <can_init_user+0x30>
 800203e:	e7fe      	b.n	800203e <can_init_user+0x2e>

	txMessage.StdId = 0x01;
	txMessage.ExtId = 0x01;
	txMessage.RTR = CAN_RTR_DATA;
	txMessage.IDE = CAN_ID_STD;
	txMessage.DLC = 8;
 8002040:	2308      	movs	r3, #8
	txMessage.StdId = 0x01;
 8002042:	6025      	str	r5, [r4, #0]
	txMessage.ExtId = 0x01;
 8002044:	6065      	str	r5, [r4, #4]
	txMessage.RTR = CAN_RTR_DATA;
 8002046:	60e0      	str	r0, [r4, #12]
	txMessage.IDE = CAN_ID_STD;
 8002048:	60a0      	str	r0, [r4, #8]
	txMessage.DLC = 8;
 800204a:	6123      	str	r3, [r4, #16]
}
 800204c:	b00b      	add	sp, #44	; 0x2c
 800204e:	bd30      	pop	{r4, r5, pc}
 8002050:	2000015c 	.word	0x2000015c
 8002054:	200001a0 	.word	0x200001a0
 8002058:	200000c4 	.word	0x200000c4

0800205c <main>:
{
 800205c:	b570      	push	{r4, r5, r6, lr}
 800205e:	b086      	sub	sp, #24
  HAL_Init();
 8002060:	f7fe fa6c 	bl	800053c <HAL_Init>
  SystemClock_Config();
 8002064:	f7ff ff30 	bl	8001ec8 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002068:	2300      	movs	r3, #0
 800206a:	4a46      	ldr	r2, [pc, #280]	; (8002184 <main+0x128>)
 800206c:	9301      	str	r3, [sp, #4]
 800206e:	6b11      	ldr	r1, [r2, #48]	; 0x30
  hcan1.Instance = CAN1;
 8002070:	4c45      	ldr	r4, [pc, #276]	; (8002188 <main+0x12c>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002072:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002076:	6311      	str	r1, [r2, #48]	; 0x30
 8002078:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800207a:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800207e:	9101      	str	r1, [sp, #4]
 8002080:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002082:	9302      	str	r3, [sp, #8]
 8002084:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002086:	f041 0101 	orr.w	r1, r1, #1
 800208a:	6311      	str	r1, [r2, #48]	; 0x30
 800208c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800208e:	f001 0101 	and.w	r1, r1, #1
 8002092:	9102      	str	r1, [sp, #8]
 8002094:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002096:	9303      	str	r3, [sp, #12]
 8002098:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800209a:	f041 0102 	orr.w	r1, r1, #2
 800209e:	6311      	str	r1, [r2, #48]	; 0x30
 80020a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80020a2:	60a3      	str	r3, [r4, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a4:	f002 0202 	and.w	r2, r2, #2
 80020a8:	9203      	str	r2, [sp, #12]
 80020aa:	9a03      	ldr	r2, [sp, #12]
  hcan1.Init.Prescaler = 9;
 80020ac:	4a37      	ldr	r2, [pc, #220]	; (800218c <main+0x130>)
  hcan1.Init.SJW = CAN_SJW_1TQ;
 80020ae:	60e3      	str	r3, [r4, #12]
  hcan1.Init.Prescaler = 9;
 80020b0:	2609      	movs	r6, #9
 80020b2:	e884 0044 	stmia.w	r4, {r2, r6}
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80020b6:	4620      	mov	r0, r4
  hcan1.Init.BS1 = CAN_BS1_3TQ;
 80020b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020bc:	6122      	str	r2, [r4, #16]
  hcan1.Init.BS2 = CAN_BS2_1TQ;
 80020be:	6163      	str	r3, [r4, #20]
  hcan1.Init.TTCM = DISABLE;
 80020c0:	61a3      	str	r3, [r4, #24]
  hcan1.Init.ABOM = DISABLE;
 80020c2:	61e3      	str	r3, [r4, #28]
  hcan1.Init.AWUM = DISABLE;
 80020c4:	6223      	str	r3, [r4, #32]
  hcan1.Init.NART = DISABLE;
 80020c6:	6263      	str	r3, [r4, #36]	; 0x24
  hcan1.Init.RFLM = DISABLE;
 80020c8:	62a3      	str	r3, [r4, #40]	; 0x28
  hcan1.Init.TXFP = DISABLE;
 80020ca:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80020cc:	f7fe fade 	bl	800068c <HAL_CAN_Init>
 80020d0:	b100      	cbz	r0, 80020d4 <main+0x78>
 80020d2:	e7fe      	b.n	80020d2 <main+0x76>
  htim6.Instance = TIM6;
 80020d4:	4d2e      	ldr	r5, [pc, #184]	; (8002190 <main+0x134>)
  htim6.Init.Prescaler = 89;
 80020d6:	492f      	ldr	r1, [pc, #188]	; (8002194 <main+0x138>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020d8:	60a8      	str	r0, [r5, #8]
  htim6.Init.Prescaler = 89;
 80020da:	2359      	movs	r3, #89	; 0x59
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80020dc:	4628      	mov	r0, r5
  htim6.Init.Prescaler = 89;
 80020de:	e885 000a 	stmia.w	r5, {r1, r3}
  htim6.Init.Period = 9;
 80020e2:	60ee      	str	r6, [r5, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80020e4:	f7ff fb3c 	bl	8001760 <HAL_TIM_Base_Init>
 80020e8:	b100      	cbz	r0, 80020ec <main+0x90>
 80020ea:	e7fe      	b.n	80020ea <main+0x8e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ec:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ee:	9005      	str	r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80020f0:	a904      	add	r1, sp, #16
 80020f2:	4628      	mov	r0, r5
 80020f4:	f7ff fb4e 	bl	8001794 <HAL_TIMEx_MasterConfigSynchronization>
 80020f8:	b100      	cbz	r0, 80020fc <main+0xa0>
 80020fa:	e7fe      	b.n	80020fa <main+0x9e>
  htim7.Instance = TIM7;
 80020fc:	4d26      	ldr	r5, [pc, #152]	; (8002198 <main+0x13c>)
  htim7.Init.Prescaler = 900;
 80020fe:	4a27      	ldr	r2, [pc, #156]	; (800219c <main+0x140>)
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002100:	60a8      	str	r0, [r5, #8]
  htim7.Init.Prescaler = 900;
 8002102:	f44f 7361 	mov.w	r3, #900	; 0x384
 8002106:	e885 000c 	stmia.w	r5, {r2, r3}
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800210a:	4628      	mov	r0, r5
  htim7.Init.Period = 4000;
 800210c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002110:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002112:	f7ff fb25 	bl	8001760 <HAL_TIM_Base_Init>
 8002116:	b100      	cbz	r0, 800211a <main+0xbe>
 8002118:	e7fe      	b.n	8002118 <main+0xbc>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800211a:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800211c:	9005      	str	r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800211e:	a904      	add	r1, sp, #16
 8002120:	4628      	mov	r0, r5
 8002122:	f7ff fb37 	bl	8001794 <HAL_TIMEx_MasterConfigSynchronization>
 8002126:	b100      	cbz	r0, 800212a <main+0xce>
 8002128:	e7fe      	b.n	8002128 <main+0xcc>
  huart1.Instance = USART1;
 800212a:	4b1d      	ldr	r3, [pc, #116]	; (80021a0 <main+0x144>)
  huart1.Init.BaudRate = 115200;
 800212c:	4a1d      	ldr	r2, [pc, #116]	; (80021a4 <main+0x148>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800212e:	6098      	str	r0, [r3, #8]
  huart1.Init.BaudRate = 115200;
 8002130:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002134:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002136:	6118      	str	r0, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002138:	250c      	movs	r5, #12
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800213a:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800213c:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800213e:	4618      	mov	r0, r3
  huart1.Init.BaudRate = 115200;
 8002140:	e883 0044 	stmia.w	r3, {r2, r6}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002144:	615d      	str	r5, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002146:	f7ff fc71 	bl	8001a2c <HAL_UART_Init>
 800214a:	b100      	cbz	r0, 800214e <main+0xf2>
 800214c:	e7fe      	b.n	800214c <main+0xf0>
  huart2.Instance = USART2;
 800214e:	4b16      	ldr	r3, [pc, #88]	; (80021a8 <main+0x14c>)
 8002150:	4a16      	ldr	r2, [pc, #88]	; (80021ac <main+0x150>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002152:	6098      	str	r0, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002154:	60d8      	str	r0, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002156:	6118      	str	r0, [r3, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002158:	6198      	str	r0, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800215a:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800215c:	4618      	mov	r0, r3
  huart2.Init.Mode = UART_MODE_TX_RX;
 800215e:	615d      	str	r5, [r3, #20]
  huart2.Init.BaudRate = 115200;
 8002160:	e883 0044 	stmia.w	r3, {r2, r6}
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002164:	f7ff fc62 	bl	8001a2c <HAL_UART_Init>
 8002168:	4605      	mov	r5, r0
 800216a:	b100      	cbz	r0, 800216e <main+0x112>
 800216c:	e7fe      	b.n	800216c <main+0x110>
  can_init_user();
 800216e:	f7ff ff4f 	bl	8002010 <can_init_user>
  mw_ahrsv1_trans();
 8002172:	f7ff ff21 	bl	8001fb8 <mw_ahrsv1_trans>
  HAL_CAN_Receive_IT(&hcan1, CAN_FIFO0);
 8002176:	4629      	mov	r1, r5
 8002178:	4620      	mov	r0, r4
 800217a:	f7fe fbed 	bl	8000958 <HAL_CAN_Receive_IT>
	  now_tick = HAL_GetTick();
 800217e:	f7fe f9ff 	bl	8000580 <HAL_GetTick>
 8002182:	e7fc      	b.n	800217e <main+0x122>
 8002184:	40023800 	.word	0x40023800
 8002188:	2000015c 	.word	0x2000015c
 800218c:	40006400 	.word	0x40006400
 8002190:	200000e0 	.word	0x200000e0
 8002194:	40001000 	.word	0x40001000
 8002198:	200001c4 	.word	0x200001c4
 800219c:	40001400 	.word	0x40001400
 80021a0:	20000084 	.word	0x20000084
 80021a4:	40011000 	.word	0x40011000
 80021a8:	2000011c 	.word	0x2000011c
 80021ac:	40004400 	.word	0x40004400

080021b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b2:	2003      	movs	r0, #3
 80021b4:	f7fe fd9a 	bl	8000cec <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80021b8:	2200      	movs	r2, #0
 80021ba:	4611      	mov	r1, r2
 80021bc:	f06f 000b 	mvn.w	r0, #11
 80021c0:	f7fe fda6 	bl	8000d10 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80021c4:	2200      	movs	r2, #0
 80021c6:	4611      	mov	r1, r2
 80021c8:	f06f 000a 	mvn.w	r0, #10
 80021cc:	f7fe fda0 	bl	8000d10 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80021d0:	2200      	movs	r2, #0
 80021d2:	4611      	mov	r1, r2
 80021d4:	f06f 0009 	mvn.w	r0, #9
 80021d8:	f7fe fd9a 	bl	8000d10 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80021dc:	2200      	movs	r2, #0
 80021de:	4611      	mov	r1, r2
 80021e0:	f06f 0004 	mvn.w	r0, #4
 80021e4:	f7fe fd94 	bl	8000d10 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80021e8:	2200      	movs	r2, #0
 80021ea:	4611      	mov	r1, r2
 80021ec:	f06f 0003 	mvn.w	r0, #3
 80021f0:	f7fe fd8e 	bl	8000d10 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80021f4:	2200      	movs	r2, #0
 80021f6:	4611      	mov	r1, r2
 80021f8:	f06f 0001 	mvn.w	r0, #1
 80021fc:	f7fe fd88 	bl	8000d10 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002200:	2200      	movs	r2, #0
 8002202:	4611      	mov	r1, r2
 8002204:	f04f 30ff 	mov.w	r0, #4294967295
 8002208:	f7fe fd82 	bl	8000d10 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800220c:	2200      	movs	r2, #0
 800220e:	2005      	movs	r0, #5
 8002210:	4611      	mov	r1, r2
 8002212:	f7fe fd7d 	bl	8000d10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002216:	2005      	movs	r0, #5

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002218:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800221c:	f7fe bdac 	b.w	8000d78 <HAL_NVIC_EnableIRQ>

08002220 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002220:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcan->Instance==CAN1)
 8002222:	6802      	ldr	r2, [r0, #0]
 8002224:	4b14      	ldr	r3, [pc, #80]	; (8002278 <HAL_CAN_MspInit+0x58>)
 8002226:	429a      	cmp	r2, r3
{
 8002228:	b086      	sub	sp, #24
  if(hcan->Instance==CAN1)
 800222a:	d122      	bne.n	8002272 <HAL_CAN_MspInit+0x52>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800222c:	2400      	movs	r4, #0
 800222e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8002232:	9400      	str	r4, [sp, #0]
 8002234:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002236:	4811      	ldr	r0, [pc, #68]	; (800227c <HAL_CAN_MspInit+0x5c>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002238:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800223c:	641a      	str	r2, [r3, #64]	; 0x40
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	9403      	str	r4, [sp, #12]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800224a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800224e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002250:	2302      	movs	r3, #2
 8002252:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002254:	2303      	movs	r3, #3
 8002256:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002258:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800225a:	2309      	movs	r3, #9
 800225c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225e:	f7fe fdd1 	bl	8000e04 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002262:	2014      	movs	r0, #20
 8002264:	4622      	mov	r2, r4
 8002266:	4621      	mov	r1, r4
 8002268:	f7fe fd52 	bl	8000d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800226c:	2014      	movs	r0, #20
 800226e:	f7fe fd83 	bl	8000d78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002272:	b006      	add	sp, #24
 8002274:	bd10      	pop	{r4, pc}
 8002276:	bf00      	nop
 8002278:	40006400 	.word	0x40006400
 800227c:	40020400 	.word	0x40020400

08002280 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002280:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM6)
 8002282:	6803      	ldr	r3, [r0, #0]
 8002284:	4a16      	ldr	r2, [pc, #88]	; (80022e0 <HAL_TIM_Base_MspInit+0x60>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d115      	bne.n	80022b6 <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800228a:	2200      	movs	r2, #0
 800228c:	4b15      	ldr	r3, [pc, #84]	; (80022e4 <HAL_TIM_Base_MspInit+0x64>)
 800228e:	9200      	str	r2, [sp, #0]
 8002290:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002292:	f041 0110 	orr.w	r1, r1, #16
 8002296:	6419      	str	r1, [r3, #64]	; 0x40
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	f003 0310 	and.w	r3, r3, #16
 800229e:	9300      	str	r3, [sp, #0]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80022a0:	2036      	movs	r0, #54	; 0x36
 80022a2:	4611      	mov	r1, r2
    __HAL_RCC_TIM6_CLK_ENABLE();
 80022a4:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80022a6:	f7fe fd33 	bl	8000d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022aa:	2036      	movs	r0, #54	; 0x36
  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80022ac:	f7fe fd64 	bl	8000d78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80022b0:	b003      	add	sp, #12
 80022b2:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM7)
 80022b6:	4a0c      	ldr	r2, [pc, #48]	; (80022e8 <HAL_TIM_Base_MspInit+0x68>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d1f9      	bne.n	80022b0 <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80022bc:	2200      	movs	r2, #0
 80022be:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <HAL_TIM_Base_MspInit+0x64>)
 80022c0:	9201      	str	r2, [sp, #4]
 80022c2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80022c4:	f041 0120 	orr.w	r1, r1, #32
 80022c8:	6419      	str	r1, [r3, #64]	; 0x40
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	f003 0320 	and.w	r3, r3, #32
 80022d0:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80022d2:	2037      	movs	r0, #55	; 0x37
 80022d4:	4611      	mov	r1, r2
    __HAL_RCC_TIM7_CLK_ENABLE();
 80022d6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80022d8:	f7fe fd1a 	bl	8000d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80022dc:	2037      	movs	r0, #55	; 0x37
 80022de:	e7e5      	b.n	80022ac <HAL_TIM_Base_MspInit+0x2c>
 80022e0:	40001000 	.word	0x40001000
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40001400 	.word	0x40001400

080022ec <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022ec:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80022ee:	6803      	ldr	r3, [r0, #0]
 80022f0:	4a26      	ldr	r2, [pc, #152]	; (800238c <HAL_UART_MspInit+0xa0>)
 80022f2:	4293      	cmp	r3, r2
{
 80022f4:	b088      	sub	sp, #32
  if(huart->Instance==USART1)
 80022f6:	d124      	bne.n	8002342 <HAL_UART_MspInit+0x56>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022f8:	2400      	movs	r4, #0
 80022fa:	4b25      	ldr	r3, [pc, #148]	; (8002390 <HAL_UART_MspInit+0xa4>)
 80022fc:	9401      	str	r4, [sp, #4]
 80022fe:	6c59      	ldr	r1, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002300:	4824      	ldr	r0, [pc, #144]	; (8002394 <HAL_UART_MspInit+0xa8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002302:	f041 0110 	orr.w	r1, r1, #16
 8002306:	6459      	str	r1, [r3, #68]	; 0x44
 8002308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230a:	f003 0310 	and.w	r3, r3, #16
 800230e:	9301      	str	r3, [sp, #4]
 8002310:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002312:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002316:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002318:	2302      	movs	r3, #2
 800231a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800231c:	2301      	movs	r3, #1
 800231e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002320:	2303      	movs	r3, #3
 8002322:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002324:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002326:	2307      	movs	r3, #7
 8002328:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232a:	f7fe fd6b 	bl	8000e04 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800232e:	2025      	movs	r0, #37	; 0x25
 8002330:	4622      	mov	r2, r4
 8002332:	4621      	mov	r1, r4
 8002334:	f7fe fcec 	bl	8000d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002338:	2025      	movs	r0, #37	; 0x25
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800233a:	f7fe fd1d 	bl	8000d78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800233e:	b008      	add	sp, #32
 8002340:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 8002342:	4a15      	ldr	r2, [pc, #84]	; (8002398 <HAL_UART_MspInit+0xac>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d1fa      	bne.n	800233e <HAL_UART_MspInit+0x52>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002348:	2400      	movs	r4, #0
 800234a:	4b11      	ldr	r3, [pc, #68]	; (8002390 <HAL_UART_MspInit+0xa4>)
 800234c:	9402      	str	r4, [sp, #8]
 800234e:	6c19      	ldr	r1, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002350:	4810      	ldr	r0, [pc, #64]	; (8002394 <HAL_UART_MspInit+0xa8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002352:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8002356:	6419      	str	r1, [r3, #64]	; 0x40
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235e:	9302      	str	r3, [sp, #8]
 8002360:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002362:	230c      	movs	r3, #12
 8002364:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002366:	2302      	movs	r3, #2
 8002368:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800236a:	2301      	movs	r3, #1
 800236c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236e:	2303      	movs	r3, #3
 8002370:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002372:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002374:	2307      	movs	r3, #7
 8002376:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002378:	f7fe fd44 	bl	8000e04 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800237c:	2026      	movs	r0, #38	; 0x26
 800237e:	4622      	mov	r2, r4
 8002380:	4621      	mov	r1, r4
 8002382:	f7fe fcc5 	bl	8000d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002386:	2026      	movs	r0, #38	; 0x26
 8002388:	e7d7      	b.n	800233a <HAL_UART_MspInit+0x4e>
 800238a:	bf00      	nop
 800238c:	40011000 	.word	0x40011000
 8002390:	40023800 	.word	0x40023800
 8002394:	40020000 	.word	0x40020000
 8002398:	40004400 	.word	0x40004400

0800239c <NMI_Handler>:
 800239c:	4770      	bx	lr

0800239e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800239e:	e7fe      	b.n	800239e <HardFault_Handler>

080023a0 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80023a0:	e7fe      	b.n	80023a0 <MemManage_Handler>

080023a2 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80023a2:	e7fe      	b.n	80023a2 <BusFault_Handler>

080023a4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80023a4:	e7fe      	b.n	80023a4 <UsageFault_Handler>

080023a6 <SVC_Handler>:
 80023a6:	4770      	bx	lr

080023a8 <DebugMon_Handler>:
 80023a8:	4770      	bx	lr

080023aa <PendSV_Handler>:
 80023aa:	4770      	bx	lr

080023ac <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80023ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023ae:	f7fe f8df 	bl	8000570 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80023b6:	f7fe bd0e 	b.w	8000dd6 <HAL_SYSTICK_IRQHandler>

080023ba <RCC_IRQHandler>:

/**
* @brief This function handles RCC global interrupt.
*/
void RCC_IRQHandler(void)
{
 80023ba:	4770      	bx	lr

080023bc <CAN1_RX0_IRQHandler>:
void CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80023bc:	4801      	ldr	r0, [pc, #4]	; (80023c4 <CAN1_RX0_IRQHandler+0x8>)
 80023be:	f7fe bba9 	b.w	8000b14 <HAL_CAN_IRQHandler>
 80023c2:	bf00      	nop
 80023c4:	2000015c 	.word	0x2000015c

080023c8 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80023c8:	4801      	ldr	r0, [pc, #4]	; (80023d0 <USART1_IRQHandler+0x8>)
 80023ca:	f7ff bb9b 	b.w	8001b04 <HAL_UART_IRQHandler>
 80023ce:	bf00      	nop
 80023d0:	20000084 	.word	0x20000084

080023d4 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80023d4:	4801      	ldr	r0, [pc, #4]	; (80023dc <USART2_IRQHandler+0x8>)
 80023d6:	f7ff bb95 	b.w	8001b04 <HAL_UART_IRQHandler>
 80023da:	bf00      	nop
 80023dc:	2000011c 	.word	0x2000011c

080023e0 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80023e0:	4801      	ldr	r0, [pc, #4]	; (80023e8 <TIM6_DAC_IRQHandler+0x8>)
 80023e2:	f7ff b8b6 	b.w	8001552 <HAL_TIM_IRQHandler>
 80023e6:	bf00      	nop
 80023e8:	200000e0 	.word	0x200000e0

080023ec <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80023ec:	4801      	ldr	r0, [pc, #4]	; (80023f4 <TIM7_IRQHandler+0x8>)
 80023ee:	f7ff b8b0 	b.w	8001552 <HAL_TIM_IRQHandler>
 80023f2:	bf00      	nop
 80023f4:	200001c4 	.word	0x200001c4

080023f8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023f8:	490f      	ldr	r1, [pc, #60]	; (8002438 <SystemInit+0x40>)
 80023fa:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80023fe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002406:	4b0d      	ldr	r3, [pc, #52]	; (800243c <SystemInit+0x44>)
 8002408:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800240a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800240c:	f042 0201 	orr.w	r2, r2, #1
 8002410:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002412:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800241a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800241e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002420:	4a07      	ldr	r2, [pc, #28]	; (8002440 <SystemInit+0x48>)
 8002422:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800242a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800242c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800242e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002432:	608b      	str	r3, [r1, #8]
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	e000ed00 	.word	0xe000ed00
 800243c:	40023800 	.word	0x40023800
 8002440:	24003010 	.word	0x24003010

08002444 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002444:	f8df d034 	ldr.w	sp, [pc, #52]	; 800247c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002448:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800244a:	e003      	b.n	8002454 <LoopCopyDataInit>

0800244c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800244c:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800244e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002450:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002452:	3104      	adds	r1, #4

08002454 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002454:	480b      	ldr	r0, [pc, #44]	; (8002484 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002456:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002458:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800245a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800245c:	d3f6      	bcc.n	800244c <CopyDataInit>
  ldr  r2, =_sbss
 800245e:	4a0b      	ldr	r2, [pc, #44]	; (800248c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002460:	e002      	b.n	8002468 <LoopFillZerobss>

08002462 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002462:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002464:	f842 3b04 	str.w	r3, [r2], #4

08002468 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002468:	4b09      	ldr	r3, [pc, #36]	; (8002490 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800246a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800246c:	d3f9      	bcc.n	8002462 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800246e:	f7ff ffc3 	bl	80023f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002472:	f000 f811 	bl	8002498 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002476:	f7ff fdf1 	bl	800205c <main>
  bx  lr    
 800247a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800247c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002480:	080026f4 	.word	0x080026f4
  ldr  r0, =_sdata
 8002484:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002488:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 800248c:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8002490:	20000200 	.word	0x20000200

08002494 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002494:	e7fe      	b.n	8002494 <ADC_IRQHandler>
	...

08002498 <__libc_init_array>:
 8002498:	b570      	push	{r4, r5, r6, lr}
 800249a:	4e0d      	ldr	r6, [pc, #52]	; (80024d0 <__libc_init_array+0x38>)
 800249c:	4c0d      	ldr	r4, [pc, #52]	; (80024d4 <__libc_init_array+0x3c>)
 800249e:	1ba4      	subs	r4, r4, r6
 80024a0:	10a4      	asrs	r4, r4, #2
 80024a2:	2500      	movs	r5, #0
 80024a4:	42a5      	cmp	r5, r4
 80024a6:	d109      	bne.n	80024bc <__libc_init_array+0x24>
 80024a8:	4e0b      	ldr	r6, [pc, #44]	; (80024d8 <__libc_init_array+0x40>)
 80024aa:	4c0c      	ldr	r4, [pc, #48]	; (80024dc <__libc_init_array+0x44>)
 80024ac:	f000 f8f2 	bl	8002694 <_init>
 80024b0:	1ba4      	subs	r4, r4, r6
 80024b2:	10a4      	asrs	r4, r4, #2
 80024b4:	2500      	movs	r5, #0
 80024b6:	42a5      	cmp	r5, r4
 80024b8:	d105      	bne.n	80024c6 <__libc_init_array+0x2e>
 80024ba:	bd70      	pop	{r4, r5, r6, pc}
 80024bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024c0:	4798      	blx	r3
 80024c2:	3501      	adds	r5, #1
 80024c4:	e7ee      	b.n	80024a4 <__libc_init_array+0xc>
 80024c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024ca:	4798      	blx	r3
 80024cc:	3501      	adds	r5, #1
 80024ce:	e7f2      	b.n	80024b6 <__libc_init_array+0x1e>
 80024d0:	080026ec 	.word	0x080026ec
 80024d4:	080026ec 	.word	0x080026ec
 80024d8:	080026ec 	.word	0x080026ec
 80024dc:	080026f0 	.word	0x080026f0

080024e0 <atanf>:
 80024e0:	b538      	push	{r3, r4, r5, lr}
 80024e2:	ee10 5a10 	vmov	r5, s0
 80024e6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80024ea:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80024ee:	eef0 7a40 	vmov.f32	s15, s0
 80024f2:	db10      	blt.n	8002516 <atanf+0x36>
 80024f4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80024f8:	dd04      	ble.n	8002504 <atanf+0x24>
 80024fa:	ee70 7a00 	vadd.f32	s15, s0, s0
 80024fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002502:	bd38      	pop	{r3, r4, r5, pc}
 8002504:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8002638 <atanf+0x158>
 8002508:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800263c <atanf+0x15c>
 800250c:	2d00      	cmp	r5, #0
 800250e:	bfc8      	it	gt
 8002510:	eef0 7a47 	vmovgt.f32	s15, s14
 8002514:	e7f3      	b.n	80024fe <atanf+0x1e>
 8002516:	4b4a      	ldr	r3, [pc, #296]	; (8002640 <atanf+0x160>)
 8002518:	429c      	cmp	r4, r3
 800251a:	dc10      	bgt.n	800253e <atanf+0x5e>
 800251c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8002520:	da0a      	bge.n	8002538 <atanf+0x58>
 8002522:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002644 <atanf+0x164>
 8002526:	ee30 7a07 	vadd.f32	s14, s0, s14
 800252a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800252e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8002532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002536:	dce2      	bgt.n	80024fe <atanf+0x1e>
 8002538:	f04f 33ff 	mov.w	r3, #4294967295
 800253c:	e013      	b.n	8002566 <atanf+0x86>
 800253e:	f000 f8a1 	bl	8002684 <fabsf>
 8002542:	4b41      	ldr	r3, [pc, #260]	; (8002648 <atanf+0x168>)
 8002544:	429c      	cmp	r4, r3
 8002546:	dc4d      	bgt.n	80025e4 <atanf+0x104>
 8002548:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800254c:	429c      	cmp	r4, r3
 800254e:	dc3f      	bgt.n	80025d0 <atanf+0xf0>
 8002550:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8002554:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002558:	eea0 7a27 	vfma.f32	s14, s0, s15
 800255c:	2300      	movs	r3, #0
 800255e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002562:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800256c:	eddf 6a37 	vldr	s13, [pc, #220]	; 800264c <atanf+0x16c>
 8002570:	eddf 5a37 	vldr	s11, [pc, #220]	; 8002650 <atanf+0x170>
 8002574:	ed9f 5a37 	vldr	s10, [pc, #220]	; 8002654 <atanf+0x174>
 8002578:	ee26 7a06 	vmul.f32	s14, s12, s12
 800257c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8002580:	eddf 6a35 	vldr	s13, [pc, #212]	; 8002658 <atanf+0x178>
 8002584:	eee7 6a25 	vfma.f32	s13, s14, s11
 8002588:	eddf 5a34 	vldr	s11, [pc, #208]	; 800265c <atanf+0x17c>
 800258c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8002590:	eddf 6a33 	vldr	s13, [pc, #204]	; 8002660 <atanf+0x180>
 8002594:	eee7 6a25 	vfma.f32	s13, s14, s11
 8002598:	eddf 5a32 	vldr	s11, [pc, #200]	; 8002664 <atanf+0x184>
 800259c:	eee7 5a26 	vfma.f32	s11, s14, s13
 80025a0:	eddf 6a31 	vldr	s13, [pc, #196]	; 8002668 <atanf+0x188>
 80025a4:	eea7 5a26 	vfma.f32	s10, s14, s13
 80025a8:	eddf 6a30 	vldr	s13, [pc, #192]	; 800266c <atanf+0x18c>
 80025ac:	eee7 6a05 	vfma.f32	s13, s14, s10
 80025b0:	ed9f 5a2f 	vldr	s10, [pc, #188]	; 8002670 <atanf+0x190>
 80025b4:	eea7 5a26 	vfma.f32	s10, s14, s13
 80025b8:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8002674 <atanf+0x194>
 80025bc:	eee7 6a05 	vfma.f32	s13, s14, s10
 80025c0:	ee26 7a87 	vmul.f32	s14, s13, s14
 80025c4:	ee05 7a86 	vmla.f32	s14, s11, s12
 80025c8:	d121      	bne.n	800260e <atanf+0x12e>
 80025ca:	eee7 7ac7 	vfms.f32	s15, s15, s14
 80025ce:	e796      	b.n	80024fe <atanf+0x1e>
 80025d0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80025d4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80025d8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80025dc:	2301      	movs	r3, #1
 80025de:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80025e2:	e7c0      	b.n	8002566 <atanf+0x86>
 80025e4:	4b24      	ldr	r3, [pc, #144]	; (8002678 <atanf+0x198>)
 80025e6:	429c      	cmp	r4, r3
 80025e8:	dc0b      	bgt.n	8002602 <atanf+0x122>
 80025ea:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80025ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80025f2:	eea0 7a27 	vfma.f32	s14, s0, s15
 80025f6:	2302      	movs	r3, #2
 80025f8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80025fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002600:	e7b1      	b.n	8002566 <atanf+0x86>
 8002602:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002606:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800260a:	2303      	movs	r3, #3
 800260c:	e7ab      	b.n	8002566 <atanf+0x86>
 800260e:	4a1b      	ldr	r2, [pc, #108]	; (800267c <atanf+0x19c>)
 8002610:	491b      	ldr	r1, [pc, #108]	; (8002680 <atanf+0x1a0>)
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	441a      	add	r2, r3
 8002616:	440b      	add	r3, r1
 8002618:	edd3 6a00 	vldr	s13, [r3]
 800261c:	eed7 6a87 	vfnms.f32	s13, s15, s14
 8002620:	2d00      	cmp	r5, #0
 8002622:	ed92 7a00 	vldr	s14, [r2]
 8002626:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800262a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800262e:	bfb8      	it	lt
 8002630:	eef1 7a67 	vneglt.f32	s15, s15
 8002634:	e763      	b.n	80024fe <atanf+0x1e>
 8002636:	bf00      	nop
 8002638:	bfc90fdb 	.word	0xbfc90fdb
 800263c:	3fc90fdb 	.word	0x3fc90fdb
 8002640:	3edfffff 	.word	0x3edfffff
 8002644:	7149f2ca 	.word	0x7149f2ca
 8002648:	3f97ffff 	.word	0x3f97ffff
 800264c:	3c8569d7 	.word	0x3c8569d7
 8002650:	3d4bda59 	.word	0x3d4bda59
 8002654:	bd6ef16b 	.word	0xbd6ef16b
 8002658:	3d886b35 	.word	0x3d886b35
 800265c:	3dba2e6e 	.word	0x3dba2e6e
 8002660:	3e124925 	.word	0x3e124925
 8002664:	3eaaaaab 	.word	0x3eaaaaab
 8002668:	bd15a221 	.word	0xbd15a221
 800266c:	bd9d8795 	.word	0xbd9d8795
 8002670:	bde38e38 	.word	0xbde38e38
 8002674:	be4ccccd 	.word	0xbe4ccccd
 8002678:	401bffff 	.word	0x401bffff
 800267c:	080026c4 	.word	0x080026c4
 8002680:	080026d4 	.word	0x080026d4

08002684 <fabsf>:
 8002684:	ee10 3a10 	vmov	r3, s0
 8002688:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800268c:	ee00 3a10 	vmov	s0, r3
 8002690:	4770      	bx	lr
	...

08002694 <_init>:
 8002694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002696:	bf00      	nop
 8002698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800269a:	bc08      	pop	{r3}
 800269c:	469e      	mov	lr, r3
 800269e:	4770      	bx	lr

080026a0 <_fini>:
 80026a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a2:	bf00      	nop
 80026a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026a6:	bc08      	pop	{r3}
 80026a8:	469e      	mov	lr, r3
 80026aa:	4770      	bx	lr
